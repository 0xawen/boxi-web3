"use strict";(self.webpackChunkweb_3_blog=self.webpackChunkweb_3_blog||[]).push([[1953],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>d});var r=n(7294);function l(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){l(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,r,l=function(e,t){if(null==e)return{};var n,r,l={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(l[n]=e[n]);return l}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(l[n]=e[n])}return l}var i=r.createContext({}),c=function(e){var t=r.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},u=function(e){var t=c(e.components);return r.createElement(i.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,l=e.mdxType,a=e.originalType,i=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),m=c(n),d=l,f=m["".concat(i,".").concat(d)]||m[d]||p[d]||a;return n?r.createElement(f,s(s({ref:t},u),{},{components:n})):r.createElement(f,s({ref:t},u))}));function d(e,t){var n=arguments,l=t&&t.mdxType;if("string"==typeof e||l){var a=n.length,s=new Array(a);s[0]=m;var o={};for(var i in t)hasOwnProperty.call(t,i)&&(o[i]=t[i]);o.originalType=e,o.mdxType="string"==typeof e?e:l,s[1]=o;for(var c=2;c<a;c++)s[c]=n[c];return r.createElement.apply(null,s)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},8114:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>i,contentTitle:()=>s,default:()=>p,frontMatter:()=>a,metadata:()=>o,toc:()=>c});var r=n(7462),l=(n(7294),n(3905));const a={},s="\u952e\u503c\u5bf9",o={unversionedId:"rust/rust\u57fa\u7840\u77e5\u8bc6/\u952e\u503c\u5bf9",id:"rust/rust\u57fa\u7840\u77e5\u8bc6/\u952e\u503c\u5bf9",title:"\u952e\u503c\u5bf9",description:"\u521b\u5efamap",source:"@site/docs\\rust\\rust\u57fa\u7840\u77e5\u8bc6\\\u952e\u503c\u5bf9.md",sourceDirName:"rust/rust\u57fa\u7840\u77e5\u8bc6",slug:"/rust/rust\u57fa\u7840\u77e5\u8bc6/\u952e\u503c\u5bf9",permalink:"/docs/rust/rust\u57fa\u7840\u77e5\u8bc6/\u952e\u503c\u5bf9",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"rust",previous:{title:"\u52a8\u6001\u6570\u7ec4",permalink:"/docs/rust/rust\u57fa\u7840\u77e5\u8bc6/\u52a8\u6001\u6570\u7ec4"},next:{title:"\u7c7b\u578b\u8f6c\u6362",permalink:"/docs/rust/rust\u57fa\u7840\u77e5\u8bc6/\u7c7b\u578b\u8f6c\u6362"}},i={},c=[{value:"\u521b\u5efamap",id:"\u521b\u5efamap",level:3},{value:"\u4f7f\u7528\u8fed\u4ee3\u5668\u548ccollect\u65b9\u6cd5\u521b\u5efa",id:"\u4f7f\u7528\u8fed\u4ee3\u5668\u548ccollect\u65b9\u6cd5\u521b\u5efa",level:3},{value:"\u6240\u6709\u6743\u8f6c\u79fb",id:"\u6240\u6709\u6743\u8f6c\u79fb",level:3},{value:"\u8bfb\u53d6\u64cd\u4f5c",id:"\u8bfb\u53d6\u64cd\u4f5c",level:3},{value:"\u5199\u5165\u64cd\u4f5c",id:"\u5199\u5165\u64cd\u4f5c",level:3}],u={toc:c};function p(e){let{components:t,...n}=e;return(0,l.kt)("wrapper",(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("h1",{id:"\u952e\u503c\u5bf9"},"\u952e\u503c\u5bf9"),(0,l.kt)("h3",{id:"\u521b\u5efamap"},"\u521b\u5efamap"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rust"},'use std::collections::HashMap;\n\nlet mut my_gens = HasMap::new();\n// \u5c06\u5b9d\u77f3\u7c7b\u578b\u548c\u5bf9\u5e94\u7684\u6570\u91cf\u5199\u5165\u8868\u4e2d\nmy_gems.insert("\u7ea2\u5b9d\u77f3", 1);\nmy_gems.insert("\u84dd\u5b9d\u77f3", 2);\nmy_gems.insert("\u6cb3\u8fb9\u6361\u7684\u8bef\u4ee5\u4e3a\u662f\u5b9d\u77f3\u7684\u7834\u77f3\u5934", 18);\n')),(0,l.kt)("h3",{id:"\u4f7f\u7528\u8fed\u4ee3\u5668\u548ccollect\u65b9\u6cd5\u521b\u5efa"},"\u4f7f\u7528\u8fed\u4ee3\u5668\u548ccollect\u65b9\u6cd5\u521b\u5efa"),(0,l.kt)("p",null,"\u573a\u666f\uff1a\u4ece\u4e00\u4e2a\u6570\u636e\u7ed3\u6784 \u5230 \u53e6\u4e00\u4e2a map"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rust"},'// \u6570\u7ec4 --\x3e map\n// \n\n// \u4f7f\u7528collect \u6539\u8fdb\nfn main() {\n    use std::collection::HashMap;\n    \n    let teams_list = vec![\n        ("aaa".to_string(), 100),\n        ("bbb".to_string(), 100),\n        ("ccc".to_string(), 100),\n    ];\n    \n    let teams_map: HashMap<_,_> = teams_list.into_iter().collect();\n     println!("{:?}",teams_map)\n}\n')),(0,l.kt)("h3",{id:"\u6240\u6709\u6743\u8f6c\u79fb"},"\u6240\u6709\u6743\u8f6c\u79fb"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"HashMap")," \u7684\u6240\u6709\u6743\u89c4\u5219\u4e0e\u5176\u5b83 Rust \u7c7b\u578b\u6ca1\u6709\u533a\u522b\uff1a"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"\u82e5\u7c7b\u578b\u5b9e\u73b0 ",(0,l.kt)("inlineCode",{parentName:"li"},"Copy")," \u7279\u5f81\uff0c\u8be5\u7c7b\u578b\u4f1a\u88ab\u590d\u5236\u8fdb ",(0,l.kt)("inlineCode",{parentName:"li"},"HashMap"),"\uff0c\u56e0\u6b64\u65e0\u6240\u8c13\u6240\u6709\u6743"),(0,l.kt)("li",{parentName:"ul"},"\u82e5\u6ca1\u5b9e\u73b0 ",(0,l.kt)("inlineCode",{parentName:"li"},"Copy")," \u7279\u5f81\uff0c\u6240\u6709\u6743\u5c06\u88ab\u8f6c\u79fb\u7ed9 ",(0,l.kt)("inlineCode",{parentName:"li"},"HashMap")," \u4e2d")),(0,l.kt)("h3",{id:"\u8bfb\u53d6\u64cd\u4f5c"},"\u8bfb\u53d6\u64cd\u4f5c"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"get")," \u65b9\u5f0f")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rust"},'use std::collections::HashMap;\nlet mut scores = HashMap::New();\n\nscores.insert(String::from("Blue"), 10);\nscores.insert(String::from("Red"), 10);\nlet team_name = STring::from("Buld");\nlet score: Option<&i32> = scores.get(&team_name);\n//get \u65b9\u6cd5\u8fd4\u56de\u4e00\u4e2a Option<&i32> \u7c7b\u578b\uff1a\u5f53\u67e5\u8be2\u4e0d\u5230\u65f6\uff0c\u4f1a\u8fd4\u56de\u4e00\u4e2a None\uff0c\u67e5\u8be2\u5230\u65f6\u8fd4\u56de Some(&i32)\n//&i32 \u662f\u5bf9 HashMap \u4e2d\u503c\u7684\u501f\u7528\uff0c\u5982\u679c\u4e0d\u4f7f\u7528\u501f\u7528\uff0c\u53ef\u80fd\u4f1a\u53d1\u751f\u6240\u6709\u6743\u7684\u8f6c\u79fb\n')),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"\u904d\u5386")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rust"},'use std::collections::HashMap;\n\nlet mut scores = HashMap::new();\nscores.insert(String::from("Blue"), 10);\nscores.insert(String::from("Yellow"), 50);\n\nfor (k, v) in &scores {\n    println!("{}: {}", key, value);\n}\n')),(0,l.kt)("h3",{id:"\u5199\u5165\u64cd\u4f5c"},"\u5199\u5165\u64cd\u4f5c"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rust"},'// \u5728\u6ca1\u6709\u503c\u65f6\u5019\u63d2\u5165\nfn main() {\n    use std::collections::HashMap;\n\n    let mut scores = HashMap::new();\n\n    scores.insert("Blue", 10);\n    \n    // \u8986\u76d6\u5df2\u6709\u7684\u503c\n    let old = scores.insert("Blue", 20);\n    \n    // \u67e5\u8be2\u65b0\u63d2\u5165\u7684\u503c\n    let new = scores.get("Blue");\n    assert_eq!(new, Some(&20));\n    \n    // \u67e5\u8be2 yellow \n    let v = scores.entry("Yellow").or_insert(5);\n    assert_eq!(*v, 5);\n    \n    // \u67e5\u8be2Yellow\u5bf9\u5e94\u7684\u503c\uff0c\u82e5\u4e0d\u5b58\u5728\u5219\u63d2\u5165\u65b0\u503c\n    let v = scores.entry("Yellow").or_insert(50);\n    assert_eq!(*v, 5); // \u5df2\u7ecf\u5b58\u5728\uff0c\u56e0\u6b6450\u6ca1\u6709\u63d2\u5165\n}\n\n// \u5728\u6709\u503c\u7684\u60c5\u51b5\u4e0b\u66f4\u65b0\u503c\nfn update() {\n    use std::collections::HashMap;\n    \n    let text = "hello world wonderful world";\n    \n    let mut map = HashMap::new();\n    \n    for word in text.split_whitespace() {\n        let count = map.entry(word).or_insert(0);\n        *count += 1;\n    }\n}\n')))}p.isMDXComponent=!0}}]);