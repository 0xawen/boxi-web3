"use strict";(self.webpackChunkweb_3_blog=self.webpackChunkweb_3_blog||[]).push([[4558],{3905:(t,e,n)=>{n.d(e,{Zo:()=>s,kt:()=>f});var a=n(7294);function p(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function r(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(t);e&&(a=a.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,a)}return n}function o(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?r(Object(n),!0).forEach((function(e){p(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function u(t,e){if(null==t)return{};var n,a,p=function(t,e){if(null==t)return{};var n,a,p={},r=Object.keys(t);for(a=0;a<r.length;a++)n=r[a],e.indexOf(n)>=0||(p[n]=t[n]);return p}(t,e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);for(a=0;a<r.length;a++)n=r[a],e.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(t,n)&&(p[n]=t[n])}return p}var c=a.createContext({}),l=function(t){var e=a.useContext(c),n=e;return t&&(n="function"==typeof t?t(e):o(o({},e),t)),n},s=function(t){var e=l(t.components);return a.createElement(c.Provider,{value:e},t.children)},i={inlineCode:"code",wrapper:function(t){var e=t.children;return a.createElement(a.Fragment,{},e)}},m=a.forwardRef((function(t,e){var n=t.components,p=t.mdxType,r=t.originalType,c=t.parentName,s=u(t,["components","mdxType","originalType","parentName"]),m=l(n),f=p,d=m["".concat(c,".").concat(f)]||m[f]||i[f]||r;return n?a.createElement(d,o(o({ref:e},s),{},{components:n})):a.createElement(d,o({ref:e},s))}));function f(t,e){var n=arguments,p=e&&e.mdxType;if("string"==typeof t||p){var r=n.length,o=new Array(r);o[0]=m;var u={};for(var c in e)hasOwnProperty.call(e,c)&&(u[c]=e[c]);u.originalType=t,u.mdxType="string"==typeof t?t:p,o[1]=u;for(var l=2;l<r;l++)o[l]=n[l];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},5235:(t,e,n)=>{n.r(e),n.d(e,{assets:()=>c,contentTitle:()=>o,default:()=>i,frontMatter:()=>r,metadata:()=>u,toc:()=>l});var a=n(7462),p=(n(7294),n(3905));const r={},o="\u8de8\u5408\u7ea6\u8c03\u7528",u={unversionedId:"rust_contract/solana/solana_workflow/\u8de8\u5408\u7ea6\u8c03\u7528",id:"rust_contract/solana/solana_workflow/\u8de8\u5408\u7ea6\u8c03\u7528",title:"\u8de8\u5408\u7ea6\u8c03\u7528",description:"- \u7a0b\u5e8f1\uff1a puppet",source:"@site/docs\\rust_contract\\solana\\01_solana_workflow\\\u8de8\u5408\u7ea6\u8c03\u7528.md",sourceDirName:"rust_contract/solana/01_solana_workflow",slug:"/rust_contract/solana/solana_workflow/\u8de8\u5408\u7ea6\u8c03\u7528",permalink:"/docs/rust_contract/solana/solana_workflow/\u8de8\u5408\u7ea6\u8c03\u7528",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"rust_contract",previous:{title:"\u7f16\u5199\u5408\u7ea6",permalink:"/docs/rust_contract/solana/solana_workflow/\u7f16\u5199\u5408\u7ea6"},next:{title:"\u7a0b\u5e8f\u6d3e\u751f\u5730\u5740",permalink:"/docs/rust_contract/solana/solana_workflow/\u7a0b\u5e8f\u6d3e\u751f\u5730\u5740"}},c={},l=[{value:"\u7f16\u5199 pupper-master",id:"\u7f16\u5199-pupper-master",level:2}],s={toc:l};function i(t){let{components:e,...n}=t;return(0,p.kt)("wrapper",(0,a.Z)({},s,n,{components:e,mdxType:"MDXLayout"}),(0,p.kt)("h1",{id:"\u8de8\u5408\u7ea6\u8c03\u7528"},"\u8de8\u5408\u7ea6\u8c03\u7528"),(0,p.kt)("ul",null,(0,p.kt)("li",{parentName:"ul"},"\u7a0b\u5e8f1\uff1a puppet"),(0,p.kt)("li",{parentName:"ul"},"\u7a0b\u5e8f2\uff1a pupper-master")),(0,p.kt)("p",null,"\u7a0b\u5e8f2 \u8c03\u7528 \u7a0b\u5e8f2"),(0,p.kt)("h1",{id:"\u7f16\u5199\u7a0b\u5e8f-pupper"},"\u7f16\u5199\u7a0b\u5e8f pupper"),(0,p.kt)("pre",null,(0,p.kt)("code",{parentName:"pre",className:"language-bash"},"anchor init puppet\n")),(0,p.kt)("p",null,"\u5199\u5165\u4e00\u4e0b\u4ee3\u7801\uff1a"),(0,p.kt)("pre",null,(0,p.kt)("code",{parentName:"pre",className:"language-rust"},"use anchor_lang::prelude:*;\n\ndeclare_id!(\"Fg6PaFpoGXkYsidMpWTK6W2BeZ7FEfcYkg476zPFsLnS\");\n\n#[program]\npub mod puppet {\n    use super::*;\n    pub fn initialize(_ctx: Context<Initialize>) -> Result<()> {\n        Ok(())\n    }\n\n\n    pub fn set_data(ctx: Context<SetData>, data: u64) -> Result<()> {\n        let puppet = &mut ctx.accounts.puppet;\n        puppet.data = data;\n        Ok(())\n    }\n}\n\n#[derive(Accounts)]\npub struct Initialize<'info> {\n    #[account(init, payer = user, space = 8 + 8)]\n    pub puppet: Account<'info, Data>,\n    #[account(mut)]\n    pub user: Signer<'info>,\n    pub system_program: Program<'info, System>,\n}\n\n#[derive(Accounts)]\npub struct SetData<'info> {\n    #[account(mut)]\n    pub puppet: Account<'info, Data>,\n}\n\n#[account]\npub struct Data {\n    pub data: u64,\n}\n")),(0,p.kt)("h2",{id:"\u7f16\u5199-pupper-master"},"\u7f16\u5199 pupper-master"),(0,p.kt)("pre",null,(0,p.kt)("code",{parentName:"pre",className:"language-rust"},"anchor new puppet-master\n")),(0,p.kt)("pre",null,(0,p.kt)("code",{parentName:"pre",className:"language-rust"},"use anchor_lang::prelude::*;\n// \u5bfc\u5165\u9700\u8981\u5f15\u7528\u7684\u7a0b\u5e8f\nuse puppet::cpi::accounts::SetData;\nuse puppet::program::Puppet;\nuse puppet::{self,Data};\n\ndeclare_id!(\"HmbTLCmaGvZhKnn1Zfa1JVnp7vkMV4DYVxPLWBVoN65L\");\n\n#[program]\nmod puppet_master {\n    use super::*;\n    pub fn pull_strings(ctx: Context<PullStrings>, data: u64) -> Result<()> {\n        let cpi_program = ctx.accounts.puppet_program.to_account_info();\n        let cpi_accounts = SetData {\n            puppet: ctx.accounts.puppet.to_account_info(),\n        };\n        let cpi_ctx = CpiContext::new(cpi_program, cpi_accounts);\n        puppet::cpi::set_data(cpi_ctx, data)\n    }\n}\n\n#[derive(Accounts)]\npub struct PullStrings<'info> {\n    #[account(mut)]\n    pub puppet: Account<'info, Data>,\n    pub puppet_program: Program<'info, Puppet>,\n}\n")),(0,p.kt)("p",null,(0,p.kt)("inlineCode",{parentName:"p"},"Anchor.toml")," \u6dfb\u52a0\u4e00\u4e0b\u5185\u5bb9"),(0,p.kt)("pre",null,(0,p.kt)("code",{parentName:"pre",className:"language-toml"},'[programs.localnet]\npuppet_master = "HmbTLCmaGvZhKnn1Zfa1JVnp7vkMV4DYVxPLWBVoN65L\n')),(0,p.kt)("p",null,(0,p.kt)("inlineCode",{parentName:"p"},"Cargo.toml")," \u6dfb\u52a0\u4f9d\u8d56\uff0c\u5f00\u542f cpi"),(0,p.kt)("pre",null,(0,p.kt)("code",{parentName:"pre",className:"language-toml"},'puppet = { path = "../puppet", features = ["cpi"]}\n')),(0,p.kt)("p",null,"\u6700\u540epuppet-master \u7684\u7a0b\u5e8f\u662f\u8fd9\u6837\u7684\uff1a"),(0,p.kt)("pre",null,(0,p.kt)("code",{parentName:"pre",className:"language-rust"},"use anchor_lang::prelude::*;\nuse puppet::cpi::accounts::SetData;\nuse puppet::program::Puppet;\nuse puppet::{self, Data};\n\ndeclare_id!(\"HmbTLCmaGvZhKnn1Zfa1JVnp7vkMV4DYVxPLWBVoN65L\");\n\n#[program]\nmod puppet_master {\n    use super::*;\n    pub fn pull_strings(ctx: Context<PullStrings>, data: u64) -> Result<()> {\n        puppet::cpi::set_data(ctx.accounts.set_data_ctx(), data)\n    }\n}\n\n#[derive(Accounts)]\npub struct PullStrings<'info> {\n    #[account(mut)]\n    pub puppet: Account<'info, Data>,\n    pub puppet_program: Program<'info, Puppet>,\n}\n\nimpl<'info> PullStrings<'info> {\n    pub fn set_data_ctx(&self) -> CpiContext<'_, '_, '_, 'info, SetData<'info>> {\n        let cpi_program = self.puppet_program.to_account_info();\n        let cpi_accounts = SetData {\n            puppet: self.puppet.to_account_info()\n        };\n        CpiContext::new(cpi_program, cpi_accounts)\n    }\n}\n")))}i.isMDXComponent=!0}}]);