"use strict";(self.webpackChunkweb_3_blog=self.webpackChunkweb_3_blog||[]).push([[1462],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>_});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function c(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=r.createContext({}),s=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):c(c({},t),e)),n},u=function(e){var t=s(e.components);return r.createElement(l.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,l=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),m=s(n),_=o,f=m["".concat(l,".").concat(_)]||m[_]||p[_]||a;return n?r.createElement(f,c(c({ref:t},u),{},{components:n})):r.createElement(f,c({ref:t},u))}));function _(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,c=new Array(a);c[0]=m;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i.mdxType="string"==typeof e?e:o,c[1]=i;for(var s=2;s<a;s++)c[s]=n[s];return r.createElement.apply(null,c)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},5630:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>c,default:()=>p,frontMatter:()=>a,metadata:()=>i,toc:()=>s});var r=n(7462),o=(n(7294),n(3905));const a={},c="\u9a8c\u8bc1acconts",i={unversionedId:"rust_contract/solana/solana_\u5408\u7ea6\u5f00\u53d1\u5e93/verify_accounts",id:"rust_contract/solana/solana_\u5408\u7ea6\u5f00\u53d1\u5e93/verify_accounts",title:"\u9a8c\u8bc1acconts",description:"\u7531\u4e8e Solana \u4e2d\u7684\u7a0b\u5e8f\u662f\u65e0\u72b6\u6001\u7684\uff0c\u56e0\u6b64\u4f5c\u4e3a\u7a0b\u5e8f\u521b\u5efa\u8005\uff0c\u6211\u4eec\u5fc5\u987b\u786e\u4fdd\u901a\u8fc7\u7684\u5e10\u6237\u5c3d\u53ef\u80fd\u7ecf\u8fc7\u9a8c\u8bc1\uff0c\u4ee5\u907f\u514d\u4efb\u4f55\u6076\u610f\u5e10\u6237\u8fdb\u5165\u3002\u53ef\u4ee5\u505a\u7684\u57fa\u672c\u68c0\u67e5\u662f",source:"@site/docs\\rust_contract\\solana\\02_solana_\u5408\u7ea6\u5f00\u53d1\u5e93\\verify_accounts.md",sourceDirName:"rust_contract/solana/02_solana_\u5408\u7ea6\u5f00\u53d1\u5e93",slug:"/rust_contract/solana/solana_\u5408\u7ea6\u5f00\u53d1\u5e93/verify_accounts",permalink:"/docs/rust_contract/solana/solana_\u5408\u7ea6\u5f00\u53d1\u5e93/verify_accounts",draft:!1,tags:[],version:"current",frontMatter:{}},l={},s=[],u={toc:s};function p(e){let{components:t,...n}=e;return(0,o.kt)("wrapper",(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"\u9a8c\u8bc1acconts"},"\u9a8c\u8bc1acconts"),(0,o.kt)("p",null,"\u7531\u4e8e Solana \u4e2d\u7684\u7a0b\u5e8f\u662f\u65e0\u72b6\u6001\u7684\uff0c\u56e0\u6b64\u4f5c\u4e3a\u7a0b\u5e8f\u521b\u5efa\u8005\uff0c\u6211\u4eec\u5fc5\u987b\u786e\u4fdd\u901a\u8fc7\u7684\u5e10\u6237\u5c3d\u53ef\u80fd\u7ecf\u8fc7\u9a8c\u8bc1\uff0c\u4ee5\u907f\u514d\u4efb\u4f55\u6076\u610f\u5e10\u6237\u8fdb\u5165\u3002\u53ef\u4ee5\u505a\u7684\u57fa\u672c\u68c0\u67e5\u662f"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"\u68c0\u67e5\u9884\u671f\u7684\u7b7e\u540d\u8005\u5e10\u6237\u662f\u5426\u5df2\u5b9e\u9645\u7b7e\u540d"),(0,o.kt)("li",{parentName:"ol"},"\u68c0\u67e5\u9884\u671f\u7684\u72b6\u6001\u5e10\u6237\u662f\u5426\u5df2\u88ab\u68c0\u67e5\u4e3a\u53ef\u5199"),(0,o.kt)("li",{parentName:"ol"},"\u68c0\u67e5\u9884\u671f\u72b6\u6001\u5e10\u6237\u7684\u6240\u6709\u8005\u662f\u5426\u662f\u88ab\u8c03\u7528\u7684\u7a0b\u5e8f id"),(0,o.kt)("li",{parentName:"ol"},"\u5982\u679c\u662f\u7b2c\u4e00\u6b21\u521d\u59cb\u5316\u72b6\u6001\uff0c\u8bf7\u68c0\u67e5\u8d26\u6237\u662f\u5426\u5df2\u7ecf\u521d\u59cb\u5316\u3002"),(0,o.kt)("li",{parentName:"ol"},"\u68c0\u67e5\u662f\u5426\u6709\u4efb\u4f55\u901a\u8fc7\u7684\u8de8\u7a0b\u5e8f ID\uff08\u5728\u9700\u8981\u65f6\uff09\u7b26\u5408\u9884\u671f\u3002")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-rust"},'use borsh::{BorshDeserialize, BorshSerialize};\nuse solana_program::{\n    account_info::{next_account_info, AccountInfo},\n    clock::Clock,\n    entrypoint,\n    entrypoint::ProgramResult,\n    msg,\n    program_error::ProgramError,\n    pubkey::Pubkey,\n    rent::Rent,\n    system_program::ID as SYSTEM_PROGRAM_ID,\n    sysvar::Sysvar,\n};\n\nentrypoint!(process_instruction);\n\n#[derive(BorshSerialize, BorshDeserialize, Debug)]\npub struct HelloState {\n    is_initialized: bool,\n}\n\n// Accounts required\n/// 1. [signer] Payer\n/// 2. [writable] Hello state account\n/// 3. [] System Program\npub fn process_instruction(\n    program_id: &Pubkey,\n    accounts: &[AccountInfo],\n    _instruction_data: &[u8],\n) -> ProgramResult {\n    let accounts_iter = &mut accounts.iter();\n    // Payer account\n    let payer_account = next_account_info(accounts_iter)?;\n    // Hello state account\n    let hello_state_account = next_account_info(accounts_iter)?;\n    // System Program\n    let system_program = next_account_info(accounts_iter)?;\n\n    let rent = Rent::get()?;\n    \n    // checking if payer account is the signer\n    if !pay_account.is_signer{\n        return Err(Program::MissingRequiredSignature);\n    }\n    \n    //checking if hello state account is rent exempt\n    if !rent.is-exempt(hello_state_account.lamports(), 1){\n        return Err(Program::AccountNotRentExempt);\n    }\n    // Checking if hello state account is writable\n    if !hello_state_account.is_writable {\n        return Err(ProgramError::InvalidAccountData);\n    }\n\n    // Checking if hello state account\'s owner is the current program\n    if hello_state_account.owner.ne(&program_id) {\n        return Err(ProgramError::IllegalOwner);\n    }\n\n    // Checking if the system program is valid\n    if system_program.key.ne(&SYSTEM_PROGRAM_ID) {\n        return Err(ProgramError::IncorrectProgramId);\n    }\n\n    let mut hello_state = HelloState::try_from_slice(&hello_state_account.data.borrow())?;\n\n    // Checking if the state has already been initialized\n    if hello_state.is_initialized {\n        return Err(ProgramError::AccountAlreadyInitialized);\n    }\n\n    hello_state.is_initialized = true;\n    hello_state.serialize(&mut &mut hello_state_account.data.borrow_mut()[..])?;\n    msg!("Account initialized :)");\n\n    Ok(())  \n    \n}\n')))}p.isMDXComponent=!0}}]);