"use strict";(self.webpackChunkweb_3_blog=self.webpackChunkweb_3_blog||[]).push([[205],{3905:(n,t,e)=>{e.d(t,{Zo:()=>s,kt:()=>d});var r=e(7294);function a(n,t,e){return t in n?Object.defineProperty(n,t,{value:e,enumerable:!0,configurable:!0,writable:!0}):n[t]=e,n}function o(n,t){var e=Object.keys(n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(n);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(n,t).enumerable}))),e.push.apply(e,r)}return e}function c(n){for(var t=1;t<arguments.length;t++){var e=null!=arguments[t]?arguments[t]:{};t%2?o(Object(e),!0).forEach((function(t){a(n,t,e[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(n,Object.getOwnPropertyDescriptors(e)):o(Object(e)).forEach((function(t){Object.defineProperty(n,t,Object.getOwnPropertyDescriptor(e,t))}))}return n}function i(n,t){if(null==n)return{};var e,r,a=function(n,t){if(null==n)return{};var e,r,a={},o=Object.keys(n);for(r=0;r<o.length;r++)e=o[r],t.indexOf(e)>=0||(a[e]=n[e]);return a}(n,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(n);for(r=0;r<o.length;r++)e=o[r],t.indexOf(e)>=0||Object.prototype.propertyIsEnumerable.call(n,e)&&(a[e]=n[e])}return a}var l=r.createContext({}),u=function(n){var t=r.useContext(l),e=t;return n&&(e="function"==typeof n?n(t):c(c({},t),n)),e},s=function(n){var t=u(n.components);return r.createElement(l.Provider,{value:t},n.children)},p={inlineCode:"code",wrapper:function(n){var t=n.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(n,t){var e=n.components,a=n.mdxType,o=n.originalType,l=n.parentName,s=i(n,["components","mdxType","originalType","parentName"]),m=u(e),d=a,_=m["".concat(l,".").concat(d)]||m[d]||p[d]||o;return e?r.createElement(_,c(c({ref:t},s),{},{components:e})):r.createElement(_,c({ref:t},s))}));function d(n,t){var e=arguments,a=t&&t.mdxType;if("string"==typeof n||a){var o=e.length,c=new Array(o);c[0]=m;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=n,i.mdxType="string"==typeof n?n:a,c[1]=i;for(var u=2;u<o;u++)c[u]=e[u];return r.createElement.apply(null,c)}return r.createElement.apply(null,e)}m.displayName="MDXCreateElement"},7803:(n,t,e)=>{e.r(t),e.d(t,{assets:()=>l,contentTitle:()=>c,default:()=>p,frontMatter:()=>o,metadata:()=>i,toc:()=>u});var r=e(7462),a=(e(7294),e(3905));const o={},c="\u5e8f\u5217\u5316\u6570\u636e",i={unversionedId:"rust_contract/solana/solana_\u5408\u7ea6\u5f00\u53d1\u5e93/\u5e8f\u5217\u5316\u6570\u636e",id:"rust_contract/solana/solana_\u5408\u7ea6\u5f00\u53d1\u5e93/\u5e8f\u5217\u5316\u6570\u636e",title:"\u5e8f\u5217\u5316\u6570\u636e",description:"\u5e8f\u5217\u5316\u5728 Solana \u7a0b\u5e8f\u548c\u7a0b\u5e8f\u751f\u547d\u5468\u671f\u4e2d\u7684\u51e0\u4e2a\u70b9\u5e10\u6237\u7684\u4f5c\u7528\uff1a",source:"@site/docs\\rust_contract\\solana\\02_solana_\u5408\u7ea6\u5f00\u53d1\u5e93\\\u5e8f\u5217\u5316\u6570\u636e.md",sourceDirName:"rust_contract/solana/02_solana_\u5408\u7ea6\u5f00\u53d1\u5e93",slug:"/rust_contract/solana/solana_\u5408\u7ea6\u5f00\u53d1\u5e93/\u5e8f\u5217\u5316\u6570\u636e",permalink:"/docs/rust_contract/solana/solana_\u5408\u7ea6\u5f00\u53d1\u5e93/\u5e8f\u5217\u5316\u6570\u636e",draft:!1,tags:[],version:"current",frontMatter:{}},l={},u=[{value:"\u8bbe\u7f6e borsh",id:"\u8bbe\u7f6e-borsh",level:2},{value:"\u5ba2\u6237\u7aef\u5e8f\u5217\u5316\u6307\u4ee4\u6570\u636e",id:"\u5ba2\u6237\u7aef\u5e8f\u5217\u5316\u6307\u4ee4\u6570\u636e",level:2},{value:"\u94fe\u4e0a\u53cd\u5e8f\u5217\u5316\u6307\u4ee4\u6570\u636e",id:"\u94fe\u4e0a\u53cd\u5e8f\u5217\u5316\u6307\u4ee4\u6570\u636e",level:2},{value:"\u5e8f\u5217\u5316\u8d26\u6237\u6570\u636e",id:"\u5e8f\u5217\u5316\u8d26\u6237\u6570\u636e",level:2},{value:"\u4f7f\u7528\u65b9\u6cd5",id:"\u4f7f\u7528\u65b9\u6cd5",level:3}],s={toc:u};function p(n){let{components:t,...e}=n;return(0,a.kt)("wrapper",(0,r.Z)({},s,e,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"\u5e8f\u5217\u5316\u6570\u636e"},"\u5e8f\u5217\u5316\u6570\u636e"),(0,a.kt)("p",null,"\u5e8f\u5217\u5316\u5728 Solana \u7a0b\u5e8f\u548c\u7a0b\u5e8f\u751f\u547d\u5468\u671f\u4e2d\u7684\u51e0\u4e2a\u70b9\u5e10\u6237\u7684\u4f5c\u7528\uff1a"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"\u5c06\u6307\u4ee4\u6570\u636e\u5e8f\u5217\u5316\u5230\u5ba2\u6237\u7aef"),(0,a.kt)("li",{parentName:"ol"},"\u53cd\u5e8f\u5217\u5316\u7a0b\u5e8f\u4e0a\u7684\u6307\u4ee4\u6570\u636e"),(0,a.kt)("li",{parentName:"ol"},"\u5e8f\u5217\u5316\u7a0b\u5e8f\u4e0a\u7684\u8d26\u6237\u6570\u636e"),(0,a.kt)("li",{parentName:"ol"},"\u53cd\u5e8f\u5217\u5316\u5ba2\u6237\u7aef\u4e0a\u7684\u8d26\u6237\u6570\u636e")),(0,a.kt)("h2",{id:"\u8bbe\u7f6e-borsh"},"\u8bbe\u7f6e borsh"),(0,a.kt)("p",null,"program"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-toml"},'[package]\nname = "solana-cli-template-program-bpf"\nversion = "0.1.0"\nedition = "2018"\nlicense = "WTFPL"\n\n# See more keys and their definitions at https://doc.rust-lang.org/cargo/reference/manifest.html\n\n[features]\nno-entrypoint = []\n\n[dependencies]\nborsh = "0.9.0"\nlazy_static = "1.4.0"\nnum-derive = "0.3"\nnum_enum = "0.5.1"\nnum-integer = "0.1.44"\nnum-traits = "0.2"\nsol-template-shared = {path = "../shared"}\nsolana-program = "1.8.2"\nthiserror = "1.0"\n\n[dev-dependencies]\nsolana-program-test = "1.8.2"\nsolana-sdk = "1.8.2"\n\n[lib]\ncrate-type = ["cdylib", "lib"]\n')),(0,a.kt)("h2",{id:"\u5ba2\u6237\u7aef\u5e8f\u5217\u5316\u6307\u4ee4\u6570\u636e"},"\u5ba2\u6237\u7aef\u5e8f\u5217\u5316\u6307\u4ee4\u6570\u636e"),(0,a.kt)("p",null,"\u5c06tx\u5e8f\u5217\u5316\u53d1\u9001\u5230\u94fe\u4e0a\u5904\u7406"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rust"},'/// instruction payload gets serialized\n#[derive(BorshSerialize)]\npub struct Payload<\'a> {\n    variant: u8,\n    key: &\'a str,\n    value: &\'a str,\n}\n\n/// \u6267\u884c\u4e00\u4e2a mint tx\npub fn mint_transaction(\n    rpc_client: &RpcClient,\n    amounts: &[AccountMeta],\n    wallet_signer: &dyn Signer,\n    mint_key: &str,\n    mint_value: &str,\n    mint_instruction_id: &u8,\n    comment_config: CommitmentConfig,\n)-> Result<Signature, Box<dyn std::error::Error>>{\n    let data = Payload<\'_> {\n        variant: mint_instruction_id,\n        key: mint_key,\n        value: mint_value,\n    };\n    \n    let instruction = Instruction::new_with_borsh(PROG_KEY.pubkey(), &data, accounts.to_vec());\n    submit_transaction(rpc_client, wallet_signer, instruction, commitment_config)\n}\n\npub fn submit_transaction(\n    rpc_client: &RpcClient,\n    wallet_signer: &dyn Signer,\n    instruction: Instruction,\n    commitment_config: CommitmentConfig,\n) -> Result<Signature, Box<dyn std::error::Error>>{\n    let mut transaction =\n        Transaction::new_unsigned(Message::new(&[instruction], Some(&wallet_signer.pubkey())));\n    let (recent_blockhash, _fee_calculator) = rpc_client\n        .get_recent_blockhash()\n        .map_err(|err| format!("error: unable to get recent blockhash: {}", err))?;\n    transaction\n        .try_sign(&vec![wallet_signer], recent_blockhash)\n        .map_err(|err| format!("error: failed to sign transaction: {}", err))?;\n    let signature = rpc_client\n        .send_and_confirm_transaction_with_spinner_and_commitment(&transaction, commitment_config)\n        .map_err(|err| format!("error: send transaction: {}", err))?;\n    Ok(signature)\n}\n')),(0,a.kt)("h2",{id:"\u94fe\u4e0a\u53cd\u5e8f\u5217\u5316\u6307\u4ee4\u6570\u636e"},"\u94fe\u4e0a\u53cd\u5e8f\u5217\u5316\u6307\u4ee4\u6570\u636e"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rust"},"//! instruction Contains the main ProgramInstruction enum\nuse { \n    crate::error::SampleError, \n    borsh::BorshDeserialize,\n    solana_program::program_error::ProgramError,\n}\n\n/// All custom program instructions\n#[derive(Debug, PartialEq)]\npub enum ProgramInstruction {\n    InitializedAccount,\n    MintToAccount{ key: String, value: String},\n    TransferBetweenAccounts {key: String},\n    BurnFromAccount { key: String},\n    TransferBetweenAccountWithFee {key: String},\n    BurnFromAccountWithFee {key: String},\n}\n\n/// \u751f\u6210 payload \u53d1\u5e8f\u5217\u5316\n#[derive(BorshDeserialize, Debug)]\nstruct PayLoad {\n    variant: u8,\n    arg1: String,\n    arg2: String.\n}\n\nimpl ProgramInstruction {\n    /// \u89e3\u5305\u5165\u7ad9\u7684\u6570\u636e\n    pub fn unpack(input: &[u8]) -> Result<Self, ProgramError>{\n        let payload = Payload::try_from_slice(input).unwrap();\n        match payload.variant {\n            0 => Ok(ProgramInstruction::InitializedAccount),\n            1 => Ok(Self::MintToAccount{key: payload.arg1, value: payload.arg2,}),\n               2 => Ok(Self::TransferBetweenAccounts { key: payload.arg1 }),\n            3 => Ok(Self::BurnFromAccount { key: payload.arg1 }),\n            4 => Ok(Self::MintToAccountWithFee {\n                key: payload.arg1,\n                value: payload.arg2,\n            }),\n            5 => Ok(Self::TransferBetweenAccountsWithFee { key: payload.arg1 }),\n            6 => Ok(Self::BurnFromAccountWithFee { key: payload.arg1 }),\n            _ => Err(SampleError::DeserializationFailure.into()),\n        }\n    }\n}\n")),(0,a.kt)("h2",{id:"\u5e8f\u5217\u5316\u8d26\u6237\u6570\u636e"},"\u5e8f\u5217\u5316\u8d26\u6237\u6570\u636e"),(0,a.kt)("p",null,"Pack trait \u53ef\u4ee5\u66f4\u8f7b\u677e\u5730\u4ece\u6838\u5fc3\u7a0b\u5e8f\u6307\u4ee4\u5904\u7406\u4e2d\u9690\u85cf\u5e10\u6237\u6570\u636e\u5e8f\u5217\u5316/\u53cd\u5e8f\u5217\u5316\u7684\u8be6\u7ec6\u4fe1\u606f\u3002"),(0,a.kt)("p",null,"\u6240\u4ee5\u4e0d\u662f\u628a\u6240\u6709\u7684\u5e8f\u5217\u5316/\u53cd\u5e8f\u5217\u5316\u65e5\u5fd7\u90fd\u653e\u5728\u7a0b\u5e8f\u5904\u7406\u4ee3\u7801\u4e2d\uff0c\u800c\u662f\u5c01\u88c5\u4e863\u4e2a\u51fd\u6570\u80cc\u540e\u7684\u7ec6\u8282\uff1a"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("inlineCode",{parentName:"li"},"unpack_unchecked"),"- \u5141\u8bb8\u60a8\u5728\u4e0d\u68c0\u67e5\u5e10\u6237\u662f\u5426\u5df2\u521d\u59cb\u5316\u7684\u60c5\u51b5\u4e0b\u53cd\u5e8f\u5217\u5316\u5e10\u6237\u3002\u8fd9\u5728\u60a8\u5b9e\u9645\u5904\u7406\u521d\u59cb\u5316\u51fd\u6570\uff08\u53d8\u4f53\u7d22\u5f15 0\uff09\u65f6\u5f88\u6709\u7528"),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("inlineCode",{parentName:"li"},"unpack"),"- \u8c03\u7528\u60a8\u7684 Pack \u5b9e\u73b0",(0,a.kt)("inlineCode",{parentName:"li"},"unpack_from_slice"),"\u5e76\u68c0\u67e5\u5e10\u6237\u662f\u5426\u5df2\u521d\u59cb\u5316\u3002"),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("inlineCode",{parentName:"li"},"pack"),"- \u8c03\u7528\u4f60\u7684\u5305\u5b9e\u73b0",(0,a.kt)("inlineCode",{parentName:"li"},"pack_into_slice"))),(0,a.kt)("h3",{id:"\u4f7f\u7528\u65b9\u6cd5"},"\u4f7f\u7528\u65b9\u6cd5"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rust"},'/// \u521d\u59cb\u5316\u4e00\u4e2a\u7a0b\u5e8f\u8d26\u53f7\nfn initialize_account(accounts: &[AccountInfo])-> ProgramResult {\n    msg!("Initialize account");\n    let account_info_iter = &mut accounts.iter();\n    \n    let program_account = next_account_info(account_info_iter)?;\n    \n    let mut account_data = program_account.data.borrow_mut();\n    // \u8fd9\u91cc\u6211\u4eec\u4f7f\u7528 unpack_unchecked \u56e0\u4e3a\u6211\u4eec\u8fd8\u6ca1\u6709\u521d\u59cb\u5316 \n    // \u5982\u679c\u6211\u4eec\u5c1d\u8bd5\u4f7f\u7528 unpack\uff0c\u5b83\u4f1a\u5931\u8d25\n    let mut account_state = ProgramAccountState::unpack_unchecked(&account_data)?;\n    // \u6211\u4eec\u4ed4\u7ec6\u68c0\u67e5\u6211\u4eec\u8fd8\u6ca1\u6709\u521d\u59cb\u5316\u8fd9\u4e2a\u5e10\u6237\u6570\u636e\n    // \u6211\u4eec\u8bbe\u7f6e\u521d\u59cb\u5316\u6807\u5fd7\n    if account_state.is_initialized() {\n        return Err(SampleError::AlreadyInitializedState.into());\n    }else {\n        account_state.set_initialized();\n    }\n    \n    // \u6700\u540e\uff0c\u5b58\u50a8\u4f1a \u8d26\u53f7\u7a7a\u95f4\n    ProgramAccountState::pack(account_state, &mut account_data).unwrap();\n    Ok(())\n}\n')),(0,a.kt)("p",null,"\u73b0\u5728\u6211\u4eec\u53ef\u4ee5\u5bf9\u6211\u4eec\u7684\u5176\u4ed6\u6307\u4ee4\u8fdb\u884c\u64cd\u4f5c,\u6f14\u793a\u521b\u5efamap"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rust"},'/// mint a key/pair\nfn mint_keypair_to_account(accounts: &[AccountInfo], key: String, value: String) ->  ProgramResult{\n    msg!("mint to acocunt");\n    let account_info_iter = &mut accounts.iter();\n    let program_account = next_account_info(account_info_iter)?;\n    let mut account_date = program_account.data.borrow_mut();\n    // unpacking\n    let mut account_state = ProgramAccountState::unpack(&account_date)?;\n    // \u5c06\u952e\u503c\u5bf9\u6dfb\u52a0\u5230\u5e95\u5c42 BTreeMap\n    account_state.add(key, value)?;\n    // \u5b58\u56de\u53bb\n    ProgramAccountState::pack(account_state, &mut account_data)?;\n    Ok(())\n}\n')))}p.isMDXComponent=!0}}]);