"use strict";(self.webpackChunkweb_3_blog=self.webpackChunkweb_3_blog||[]).push([[8226],{3905:(e,t,n)=>{n.d(t,{Zo:()=>l,kt:()=>y});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var d=r.createContext({}),s=function(e){var t=r.useContext(d),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},l=function(e){var t=s(e.components);return r.createElement(d.Provider,{value:t},e.children)},b={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},p=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,d=e.parentName,l=c(e,["components","mdxType","originalType","parentName"]),p=s(n),y=o,m=p["".concat(d,".").concat(y)]||p[y]||b[y]||a;return n?r.createElement(m,i(i({ref:t},l),{},{components:n})):r.createElement(m,i({ref:t},l))}));function y(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,i=new Array(a);i[0]=p;var c={};for(var d in t)hasOwnProperty.call(t,d)&&(c[d]=t[d]);c.originalType=e,c.mdxType="string"==typeof e?e:o,i[1]=c;for(var s=2;s<a;s++)i[s]=n[s];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}p.displayName="MDXCreateElement"},8055:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>i,default:()=>b,frontMatter:()=>a,metadata:()=>c,toc:()=>s});var r=n(7462),o=(n(7294),n(3905));const a={},i="\u6700\u5c0f\u5316\u7684\u4ee3\u7406\u5408\u7ea6",c={unversionedId:"solidity/solidity_contracts/application/minimal_proxy_contract",id:"solidity/solidity_contracts/application/minimal_proxy_contract",title:"\u6700\u5c0f\u5316\u7684\u4ee3\u7406\u5408\u7ea6",description:"\u5982\u679c\u6709\u4e00\u4e2a\u5408\u7ea6\u4f1a\u591a\u6b21\u90e8\u7f72\uff0c\u4f7f\u7528\u6700\u5c0f\u4ee3\u7406\u5408\u4e8e\u6700\u7701\u94b1\u3002",source:"@site/docs/solidity/solidity_contracts/application/minimal_proxy_contract.md",sourceDirName:"solidity/solidity_contracts/application",slug:"/solidity/solidity_contracts/application/minimal_proxy_contract",permalink:"/docs/solidity/solidity_contracts/application/minimal_proxy_contract",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"solidity",previous:{title:"\u9884\u5148\u8ba1\u7b97\u5408\u7ea6\u5730\u5740",permalink:"/docs/solidity/solidity_contracts/application/precompute_contract_address"},next:{title:"\u53ef\u5347\u7ea7\u5408\u7ea6",permalink:"/docs/solidity/solidity_contracts/application/upgradeable_contract"}},d={},s=[],l={toc:s};function b(e){let{components:t,...n}=e;return(0,o.kt)("wrapper",(0,r.Z)({},l,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"\u6700\u5c0f\u5316\u7684\u4ee3\u7406\u5408\u7ea6"},"\u6700\u5c0f\u5316\u7684\u4ee3\u7406\u5408\u7ea6"),(0,o.kt)("p",null,"\u5982\u679c\u6709\u4e00\u4e2a\u5408\u7ea6\u4f1a\u591a\u6b21\u90e8\u7f72\uff0c\u4f7f\u7528\u6700\u5c0f\u4ee3\u7406\u5408\u4e8e\u6700\u7701\u94b1\u3002"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-solidity"},'// SPDX-License-Identifier: MIT\npragma solidity ^0.8.13;\n\n// original code\n// https://github.com/optionality/clone-factory/blob/master/contracts/CloneFactory.sol\n\ncontract MinimalProxy {\n    function clone(address target) external returns (address result) {\n        // convert address to 20 bytes\n        bytes20 targetBytes = bytes20(target);\n\n        // actual code //\n        // 3d602d80600a3d3981f3363d3d373d3d3d363d73bebebebebebebebebebebebebebebebebebebebe5af43d82803e903d91602b57fd5bf3\n\n        // creation code //\n        // copy runtime code into memory and return it\n        // 3d602d80600a3d3981f3\n\n        // runtime code //\n        // code to delegatecall to address\n        // 363d3d373d3d3d363d73 address 5af43d82803e903d91602b57fd5bf3\n\n        assembly {\n            /*\n            reads the 32 bytes of memory starting at pointer stored in 0x40\n\n            In solidity, the 0x40 slot in memory is special: it contains the "free memory pointer"\n            which points to the end of the currently allocated memory.\n            */\n            let clone := mload(0x40)\n            // store 32 bytes to memory starting at "clone"\n            mstore(\n                clone,\n                0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000\n            )\n\n            /*\n              |              20 bytes                |\n            0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000\n                                                      ^\n                                                      pointer\n            */\n            // store 32 bytes to memory starting at "clone" + 20 bytes\n            // 0x14 = 20\n            mstore(add(clone, 0x14), targetBytes)\n\n            /*\n              |               20 bytes               |                 20 bytes              |\n            0x3d602d80600a3d3981f3363d3d373d3d3d363d73bebebebebebebebebebebebebebebebebebebebe\n                                                                                              ^\n                                                                                              pointer\n            */\n            // store 32 bytes to memory starting at "clone" + 40 bytes\n            // 0x28 = 40\n            mstore(\n                add(clone, 0x28),\n                0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000\n            )\n\n            /*\n              |               20 bytes               |                 20 bytes              |           15 bytes          |\n            0x3d602d80600a3d3981f3363d3d373d3d3d363d73bebebebebebebebebebebebebebebebebebebebe5af43d82803e903d91602b57fd5bf3\n            */\n            // create new contract\n            // send 0 Ether\n            // code starts at pointer stored in "clone"\n            // code size 0x37 (55 bytes)\n            result := create(0, clone, 0x37)\n        }\n    }\n}\n')))}b.isMDXComponent=!0}}]);