"use strict";(self.webpackChunkweb_3_blog=self.webpackChunkweb_3_blog||[]).push([[271],{3905:(n,e,t)=>{t.d(e,{Zo:()=>c,kt:()=>f});var r=t(7294);function a(n,e,t){return e in n?Object.defineProperty(n,e,{value:t,enumerable:!0,configurable:!0,writable:!0}):n[e]=t,n}function l(n,e){var t=Object.keys(n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(n);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable}))),t.push.apply(t,r)}return t}function o(n){for(var e=1;e<arguments.length;e++){var t=null!=arguments[e]?arguments[e]:{};e%2?l(Object(t),!0).forEach((function(e){a(n,e,t[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(n,Object.getOwnPropertyDescriptors(t)):l(Object(t)).forEach((function(e){Object.defineProperty(n,e,Object.getOwnPropertyDescriptor(t,e))}))}return n}function i(n,e){if(null==n)return{};var t,r,a=function(n,e){if(null==n)return{};var t,r,a={},l=Object.keys(n);for(r=0;r<l.length;r++)t=l[r],e.indexOf(t)>=0||(a[t]=n[t]);return a}(n,e);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(n);for(r=0;r<l.length;r++)t=l[r],e.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(n,t)&&(a[t]=n[t])}return a}var u=r.createContext({}),p=function(n){var e=r.useContext(u),t=e;return n&&(t="function"==typeof n?n(e):o(o({},e),n)),t},c=function(n){var e=p(n.components);return r.createElement(u.Provider,{value:e},n.children)},m={inlineCode:"code",wrapper:function(n){var e=n.children;return r.createElement(r.Fragment,{},e)}},s=r.forwardRef((function(n,e){var t=n.components,a=n.mdxType,l=n.originalType,u=n.parentName,c=i(n,["components","mdxType","originalType","parentName"]),s=p(t),f=a,d=s["".concat(u,".").concat(f)]||s[f]||m[f]||l;return t?r.createElement(d,o(o({ref:e},c),{},{components:t})):r.createElement(d,o({ref:e},c))}));function f(n,e){var t=arguments,a=e&&e.mdxType;if("string"==typeof n||a){var l=t.length,o=new Array(l);o[0]=s;var i={};for(var u in e)hasOwnProperty.call(e,u)&&(i[u]=e[u]);i.originalType=n,i.mdxType="string"==typeof n?n:a,o[1]=i;for(var p=2;p<l;p++)o[p]=t[p];return r.createElement.apply(null,o)}return r.createElement.apply(null,t)}s.displayName="MDXCreateElement"},311:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>u,contentTitle:()=>o,default:()=>m,frontMatter:()=>l,metadata:()=>i,toc:()=>p});var r=t(7462),a=(t(7294),t(3905));const l={},o="\u6a21\u5f0f\u5339\u914d match",i={unversionedId:"rust/rust\u57fa\u7840\u77e5\u8bc6/\u6a21\u5f0f\u5339\u914d",id:"rust/rust\u57fa\u7840\u77e5\u8bc6/\u6a21\u5f0f\u5339\u914d",title:"\u6a21\u5f0f\u5339\u914d match",description:"- \u89e3\u6784",source:"@site/docs\\rust\\rust\u57fa\u7840\u77e5\u8bc6\\\u6a21\u5f0f\u5339\u914d.md",sourceDirName:"rust/rust\u57fa\u7840\u77e5\u8bc6",slug:"/rust/rust\u57fa\u7840\u77e5\u8bc6/\u6a21\u5f0f\u5339\u914d",permalink:"/docs/rust/rust\u57fa\u7840\u77e5\u8bc6/\u6a21\u5f0f\u5339\u914d",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"rust",previous:{title:"\u6d41\u7a0b\u63a7\u5236",permalink:"/docs/rust/rust\u57fa\u7840\u77e5\u8bc6/\u6d41\u7a0b\u63a7\u5236"},next:{title:"\u51fd\u6570",permalink:"/docs/rust/rust\u57fa\u7840\u77e5\u8bc6/\u51fd\u6570"}},u={},p=[{value:"\u89e3\u6784\u5143\u7ec4",id:"\u89e3\u6784\u5143\u7ec4",level:3},{value:"\u89e3\u6784\u679a\u4e3e",id:"\u89e3\u6784\u679a\u4e3e",level:3},{value:"\u89e3\u6784\u7ed3\u6784\u4f53",id:"\u89e3\u6784\u7ed3\u6784\u4f53",level:3},{value:"\u89e3\u6784 \u6307\u9488\u6216\u5f15\u7528",id:"\u89e3\u6784-\u6307\u9488\u6216\u5f15\u7528",level:3},{value:"guaid\u8bed\u53e5",id:"guaid\u8bed\u53e5",level:3},{value:"@\u7ed1\u5b9a",id:"\u7ed1\u5b9a",level:3},{value:"if let",id:"if-let",level:3},{value:"while let",id:"while-let",level:3}],c={toc:p};function m(n){let{components:e,...t}=n;return(0,a.kt)("wrapper",(0,r.Z)({},c,t,{components:e,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"\u6a21\u5f0f\u5339\u914d-match"},"\u6a21\u5f0f\u5339\u914d match"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"\u89e3\u6784"),(0,a.kt)("li",{parentName:"ul"},"\u536b\u8bed\u53e5"),(0,a.kt)("li",{parentName:"ul"},"\u7ed1\u5b9a @")),(0,a.kt)("h3",{id:"\u89e3\u6784\u5143\u7ec4"},"\u89e3\u6784\u5143\u7ec4"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rust"},'// - \u89e3\u6784\u5143\u7ec4\nfn main() {\n    let triple = (0, -2, 3);\n    \n    // match \u53ef\u4ee5\u7ed3\u6784\u4e00\u4e2a\u5143\u7ec4\n    match triple {\n        (0, y, z) => println!("First is 0, y is{:?}, z is {:?}",y,z),\n        (1, ..) =>  println!("First is `1` and the rest doesn\'t matter"),\n         _      => println!("It doesn\'t matter what they are"),\n    }\n}\n')),(0,a.kt)("h3",{id:"\u89e3\u6784\u679a\u4e3e"},"\u89e3\u6784\u679a\u4e3e"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rust"},'\n// - \u89e3\u6784\u679a\u4e3e\n#[allow(dead_code)]\nenum Color {\n    // \u8fd9\u4e09\u4e2a\u53d6\u503c\u7531\u4ed6\u4eec\u7684\u540d\u5b57\u6307\u5b9a\uff0c\u4e0d\u662f\u7c7b\u578b\n    Red,\n    Blue,\n    Green,\n    // \u5c06u32\u5143\u7ec4\u8d4b\u4e88\u4e0d\u540c\u7684\u540d\u5b57\n    RGB(u32,u32,u32),\n    HSV(u32,u32,u32),\n}\nfn main() {\n    // \u5c06\u4e0d\u540c\u7684\u503c\u8d4b\u4e88color\n    let color = Color::RGB(122,12,10);\n    // \u4f7f\u7528match \u89e3\u6784 enum\n    match color {\n        Color::Red => println!("The color is Red!"),\n        Color::Blue => println!("The color is Blue"),\n        Color::RGB(r, g, b) =>\n            println!("Red: {}, green: {}, and blue: {}!", r, g, b),\n        Color::HSV(h, s, v) =>\n            println!("Hue: {}, saturation: {}, value: {}!", h, s, v),\n    }\n}\n')),(0,a.kt)("h3",{id:"\u89e3\u6784\u7ed3\u6784\u4f53"},"\u89e3\u6784\u7ed3\u6784\u4f53"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rust"},'\n// - \u89e3\u6784\u7ed3\u6784\u4f53\nfn main() {\n    struct Foo {x: (u32,u32), y: u32}\n    \n    let foo = Foo{x: (1,2), y:3};\n    // \u89e3\u6784\u7ed3\u6784\u4f53\u6210\u5458\n    let Foor{x: (a,b), y} = foo;\n    println!("a = {}, b = {},  y = {} ", a, b, y);\n    \n    // \u53ef\u4ee5\u89e3\u6784\u7ed3\u6784\u4f53\u5e76\u91cd\u547d\u540d\u53d8\u91cf\uff0c\u6210\u5458\u987a\u5e8f\u5e76\u4e0d\u91cd\u8981\n    let Foo { y: i, x: j } = foo;\n    println!("i = {:?}, j = {:?}", i, j);\n\n    // \u4e5f\u53ef\u4ee5\u5ffd\u7565\u67d0\u4e9b\u53d8\u91cf\n    let Foo { y, .. } = foo;\n    println!("y = {}", y);\n\n    // \u8fd9\u5c06\u5f97\u5230\u4e00\u4e2a\u9519\u8bef\uff1a\u6a21\u5f0f\u4e2d\u6ca1\u6709\u63d0\u53ca `x` \u5b57\u6bb5\n    // let Foo { y } = foo;\n}\n')),(0,a.kt)("h3",{id:"\u89e3\u6784-\u6307\u9488\u6216\u5f15\u7528"},"\u89e3\u6784 \u6307\u9488\u6216\u5f15\u7528"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rust"},'// - \u89e3\u6784   \u6307\u9488\u548c\u5f15\u7528\n//  \u6ce8\u610f\u533a\u5206 \u89e3\u6784 \u548c \u89e3\u5f15\u7528 \u7684\u6982\u5ff5\n//  \u89e3\u5f15\u7528 \u4f7f\u7528 *\n//  \u89e3\u6784 \u4f7f\u7528 &\uff0c ref,  ref mut\nfn main() {\n    // \u83b7\u53d6\u4e00\u4e2a\u5f15\u7528, &\u6807\u8bc6\u53d6\u5f15\u7528\n    let reference = &5;\n    \n    match reference {\n        // val \u8868\u793a reference \u5f15\u7528\u7684\u503c 4\n        &val => println!("got a value {:?}", val),\n    }\n    \n    // \u4e0d\u4f7f\u7528 & \uff0c \u9700\u8981\u5339\u914d\u524d\u89e3\u5f15\u7528\n    match *reference {\n        val => println!("got a value {:?}", val),\n    }\n    \n    // \u5982\u679c\u4e00\u5f00\u59cb\u4e0d\u4f7f\u7528\u5f15\u7528\u7c7b\u578b\n    let _not_a_reference = 3;\n    \n    // rust \u63d0\u4f9b\u4e86ref, \u66f4\u6539\u4e86\u8d4b\u503c\u884c\u4e3a\uff0c\u4ece\u800c\u53ef\u4ee5\u5bf9\u5177\u4f53\u7684\u503c\u521b\u5efa\u5f15\u7528\n    let ref _is_a_reference = 3;\n    \n    // \u76f8\u5e94\u7684\uff0c\u5b9a\u4e49\u4e24\u4e2a\u975e\u5f15\u7528\u7684\u53d8\u91cf\uff0c\u901a\u8fc7 ref , ref mut \u4ecd\u7136\u53ef\u4ee5\u53d6\u5f97\u5f15\u7528\n    let value = 5;\n    let mut mut_value = 6;\n    \n    match value {\n        ref r => println!("Got a reference to a value: {:?}", r),\n    }\n    \n    match mut_value {\n        ref mut m => {\n            *m += 10;\n            println!("{:?}", m);\n        }\n    }\n}\n')),(0,a.kt)("h3",{id:"guaid\u8bed\u53e5"},"guaid\u8bed\u53e5"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rust"},'// - \u536b\u8bed\u53e5 \uff08\u76f8\u5f53\u6761\u4ef6\uff09\nfn main() {\n    let pair = (2, -2);\n    \n    match pair {\n        (x,y) if x==y => println!("These are twins"),\n        (x,y) if x+y ==0 => println!("Antimatter, kaboom!"),\n        // if \u6761\u4ef6\u90e8\u5206\u5c31\u662f\u4e00\u4e2a\u536b\u8bed\u53e5\n        _ => println!("No correlation..."),\n    }\n}\n')),(0,a.kt)("h3",{id:"\u7ed1\u5b9a"},"@\u7ed1\u5b9a"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rust"},'// - match \u7ed1\u5b9a@ \uff1a \u7ed1\u5b9a\u53d8\u91cf\u5230\u540d\u79f0\nfn age() -> u32 {\n    15\n}\nfn main() {\n    match age() {\n        0 =>  println!("I haven\'t celebrated my first birthday yet"),\n        n @ 1..=12 => println!("I\'m a child of age {:?}", n),\n        n @ 13..=19 => println!("I\'m a teen of age {:?}", n),\n        // \u4e0d\u7b26\u5408\u4e0a\u9762\u7684\u8303\u56f4\u3002\u8fd4\u56de\u7ed3\u679c\u3002\n        n             => println!("I\'m an old person of age {:?}", n),\n    }\n}\n// \u7ed1\u5b9a\u4e5f\u53ef\u4ee5\u7528\u5230 enmu \u4e0a\nfn some_number() -> Option<u32> {\n    Some(42)\n}\nfn mian() {\n    match some_number() {\n        Some(n @ 42) =>  println!("The Answer: {}!", n),\n        Some(n) => println!("Not interesting... {}", n),\n        _ => (),\n    }\n}\n')),(0,a.kt)("h3",{id:"if-let"},"if let"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rust"},'// \u6709\u65f6\u5019match \u5339\u914d\u5e76\u4e0d\u4f18\u96c5\nfn main() {\n    let optional = Some(7);\n    match optional {\n        Some(i) => {\n            // \u8fd9\u91cc\u4ece optional \u4e2d\u89e3\u6784\u51fa `i`\u3002\n            println!("This is a really long string and `{:?}`", i)\n        },\n        _ => {},\n    }\n    \n    // \u5bf9\u6bd4\u4e00\u4e0b if let \n    let number = Some(7);\n    // \u5c06number \u89e3\u6784\u6210 Some(i) \u5219\u6267\u884c\u8bed\u53e5\u5757 {}\n    if let Some(i) = number {\n        println!("match {:?}", i);\n    }\n    \n    // \u5982\u679c\u8981\u6307\u51fa\u5931\u8d25\u7684\u60c5\u51b5\uff0c\u52a0\u4e0aelse\u5373\u53ef\n    if let Some(i) = number {\n         println!("match {:?}", i);\n    }else {\n        // \u89e3\u6784\u5931\u8d25\u7684\u65f6\u5019\u5904\u7406\n          println!("Didn\'t match a number. Let\'s go with a letter!");\n    }\n}\n\n// if let \u5339\u914d\u4efb\u4f55\u679a\u4e3e\nenum Foo {\n    Bar,\n    Baz,\n    Qux(u32),\n}\nfn main() {\n    let a = Foo::Bar;\n    let c = Foo::Qux(100)\n    // a\u53d8\u91cf\u5339\u914d\u5230Foo::Bar\u4e0a\n    if let Foo::Bar = a {\n        println!("a is foobar");\n    }\n    // c \u53d8\u91cf\u5339\u914d\u5230 Foo::Qux\n    if let Foo::Qux(value) = c {\n        println!("c is {}", value);\n    }\n}\n\n')),(0,a.kt)("h3",{id:"while-let"},"while let"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rust"},'// while let \u4e5f\u53ef\u4f7f\u5f97 match \u66f4\u52a0\u7684\u4f18\u96c5\n// \u5bf9\u6bd4\u4ee5\u4e0b\u4ee3\u7801\n\nlet mut option = Some(0);\nloop {\n    match option{\n        Some(i) => {\n            if i > 9 {\n                println!("Greater than 9, quit!");\n                optional = None;\n            }else {\n                println!("`i` is `{:?}`. Try again.", i);\n                optional = Some(i + 1);\n            }\n        },\n        // \u89e3\u6784\u5931\u8d25\u9000\u51fa\u5faa\u73af\n        _ => {break}\n    }\n}\n\n// \u4f7f\u7528 while let \u4f18\u5316\n// let \u5c06 option \u89e3\u6784\u6210 Some(i)\u65f6\u5019\u5c31 \u6267\u884c\u8bed\u53e5\u5757 {}\n// \u5426\u5219\u5c31 break\nwhile let Some(i) = option {\n    if i > 9 {\n        println!("Greater than 9, quit!");\n        optional = None;\n     }else {\n         println!("`i` is `{:?}`. Try again.", i);\n         optional = Some(i + 1);\n     }\n}\n')))}m.isMDXComponent=!0}}]);