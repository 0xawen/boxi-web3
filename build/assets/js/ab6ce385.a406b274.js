"use strict";(self.webpackChunkweb_3_blog=self.webpackChunkweb_3_blog||[]).push([[7645],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>d});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function u(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},l=Object.keys(e);for(r=0;r<l.length;r++)n=l[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(r=0;r<l.length;r++)n=l[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var o=r.createContext({}),s=function(e){var t=r.useContext(o),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=s(e.components);return r.createElement(o.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},f=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,l=e.originalType,o=e.parentName,p=u(e,["components","mdxType","originalType","parentName"]),f=s(n),d=a,m=f["".concat(o,".").concat(d)]||f[d]||c[d]||l;return n?r.createElement(m,i(i({ref:t},p),{},{components:n})):r.createElement(m,i({ref:t},p))}));function d(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var l=n.length,i=new Array(l);i[0]=f;var u={};for(var o in t)hasOwnProperty.call(t,o)&&(u[o]=t[o]);u.originalType=e,u.mdxType="string"==typeof e?e:a,i[1]=u;for(var s=2;s<l;s++)i[s]=n[s];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}f.displayName="MDXCreateElement"},575:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>o,contentTitle:()=>i,default:()=>c,frontMatter:()=>l,metadata:()=>u,toc:()=>s});var r=n(7462),a=(n(7294),n(3905));const l={},i="\u6cdb\u578b",u={unversionedId:"rust/rust\u57fa\u7840\u77e5\u8bc6/\u6cdb\u578b",id:"rust/rust\u57fa\u7840\u77e5\u8bc6/\u6cdb\u578b",title:"\u6cdb\u578b",description:"\u6cdb\u578b\u7ed3\u6784\u4f53",source:"@site/docs\\rust\\rust\u57fa\u7840\u77e5\u8bc6\\\u6cdb\u578b.md",sourceDirName:"rust/rust\u57fa\u7840\u77e5\u8bc6",slug:"/rust/rust\u57fa\u7840\u77e5\u8bc6/\u6cdb\u578b",permalink:"/docs/rust/rust\u57fa\u7840\u77e5\u8bc6/\u6cdb\u578b",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"rust",previous:{title:"\u65b9\u6cd5",permalink:"/docs/rust/rust\u57fa\u7840\u77e5\u8bc6/\u65b9\u6cd5"},next:{title:"\u7279\u5f81trait",permalink:"/docs/rust/rust\u57fa\u7840\u77e5\u8bc6/\u7279\u5f81"}},o={},s=[{value:"\u6cdb\u578b\u7ed3\u6784\u4f53",id:"\u6cdb\u578b\u7ed3\u6784\u4f53",level:3},{value:"\u6cdb\u578b\u679a\u4e3e",id:"\u6cdb\u578b\u679a\u4e3e",level:3},{value:"\u6cdb\u578b\u51fd\u6570",id:"\u6cdb\u578b\u51fd\u6570",level:3},{value:"\u6cdb\u578b\u5b9e\u73b0",id:"\u6cdb\u578b\u5b9e\u73b0",level:3},{value:"\u6cdb\u578btrait",id:"\u6cdb\u578btrait",level:3},{value:"\u6cdb\u578b\u7ea6\u675f -\u91cd\u8981",id:"\u6cdb\u578b\u7ea6\u675f--\u91cd\u8981",level:3},{value:"\u5173\u8054\u9879",id:"\u5173\u8054\u9879",level:3}],p={toc:s};function c(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"\u6cdb\u578b"},"\u6cdb\u578b"),(0,a.kt)("h3",{id:"\u6cdb\u578b\u7ed3\u6784\u4f53"},"\u6cdb\u578b\u7ed3\u6784\u4f53"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rust"},"struct Point<T> {\n    x: T,\n    y: T,\n}\n")),(0,a.kt)("h3",{id:"\u6cdb\u578b\u679a\u4e3e"},"\u6cdb\u578b\u679a\u4e3e"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rust"},"enum Option<T> {\n    Some<T>,\n    None,\n}\n\nenum Result<T, E> {\n    Ok(T),\n    Err(E),\n}\n")),(0,a.kt)("h3",{id:"\u6cdb\u578b\u51fd\u6570"},"\u6cdb\u578b\u51fd\u6570"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rust"},"fn generic<T>(_s: T) {}\n")),(0,a.kt)("h3",{id:"\u6cdb\u578b\u5b9e\u73b0"},"\u6cdb\u578b\u5b9e\u73b0"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rust"},"// \u6cdb\u578b\u7ed3\u6784\u4f53\nstruct GenVal<T> {\n    gen_val: T\n}\n\n// impl  \u6307\u5b9a T \u4e3a\u6cdb\u578b\u7c7b\u578b\nimpl <T> GenVal<T> {\n    fn value(&self) -> &T {\n        &self.gen_val\n    }\n}\n\n")),(0,a.kt)("h3",{id:"\u6cdb\u578btrait"},"\u6cdb\u578btrait"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rust"},"// trait \u4e5f\u53ef\u4ee5\u662f\u6cdb\u578b\uff0c \u4f8b\u5982\u4e0b\u9762\n// \u4e0d\u53ef\u4ee5\u590d\u5236\u7c7b\u578b\nstruct Empty;\nstruct Null;\n\n// T \u7684\u6cdb\u578b trait\ntrait DoubleDrop<T> {\n    // \u5b9a\u4e49\u4e00\u4e2a\u65b9\u6cd5\uff0c \u4f20\u5165T\n    fn doubel_drop(self, _: T);\n}\n\nimpl <T, U> DoubleDrop<T> for U {\n    fn doubel_drop(self, _: T){}\n}\n")),(0,a.kt)("h3",{id:"\u6cdb\u578b\u7ea6\u675f--\u91cd\u8981"},"\u6cdb\u578b\u7ea6\u675f -\u91cd\u8981"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rust"},'// 1 \u9650\u5b9a\u7c7b\u578b\u5b9e\u73b0\u7684\u529f\u80fd\nstruct S<T: Display>(T);\n\n// 2 \u6cdb\u578b\u5b9e\u529b\u53ef\u4ee5\u8bbf\u95ee\u4f5c\u4e3a\u7ea6\u675f\u7684trait\u65b9\u6cd5\nuse std::fmt::Debug;\n\ntrait HasArea {\n    fn area(&self) -> f64;\n}\nimpl HasArea for Rectangle {\n    fn area(&self) -> f64 {self.length *self.height}\n}\n\n#[derive[Debug]]\nstruct Rectangle {length: 664, height: f64}\n\n// \u6cdb\u578b `T` \u5fc5\u987b\u5b9e\u73b0 `Debug` \u3002\u53ea\u8981\u6ee1\u8db3\u8fd9\u70b9\uff0c\u65e0\u8bba\u4ec0\u4e48\u7c7b\u578b\n// \u90fd\u53ef\u4ee5\u8ba9\u4e0b\u9762\u51fd\u6570\u6b63\u5e38\u5de5\u4f5c\u3002\nfn print_debug<T: Debug>(t: &T) {\n    println!("{:?}", t);\n}\n\n// 3 \u7a7a\u7ea6\u675f\nstruct Cardinal;\n\ntrait Red{}\n\nimpl Red for Cardinal {}\n\n// 4 \u591a\u91cd\u7ea6\u675f\nuse std::fmt::{Debug, Display};\n\nfn compare_prints<T: Debug + Display>(t: &T) {\n    ...\n}\n\n// 5 where \u4f18\u5316\u591a\u91cd\u7ea6\u675f\nimpl <A: TraitB + TraitC, D: TraitE + TraitF > Mytrait<A,D> for YourType {}\n\nimpl <A, D> Mytrait<A,D> for yourTypr\n    where A: TraitB + TraitC,\n          D: TraitE + TraitF {}\n\n\n')),(0,a.kt)("h3",{id:"\u5173\u8054\u9879"},"\u5173\u8054\u9879"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rust"},"// `A` \u548c `B` \u5728 trait \u91cc\u9762\u901a\u8fc7 `type` \u5173\u952e\u5b57\u6765\u5b9a\u4e49\u3002\ntrait Contains {\n    type A;\n    type B;\n    \n    fn contains(&self, &Self::A, &Self::B) -> bool;\n}\n")))}c.isMDXComponent=!0}}]);