"use strict";(self.webpackChunkweb_3_blog=self.webpackChunkweb_3_blog||[]).push([[3348],{3905:(e,n,t)=>{t.d(n,{Zo:()=>u,kt:()=>d});var r=t(7294);function l(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){l(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,r,l=function(e,n){if(null==e)return{};var t,r,l={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(l[t]=e[t]);return l}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(l[t]=e[t])}return l}var s=r.createContext({}),c=function(e){var n=r.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},u=function(e){var n=c(e.components);return r.createElement(s.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},g=r.forwardRef((function(e,n){var t=e.components,l=e.mdxType,a=e.originalType,s=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),g=c(t),d=l,m=g["".concat(s,".").concat(d)]||g[d]||p[d]||a;return t?r.createElement(m,o(o({ref:n},u),{},{components:t})):r.createElement(m,o({ref:n},u))}));function d(e,n){var t=arguments,l=n&&n.mdxType;if("string"==typeof e||l){var a=t.length,o=new Array(a);o[0]=g;var i={};for(var s in n)hasOwnProperty.call(n,s)&&(i[s]=n[s]);i.originalType=e,i.mdxType="string"==typeof e?e:l,o[1]=i;for(var c=2;c<a;c++)o[c]=t[c];return r.createElement.apply(null,o)}return r.createElement.apply(null,t)}g.displayName="MDXCreateElement"},1188:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>o,default:()=>p,frontMatter:()=>a,metadata:()=>i,toc:()=>c});var r=t(7462),l=(t(7294),t(3905));const a={},o="\u5168\u5c40\u53d8\u91cf",i={unversionedId:"rust/rust\u8fdb\u9636\u77e5\u8bc6/\u5168\u5c40\u53d8\u91cf",id:"rust/rust\u8fdb\u9636\u77e5\u8bc6/\u5168\u5c40\u53d8\u91cf",title:"\u5168\u5c40\u53d8\u91cf",description:"\u7f16\u8bd1\u671f\u521d\u59cb\u5316",source:"@site/docs\\rust\\rust\u8fdb\u9636\u77e5\u8bc6\\\u5168\u5c40\u53d8\u91cf.md",sourceDirName:"rust/rust\u8fdb\u9636\u77e5\u8bc6",slug:"/rust/rust\u8fdb\u9636\u77e5\u8bc6/\u5168\u5c40\u53d8\u91cf",permalink:"/docs/rust/rust\u8fdb\u9636\u77e5\u8bc6/\u5168\u5c40\u53d8\u91cf",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"rust",previous:{title:"Cell \u548c RefCell",permalink:"/docs/rust/rust\u8fdb\u9636\u77e5\u8bc6/\u667a\u80fd\u6307\u9488/Cell\u4e0eRefCell"},next:{title:"\u9519\u8bef\u5904\u7406",permalink:"/docs/rust/rust\u8fdb\u9636\u77e5\u8bc6/\u9519\u8bef\u5904\u7406"}},s={},c=[{value:"\u7f16\u8bd1\u671f\u521d\u59cb\u5316",id:"\u7f16\u8bd1\u671f\u521d\u59cb\u5316",level:2},{value:"\u9759\u6001\u5e38\u91cf",id:"\u9759\u6001\u5e38\u91cf",level:3},{value:"\u9759\u6001\u53d8\u91cf",id:"\u9759\u6001\u53d8\u91cf",level:3},{value:"\u539f\u5b50\u7c7b\u578b",id:"\u539f\u5b50\u7c7b\u578b",level:3},{value:"\u8fd0\u884c\u671f\u521d\u59cb\u5316",id:"\u8fd0\u884c\u671f\u521d\u59cb\u5316",level:2},{value:"layz_static",id:"layz_static",level:3},{value:"OnceCell",id:"oncecell",level:2}],u={toc:c};function p(e){let{components:n,...t}=e;return(0,l.kt)("wrapper",(0,r.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,l.kt)("h1",{id:"\u5168\u5c40\u53d8\u91cf"},"\u5168\u5c40\u53d8\u91cf"),(0,l.kt)("h2",{id:"\u7f16\u8bd1\u671f\u521d\u59cb\u5316"},"\u7f16\u8bd1\u671f\u521d\u59cb\u5316"),(0,l.kt)("h3",{id:"\u9759\u6001\u5e38\u91cf"},"\u9759\u6001\u5e38\u91cf"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rust"},"const MAX_ID: usize = usize::MAX / 2;\n")),(0,l.kt)("h3",{id:"\u9759\u6001\u53d8\u91cf"},"\u9759\u6001\u53d8\u91cf"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rust"},"static mut REQUSET_RECV: usize = 0;\nfn main() {\n    unsafe {\n        REQUEST_RECV += 1;\n        assert_eq!(REQUEST_RECV, 1);\n    }\n}\n")),(0,l.kt)("h3",{id:"\u539f\u5b50\u7c7b\u578b"},"\u539f\u5b50\u7c7b\u578b"),(0,l.kt)("p",null,"\u9700\u8981\u7ebf\u7a0b\u5b89\u5168\u7684\u65f6\u5019\uff0c\u4f7f\u7528\u539f\u5b50\u7c7b\u578b"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rust"},'use std::sync::atomic::{AtomicUsize, Ordering};\n\nstatic  REQUEST_RECV: AtomicUsize  = AtomicUsize::new(0);\n\nfn main() {\n    for _ in 0..100 {\n        REQUEST_RECV.fetch_add(1, Ordering::Relaxed);\n    }\n    println!("\u5f53\u524d\u7528\u6237\u8bf7\u6c42\u6570{:?}",REQUEST_RECV);\n}\n')),(0,l.kt)("h2",{id:"\u8fd0\u884c\u671f\u521d\u59cb\u5316"},"\u8fd0\u884c\u671f\u521d\u59cb\u5316"),(0,l.kt)("h3",{id:"layz_static"},"layz_static"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rust"},'ust std::sync::Mutex;\nuse lazy_static::lazy_static;\n\nlazy_static! {\n    static ref NAMES: Mutxe<String> = Mutex::new(String::from("jack"));\n}\n\nfn main() {\n    let mut v = NAMES.lock().unwrap();\n    v.push_str(", math");\n}\n')),(0,l.kt)("h2",{id:"oncecell"},"OnceCell"),(0,l.kt)("p",null,"\u5728 ",(0,l.kt)("inlineCode",{parentName:"p"},"Rust")," \u6807\u51c6\u5e93\u4e2d\u63d0\u4f9b ",(0,l.kt)("inlineCode",{parentName:"p"},"lazy::OnceCell")," \u548c ",(0,l.kt)("inlineCode",{parentName:"p"},"lazy::SyncOnceCell")," \u4e24\u79cd ",(0,l.kt)("inlineCode",{parentName:"p"},"Cell"),"\uff0c\u524d\u8005\u7528\u4e8e\u5355\u7ebf\u7a0b\uff0c\u540e\u8005\u7528\u4e8e\u591a\u7ebf\u7a0b\uff0c\u5b83\u4eec\u7528\u6765\u5b58\u50a8\u5806\u4e0a\u7684\u4fe1\u606f\uff0c\u5e76\u4e14\u5177\u6709\u6700\u591a\u53ea\u80fd\u8d4b\u503c\u4e00\u6b21\u7684\u7279\u6027\u3002 \u5982\u5b9e\u73b0\u4e00\u4e2a\u591a\u7ebf\u7a0b\u7684\u65e5\u5fd7\u7ec4\u4ef6 ",(0,l.kt)("inlineCode",{parentName:"p"},"Logger"),"\u3002"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rust"},'#![feature(once_cell)]\n\nuse std::{lazy::SyncOnceCell, thread};\n\nfn main() {\n    // \u5b50\u7ebf\u7a0b\u4e2d\u8c03\u7528\n    let handle = thread::spawn(|| {\n        let logger = Logger::global();\n        logger.log("thread message".to_string());\n    });\n\n    // \u4e3b\u7ebf\u7a0b\u8c03\u7528\n    let logger = Logger::global();\n    logger.log("some message".to_string());\n\n    let logger2 = Logger::global();\n    logger2.log("other message".to_string());\n\n    handle.join().unwrap();\n}\n\n#[derive(Debug)]\nstruct Logger;\n\nstatic LOGGER: SyncOnceCell<Logger> = SyncOnceCell::new();\n\nimpl Logger {\n    fn global() -> &\'static Logger {\n        // \u83b7\u53d6\u6216\u521d\u59cb\u5316 Logger\n        LOGGER.get_or_init(|| {\n            println!("Logger is being created..."); // \u521d\u59cb\u5316\u6253\u5370\n            Logger\n        })\n    }\n\n    fn log(&self, message: String) {\n        println!("{}", message)\n    }\n}\n')))}p.isMDXComponent=!0}}]);