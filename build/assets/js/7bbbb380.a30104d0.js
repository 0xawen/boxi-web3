"use strict";(self.webpackChunkweb_3_blog=self.webpackChunkweb_3_blog||[]).push([[9516],{3905:(e,n,t)=>{t.d(n,{Zo:()=>c,kt:()=>m});var r=t(7294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function u(e,n){if(null==e)return{};var t,r,i=function(e,n){if(null==e)return{};var t,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var l=r.createContext({}),s=function(e){var n=r.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},c=function(e){var n=s(e.components);return r.createElement(l.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},d=r.forwardRef((function(e,n){var t=e.components,i=e.mdxType,a=e.originalType,l=e.parentName,c=u(e,["components","mdxType","originalType","parentName"]),d=s(t),m=i,b=d["".concat(l,".").concat(m)]||d[m]||p[m]||a;return t?r.createElement(b,o(o({ref:n},c),{},{components:t})):r.createElement(b,o({ref:n},c))}));function m(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var a=t.length,o=new Array(a);o[0]=d;var u={};for(var l in n)hasOwnProperty.call(n,l)&&(u[l]=n[l]);u.originalType=e,u.mdxType="string"==typeof e?e:i,o[1]=u;for(var s=2;s<a;s++)o[s]=t[s];return r.createElement.apply(null,o)}return r.createElement.apply(null,t)}d.displayName="MDXCreateElement"},3337:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>p,frontMatter:()=>a,metadata:()=>u,toc:()=>s});var r=t(7462),i=(t(7294),t(3905));const a={},o="\u9519\u8bef\u5904\u7406",u={unversionedId:"solidity/solidity_basic/error",id:"solidity/solidity_basic/error",title:"\u9519\u8bef\u5904\u7406",description:"\u6211\u4eec\u53ef\u4ee5\u8c03\u7528\uff1a require revert assert \u629b\u51fa\u9519\u8bef",source:"@site/docs/solidity/solidity_basic/19_error.md",sourceDirName:"solidity/solidity_basic",slug:"/solidity/solidity_basic/error",permalink:"/docs/solidity/solidity_basic/error",draft:!1,tags:[],version:"current",sidebarPosition:19,frontMatter:{},sidebar:"solidity",previous:{title:"view and pure \u51fd\u6570",permalink:"/docs/solidity/solidity_basic/view_and_pure_functions"},next:{title:"\u51fd\u6570\u4fee\u9970\u7b26",permalink:"/docs/solidity/solidity_basic/function_modifier"}},l={},s=[],c={toc:s};function p(e){let{components:n,...t}=e;return(0,i.kt)("wrapper",(0,r.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"\u9519\u8bef\u5904\u7406"},"\u9519\u8bef\u5904\u7406"),(0,i.kt)("p",null,"\u6211\u4eec\u53ef\u4ee5\u8c03\u7528\uff1a ",(0,i.kt)("inlineCode",{parentName:"p"},"require")," ",(0,i.kt)("inlineCode",{parentName:"p"},"revert")," ",(0,i.kt)("inlineCode",{parentName:"p"},"assert")," \u629b\u51fa\u9519\u8bef"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"require \u901a\u5e38\u7528\u6765\u8f93\u5165\u53c2\u6570\u8fdb\u884c\u6821\u9a8c")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"revert \u7c7b\u4f3c\u4e8e require")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"assert \u88ab\u7528\u6765\u8fdb\u884c\u65ad\u8a00\u5224\u65ad"))),(0,i.kt)("p",null,"\u4f7f\u7528\u5b9a\u5236\u7684\u9519\u8bef\u53bb\u8282\u7ea6 gas"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-solidity"},'// SPDX-License-Identifier: MIT\npragma solidity ^0.8.13;\n\ncontract Error {\n    function testRequire(uint _i) public pure {\n        // Require should be used to validate conditions such as:\n        // - inputs\n        // - conditions before execution\n        // - return values from calls to other functions\n        require(_i > 10, "Input must be greater than 10");\n    }\n\n    function testRevert(uint _i) public pure {\n        // Revert is useful when the condition to check is complex.\n        // This code does the exact same thing as the example above\n        if (_i <= 10) {\n            revert("Input must be greater than 10");\n        }\n    }\n\n    uint public num;\n\n    function testAssert() public view {\n        // Assert should only be used to test for internal errors,\n        // and to check invariants.\n\n        // Here we assert that num is always equal to 0\n        // since it is impossible to update the value of num\n        assert(num == 0);\n    }\n\n    // custom error\n    error InsufficientBalance(uint balance, uint withdrawAmount);\n\n    function testCustomError(uint _withdrawAmount) public view {\n        uint bal = address(this).balance;\n        if (bal < _withdrawAmount) {\n            revert InsufficientBalance({balance: bal, withdrawAmount: _withdrawAmount});\n        }\n    }\n}// SPDX-License-Identifier: MIT\npragma solidity ^0.8.13;\n\ncontract Error {\n    function testRequire(uint _i) public pure {\n        // Require should be used to validate conditions such as:\n        // - inputs\n        // - conditions before execution\n        // - return values from calls to other functions\n        require(_i > 10, "Input must be greater than 10");\n    }\n\n    function testRevert(uint _i) public pure {\n        // Revert is useful when the condition to check is complex.\n        // This code does the exact same thing as the example above\n        if (_i <= 10) {\n            revert("Input must be greater than 10");\n        }\n    }\n\n    uint public num;\n\n    function testAssert() public view {\n        // Assert should only be used to test for internal errors,\n        // and to check invariants.\n\n        // Here we assert that num is always equal to 0\n        // since it is impossible to update the value of num\n        assert(num == 0);\n    }\n\n    // custom error\n    error InsufficientBalance(uint balance, uint withdrawAmount);\n\n    function testCustomError(uint _withdrawAmount) public view {\n        uint bal = address(this).balance;\n        if (bal < _withdrawAmount) {\n            revert InsufficientBalance({balance: bal, withdrawAmount: _withdrawAmount});\n        }\n    }\n}\n')),(0,i.kt)("p",null,"\u4f8b\u5b50\uff1a"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-solidity"},'// SPDX-License-Identifier: MIT\npragma solidity ^0.8.13;\n\ncontract Account {\n    uint public balance;\n    uint public constant MAX_UINT = 2**256 - 1;\n\n    function deposit(uint _amount) public {\n        uint oldBalance = balance;\n        uint newBalance = balance + _amount;\n\n        // balance + _amount does not overflow if balance + _amount >= balance\n        require(newBalance >= oldBalance, "Overflow");\n\n        balance = newBalance;\n\n        assert(balance >= oldBalance);\n    }\n\n    function withdraw(uint _amount) public {\n        uint oldBalance = balance;\n\n        // balance - _amount does not underflow if balance >= _amount\n        require(balance >= _amount, "Underflow");\n\n        if (balance < _amount) {\n            revert("Underflow");\n        }\n\n        balance -= _amount;\n\n        assert(balance <= oldBalance);\n    }\n}\n')))}p.isMDXComponent=!0}}]);