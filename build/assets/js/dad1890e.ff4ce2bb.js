"use strict";(self.webpackChunkweb_3_blog=self.webpackChunkweb_3_blog||[]).push([[2775],{3905:(n,e,t)=>{t.d(e,{Zo:()=>p,kt:()=>b});var r=t(7294);function a(n,e,t){return e in n?Object.defineProperty(n,e,{value:t,enumerable:!0,configurable:!0,writable:!0}):n[e]=t,n}function o(n,e){var t=Object.keys(n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(n);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable}))),t.push.apply(t,r)}return t}function c(n){for(var e=1;e<arguments.length;e++){var t=null!=arguments[e]?arguments[e]:{};e%2?o(Object(t),!0).forEach((function(e){a(n,e,t[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(n,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(e){Object.defineProperty(n,e,Object.getOwnPropertyDescriptor(t,e))}))}return n}function s(n,e){if(null==n)return{};var t,r,a=function(n,e){if(null==n)return{};var t,r,a={},o=Object.keys(n);for(r=0;r<o.length;r++)t=o[r],e.indexOf(t)>=0||(a[t]=n[t]);return a}(n,e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(n);for(r=0;r<o.length;r++)t=o[r],e.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(n,t)&&(a[t]=n[t])}return a}var l=r.createContext({}),u=function(n){var e=r.useContext(l),t=e;return n&&(t="function"==typeof n?n(e):c(c({},e),n)),t},p=function(n){var e=u(n.components);return r.createElement(l.Provider,{value:e},n.children)},i={inlineCode:"code",wrapper:function(n){var e=n.children;return r.createElement(r.Fragment,{},e)}},m=r.forwardRef((function(n,e){var t=n.components,a=n.mdxType,o=n.originalType,l=n.parentName,p=s(n,["components","mdxType","originalType","parentName"]),m=u(t),b=a,y=m["".concat(l,".").concat(b)]||m[b]||i[b]||o;return t?r.createElement(y,c(c({ref:e},p),{},{components:t})):r.createElement(y,c({ref:e},p))}));function b(n,e){var t=arguments,a=e&&e.mdxType;if("string"==typeof n||a){var o=t.length,c=new Array(o);c[0]=m;var s={};for(var l in e)hasOwnProperty.call(e,l)&&(s[l]=e[l]);s.originalType=n,s.mdxType="string"==typeof n?n:a,c[1]=s;for(var u=2;u<o;u++)c[u]=t[u];return r.createElement.apply(null,c)}return r.createElement.apply(null,t)}m.displayName="MDXCreateElement"},7613:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>l,contentTitle:()=>c,default:()=>i,frontMatter:()=>o,metadata:()=>s,toc:()=>u});var r=t(7462),a=(t(7294),t(3905));const o={},c="\u7f16\u5199\u6d4b\u8bd5",s={unversionedId:"rust_contract/solana/solana_workflow/\u7f16\u5199\u6d4b\u8bd5",id:"rust_contract/solana/solana_workflow/\u7f16\u5199\u6d4b\u8bd5",title:"\u7f16\u5199\u6d4b\u8bd5",description:"\u5728 tests/mysolanaapp.js \u4e2d\u7f16\u5199\u6211\u4eec\u7684\u6d4b\u8bd5",source:"@site/docs\\rust_contract\\solana\\01_solana_workflow\\\u7f16\u5199\u6d4b\u8bd5.md",sourceDirName:"rust_contract/solana/01_solana_workflow",slug:"/rust_contract/solana/solana_workflow/\u7f16\u5199\u6d4b\u8bd5",permalink:"/docs/rust_contract/solana/solana_workflow/\u7f16\u5199\u6d4b\u8bd5",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"rust_contract",previous:{title:"\u7a0b\u5e8f\u6d3e\u751f\u5730\u5740",permalink:"/docs/rust_contract/solana/solana_workflow/\u7a0b\u5e8f\u6d3e\u751f\u5730\u5740"},next:{title:"\u90e8\u7f72\u5408\u7ea6",permalink:"/docs/rust_contract/solana/solana_workflow/\u90e8\u7f72\u5408\u7ea6"}},l={},u=[],p={toc:u};function i(n){let{components:e,...t}=n;return(0,a.kt)("wrapper",(0,r.Z)({},p,t,{components:e,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"\u7f16\u5199\u6d4b\u8bd5"},"\u7f16\u5199\u6d4b\u8bd5"),(0,a.kt)("p",null,"\u5728 tests/mysolanaapp.js \u4e2d\u7f16\u5199\u6211\u4eec\u7684\u6d4b\u8bd5"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},'const assert = require("assert");\n\nconst anchor = require("@project-serum/anchor");\n\nconst {SystemProgram} = anchor.web3;\n\n\ndescribe("mysolanaapp", () => {\n    \n    // creat and set a provider\n    const provider = anchor.Provider.env();\n    anchor.setProvider(provider);\n    \n    const program = anchor.workspace.Mysolanaapp;\n    \n    it("create a counter", async () => {\n        const baseAccount = anchor.web3.Keypair.generate();\n        await program.rpc.create({\n            accounts: {\n                baseAccount: baseAccount.publicKey,\n                user: provider.wallet.publicKey,\n                systemProgram: SystemProgram.programId,\n            },\n            signer: [baseAccount],           \n        });\n        // \n        const account = await program.account.baseAccount.fetch(baseAccount.publicKey);\n         console.log(\'Count 0: \', account.count.toString())\n            assert.ok(account.count.toString() == 0);\n            _baseAccount = baseAccount;\n\n    });\n\n    it("Increments the counter", async () => {\n       const baseAccount = _baseAccount;\n   \n       await program.rpc.increment({\n         accounts: {\n           baseAccount: baseAccount.publicKey,\n         },\n       });\n   \n       const account = await program.account.baseAccount.fetch(baseAccount.publicKey);\n       console.log(\'Count 1: \', account.count.toString())\n       assert.ok(account.count.toString() == 1);\n     }); \n});\n')),(0,a.kt)("p",null,"\u66ff\u6362ID"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"solana address -k target/deploy/mysolanaapp-keypair.json\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},'// mysolanaapp/src/lib.rs\n\ndeclare_id!("your-program-id");\n')),(0,a.kt)("p",null,"\u5728 Anchor \u4e2d"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-toml"},'# Anchor.toml\n[programs.localnet]\nmysolanaapp = "your-program-id"\n')),(0,a.kt)("p",null,"\u8fd0\u884c\u6d4b\u8bd5"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"anchor test\n")))}i.isMDXComponent=!0}}]);