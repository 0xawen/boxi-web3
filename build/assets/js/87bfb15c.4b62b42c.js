"use strict";(self.webpackChunkweb_3_blog=self.webpackChunkweb_3_blog||[]).push([[7325],{3905:(e,n,t)=>{t.d(n,{Zo:()=>p,kt:()=>m});var r=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function l(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?l(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):l(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function o(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},l=Object.keys(e);for(r=0;r<l.length;r++)t=l[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(r=0;r<l.length;r++)t=l[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var s=r.createContext({}),u=function(e){var n=r.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},p=function(e){var n=u(e.components);return r.createElement(s.Provider,{value:n},e.children)},d={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},c=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,l=e.originalType,s=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),c=u(t),m=a,f=c["".concat(s,".").concat(m)]||c[m]||d[m]||l;return t?r.createElement(f,i(i({ref:n},p),{},{components:t})):r.createElement(f,i({ref:n},p))}));function m(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var l=t.length,i=new Array(l);i[0]=c;var o={};for(var s in n)hasOwnProperty.call(n,s)&&(o[s]=n[s]);o.originalType=e,o.mdxType="string"==typeof e?e:a,i[1]=o;for(var u=2;u<l;u++)i[u]=t[u];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}c.displayName="MDXCreateElement"},9936:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>i,default:()=>d,frontMatter:()=>l,metadata:()=>o,toc:()=>u});var r=t(7462),a=(t(7294),t(3905));const l={},i="\u591a\u7ebf\u7a0b\u7684\u4f7f\u7528",o={unversionedId:"rust/rust\u591a\u7ebf\u7a0b\u5e76\u53d1\u7f16\u7a0b/\u591a\u7ebf\u7a0b\u7684\u4f7f\u7528",id:"rust/rust\u591a\u7ebf\u7a0b\u5e76\u53d1\u7f16\u7a0b/\u591a\u7ebf\u7a0b\u7684\u4f7f\u7528",title:"\u591a\u7ebf\u7a0b\u7684\u4f7f\u7528",description:"\u521b\u5efa\u591a\u7ebf\u7a0b",source:"@site/docs\\rust\\rust\u591a\u7ebf\u7a0b\u5e76\u53d1\u7f16\u7a0b\\\u591a\u7ebf\u7a0b\u7684\u4f7f\u7528.md",sourceDirName:"rust/rust\u591a\u7ebf\u7a0b\u5e76\u53d1\u7f16\u7a0b",slug:"/rust/rust\u591a\u7ebf\u7a0b\u5e76\u53d1\u7f16\u7a0b/\u591a\u7ebf\u7a0b\u7684\u4f7f\u7528",permalink:"/docs/rust/rust\u591a\u7ebf\u7a0b\u5e76\u53d1\u7f16\u7a0b/\u591a\u7ebf\u7a0b\u7684\u4f7f\u7528",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"rust",previous:{title:"rust\u591a\u7ebf\u7a0b\u6982\u8ff0",permalink:"/docs/rust/rust\u591a\u7ebf\u7a0b\u5e76\u53d1\u7f16\u7a0b/info"},next:{title:"\u7ebf\u7a0b\u540c\u6b65-\u6d88\u606f\u540c\u6b65",permalink:"/docs/rust/rust\u591a\u7ebf\u7a0b\u5e76\u53d1\u7f16\u7a0b/\u7ebf\u7a0b\u540c\u6b65_\u6d88\u606f\u4f20\u9012"}},s={},u=[{value:"\u521b\u5efa\u591a\u7ebf\u7a0b",id:"\u521b\u5efa\u591a\u7ebf\u7a0b",level:2},{value:"\u7b49\u5f85\u7ebf\u7a0b\u7ed3\u675f",id:"\u7b49\u5f85\u7ebf\u7a0b\u7ed3\u675f",level:2},{value:"\u7ebf\u7a0b\u95ed\u5305\u4e2d\u4f7f\u7528move",id:"\u7ebf\u7a0b\u95ed\u5305\u4e2d\u4f7f\u7528move",level:2},{value:"\u7ebf\u7a0b\u5c40\u90e8\u53d8\u91cf",id:"\u7ebf\u7a0b\u5c40\u90e8\u53d8\u91cf",level:2},{value:"\u7ebf\u7a0b\u5c4f\u969c\u4f7f\u7528",id:"\u7ebf\u7a0b\u5c4f\u969c\u4f7f\u7528",level:2},{value:"\u7ebf\u7a0b\u7684\u6302\u8d77\u4e0e\u6267\u884c",id:"\u7ebf\u7a0b\u7684\u6302\u8d77\u4e0e\u6267\u884c",level:2},{value:"\u53ea\u88ab\u8c03\u7528\u4e00\u6b21\u7684\u51fd\u6570",id:"\u53ea\u88ab\u8c03\u7528\u4e00\u6b21\u7684\u51fd\u6570",level:2},{value:"\u591a\u7ebf\u7a0b\u7684\u95ee\u9898",id:"\u591a\u7ebf\u7a0b\u7684\u95ee\u9898",level:2}],p={toc:u};function d(e){let{components:n,...t}=e;return(0,a.kt)("wrapper",(0,r.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"\u591a\u7ebf\u7a0b\u7684\u4f7f\u7528"},"\u591a\u7ebf\u7a0b\u7684\u4f7f\u7528"),(0,a.kt)("h2",{id:"\u521b\u5efa\u591a\u7ebf\u7a0b"},"\u521b\u5efa\u591a\u7ebf\u7a0b"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"thread::spawn")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rust"},'use std::thread;\nuse std::time::Duration;\n\nfn main() {\n    thread::spawn(|| {\n        for i in 1..10 {\n            println!("hi number {} from the spawned thread!", i);\n            thread::sleep(Duration::from_millis(1));\n        }\n    });\n    \n    for i in 1..5 {\n        println!("hi number {} from the main thread!", i);\n        thread::sleep(Duration::from_millis(1));\n    }\n}\n')),(0,a.kt)("h2",{id:"\u7b49\u5f85\u7ebf\u7a0b\u7ed3\u675f"},"\u7b49\u5f85\u7ebf\u7a0b\u7ed3\u675f"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rust"},'use std::thread;\nuse std::time::Duration;\n\nfn main() {\n    let handle = thread::spawn(|| {\n        for i in 1..10 {\n            println!("hi number {} from the spawned thread!", i);\n            thread::sleep(Duration::from_millis(1));\n        }\n    });\n    \n    handle.join().unwrap(); // \u7b49\u5f85\u5b50\u7ebf\u7a0b\u7ed3\u675f\uff0c\u4e3b\u7ebf\u7a0b\u963b\u585e\u5728\u8fd9\u91cc\n    \n    for i in 1..5 {\n        println!("hi number {} from the main thread!", i);\n        thread::sleep(Duration::from_millis(1));\n    }\n}\n')),(0,a.kt)("h2",{id:"\u7ebf\u7a0b\u95ed\u5305\u4e2d\u4f7f\u7528move"},"\u7ebf\u7a0b\u95ed\u5305\u4e2d\u4f7f\u7528move"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rust"},'use std::thread;\n\nfn main() {\n    let v = vec![1,2,3];\n    \n    // \u7ebf\u7a0b \u4f1a\u62ff\u8d70v\u7684\u6240\u6709\u6743\n    let handle = thread::spawn(move ||{\n        println!("Here\'s a vector: {:?}", v);\n    }):\n    \n    handle.join().unwrap();\n}\n')),(0,a.kt)("h2",{id:"\u7ebf\u7a0b\u5c40\u90e8\u53d8\u91cf"},"\u7ebf\u7a0b\u5c40\u90e8\u53d8\u91cf"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"\u6807\u51c6\u5e93\u4f7f\u7528 - ",(0,a.kt)("inlineCode",{parentName:"li"},"thread_local"))),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rust"},"use std::cell::RefCell;\nuse std::thread;\n\nthread_local!(static Foo: ReCeff<u32> = RefCell::new(1));\n\nFoo.with(|f| {\n    assert_eq!(*f.borrow(), 1);\n     *f.borrow_mut() = 2;\n});\n// \u6bcf\u4e2a\u7ebf\u7a0b\u5f00\u59cb\u65f6\u90fd\u4f1a\u62ff\u5230\u7ebf\u7a0b\u5c40\u90e8\u53d8\u91cf\u7684FOO\u7684\u521d\u59cb\u503c\nlet t = thread::spawn(move|| {\n    FOO.with(|f| {\n        assert_eq!(*f.borrow(), 1);\n        *f.borrow_mut() = 3;\n    });\n});\n\n// \u7b49\u5f85\u7ebf\u7a0b\u5b8c\u6210\nt.join().unwrap();\n\n// \u5c3d\u7ba1\u5b50\u7ebf\u7a0b\u4e2d\u4fee\u6539\u4e3a\u4e863\uff0c\u6211\u4eec\u5728\u8fd9\u91cc\u4f9d\u7136\u62e5\u6709main\u7ebf\u7a0b\u4e2d\u7684\u5c40\u90e8\u503c\uff1a2\nFOO.with(|f| {\n    assert_eq!(*f.borrow(), 2);\n});\n")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"\u7b2c\u4e09\u65b9\u5e93 thread_local")),(0,a.kt)("p",null,"\u5b83\u5141\u8bb8\u6bcf\u4e2a\u7ebf\u7a0b\u6301\u6709\u503c\u7684\u72ec\u7acb\u62f7\u8d1d"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rust"},"use thread_local::ThreadLocal;\nuse std::sync::Arc;\nuse std::cell::Cell;\nuse std::thread:\n\nlet tls = Arc::new(ThreadLocal::new());\n\n// \u591a\u7ebf\u7a0b\nfor _ in 0..5 {\n    let tls2 = tls.clone();\n    \n    thread::spawn(move || {\n        // \u5c06\u8ba1\u6570\u5668\u52a01\n        let cell = tls2.get_or(|| Cell::new(0));\n        cell.set(cell.get() + 1);\n    }).join.unwrap();\n}\n\n// \u4e00\u65e6\u6240\u6709\u5b50\u7ebf\u7a0b\u7ed3\u675f\uff0c\u6536\u96c6\u5b83\u4eec\u7684\u7ebf\u7a0b\u5c40\u90e8\u53d8\u91cf\u4e2d\u7684\u8ba1\u6570\u5668\u503c\uff0c\u7136\u540e\u8fdb\u884c\u6c42\u548c\nlet tls = Arc::try_unwrap(tls).unwrap();\nlet total = tls.into_iter().fold(0, |x, y| x + y.get());\n\n// \u548c\u4e3a5\nassert_eq!(total, 5);\n")),(0,a.kt)("hr",null),(0,a.kt)("h2",{id:"\u7ebf\u7a0b\u5c4f\u969c\u4f7f\u7528"},"\u7ebf\u7a0b\u5c4f\u969c\u4f7f\u7528"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"Barrier"),"\u8ba9\u591a\u4e2a\u7ebf\u7a0b\u8fd0\u884c\u5230\u67d0\u4e2a\u70b9\uff0c\u7136\u540e\u4e00\u8d77\u5f80\u540e\u6267\u884c\u3002"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rust"},'use std::sync::{Arc, Barrier};\nuse std::thread;\n\nfn main() {\n    let mut handles = Vec::with_capacity(6);\n    let barrier = Arc::new(Barrier::new(6));\n    \n    for _ in 0..6 {\n        let b = barrier.clone();\n        handles.push(thread::spawn( move || {\n            println!("before wait");\n            //\u7ebf\u7a0b\u6253\u5370\u51fa before wait \u540e\u589e\u52a0\u4e86\u4e00\u4e2a\u5c4f\u969c\n            //\u76ee\u7684\u5c31\u662f\u7b49\u6240\u6709\u7684\u7ebf\u7a0b\u90fd\u6253\u5370\u51fabefore wait\u540e\uff0c\u5404\u4e2a\u7ebf\u7a0b\u518d\u7ee7\u7eed\u6267\u884c\n            b.wait();\n            println!("after wait");\n        }));\n    }\n    \n    for handle in handles {\n        handle.join().unwrap();\n    }\n}\n\n')),(0,a.kt)("h2",{id:"\u7ebf\u7a0b\u7684\u6302\u8d77\u4e0e\u6267\u884c"},"\u7ebf\u7a0b\u7684\u6302\u8d77\u4e0e\u6267\u884c"),(0,a.kt)("p",null,"\u6761\u4ef6\u53d8\u91cf(Condition Variables)\u7ecf\u5e38\u548c ",(0,a.kt)("inlineCode",{parentName:"p"},"Mutex")," \u4e00\u8d77\u4f7f\u7528\uff0c\u53ef\u4ee5\u8ba9\u7ebf\u7a0b\u6302\u8d77\uff0c\u76f4\u5230\u67d0\u4e2a\u6761\u4ef6\u53d1\u751f\u540e\u518d\u7ee7\u7eed\u6267\u884c\u3002"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rust"},'use std::thread;\nuse std::sync::{Arc, Mutex, Condvar};\nfn main() {\n    let pair = Arc::new((Mutex::new(false), Condvar::new());\n    let pari2 = pair.clone();\n        \n    thread:;spawn(move || {\n        let &{ref lock, ref cvar} = &*pair2;\n        let mut started = lock.lock().unwrap();\n        println!("changing started");\n        *started = true;\n        cvar.notify_one();\n    });\n        \n    let &\uff08ref lock, ref cvar\uff09 = &*pair;\n    let mut stared = lock.lock().unwrap();\n    while !*started {\n        started = cvar.wait(started).unwrap();\n    }\n    println!("started changed");  \n}\n')),(0,a.kt)("p",null,"\u4e0a\u8ff0\u4ee3\u7801\u6d41\u7a0b\u5982\u4e0b\uff1a"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("inlineCode",{parentName:"li"},"main")," \u7ebf\u7a0b\u9996\u5148\u8fdb\u5165 ",(0,a.kt)("inlineCode",{parentName:"li"},"while")," \u5faa\u73af\uff0c\u8c03\u7528 ",(0,a.kt)("inlineCode",{parentName:"li"},"wait")," \u65b9\u6cd5\u6302\u8d77\u7b49\u5f85\u5b50\u7ebf\u7a0b\u7684\u901a\u77e5\uff0c\u5e76\u91ca\u653e\u4e86\u9501 ",(0,a.kt)("inlineCode",{parentName:"li"},"started")),(0,a.kt)("li",{parentName:"ol"},"\u5b50\u7ebf\u7a0b\u83b7\u53d6\u5230\u9501\uff0c\u5e76\u5c06\u5176\u4fee\u6539\u4e3a ",(0,a.kt)("inlineCode",{parentName:"li"},"true"),"\uff0c\u7136\u540e\u8c03\u7528\u6761\u4ef6\u53d8\u91cf\u7684 ",(0,a.kt)("inlineCode",{parentName:"li"},"notify_one")," \u65b9\u6cd5\u6765\u901a\u77e5\u4e3b\u7ebf\u7a0b\u7ee7\u7eed\u6267\u884c")),(0,a.kt)("h2",{id:"\u53ea\u88ab\u8c03\u7528\u4e00\u6b21\u7684\u51fd\u6570"},"\u53ea\u88ab\u8c03\u7528\u4e00\u6b21\u7684\u51fd\u6570"),(0,a.kt)("p",null,"\u4eec\u4f1a\u9700\u8981\u67d0\u4e2a\u51fd\u6570\u5728\u591a\u7ebf\u7a0b\u73af\u5883\u4e0b\u53ea\u88ab\u8c03\u7528\u4e00\u6b21\uff0c\u4f8b\u5982\u521d\u59cb\u5316\u5168\u5c40\u53d8\u91cf\u3002"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rust"},'use std::thread;\nuse std::sync::Once;\n\nstatic mut VAL: usize = 0;\nstatic INIT: Once = Once::new();\n\nfn main() {\n    let handle1 = thread::spawn(move || {\n        INIT.call_once(|| {\n            unsafe {\n                VAL = 1;\n            }\n        });\n    });\n    \n   let handle2 = thread::spawn(move || {\n       INIT.call_once(|| {\n            unsafe {\n                VAL = 2;\n            }\n        });\n    });\n    \n    handle1.join().unwrap();\n    handle2.join().unwrap();\n\n    println!("{}", unsafe { VAL });\n}\n')),(0,a.kt)("h2",{id:"\u591a\u7ebf\u7a0b\u7684\u95ee\u9898"},"\u591a\u7ebf\u7a0b\u7684\u95ee\u9898"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"\u7ade\u6001\u6761\u4ef6(race conditions)\uff0c\u591a\u4e2a\u7ebf\u7a0b\u4ee5\u975e\u4e00\u81f4\u6027\u7684\u987a\u5e8f\u540c\u65f6\u8bbf\u95ee\u6570\u636e\u8d44\u6e90"),(0,a.kt)("li",{parentName:"ul"},"\u6b7b\u9501(deadlocks)\uff0c\u4e24\u4e2a\u7ebf\u7a0b\u90fd\u60f3\u4f7f\u7528\u67d0\u4e2a\u8d44\u6e90\uff0c\u4f46\u662f\u53c8\u90fd\u5728\u7b49\u5f85\u5bf9\u65b9\u91ca\u653e\u8d44\u6e90\u540e\u624d\u80fd\u4f7f\u7528\uff0c\u7ed3\u679c\u6700\u7ec8\u90fd\u65e0\u6cd5\u7ee7\u7eed\u6267\u884c")))}d.isMDXComponent=!0}}]);