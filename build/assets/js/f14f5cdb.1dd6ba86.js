"use strict";(self.webpackChunkweb_3_blog=self.webpackChunkweb_3_blog||[]).push([[5337],{3905:(n,e,t)=>{t.d(e,{Zo:()=>l,kt:()=>d});var r=t(7294);function i(n,e,t){return e in n?Object.defineProperty(n,e,{value:t,enumerable:!0,configurable:!0,writable:!0}):n[e]=t,n}function o(n,e){var t=Object.keys(n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(n);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable}))),t.push.apply(t,r)}return t}function u(n){for(var e=1;e<arguments.length;e++){var t=null!=arguments[e]?arguments[e]:{};e%2?o(Object(t),!0).forEach((function(e){i(n,e,t[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(n,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(e){Object.defineProperty(n,e,Object.getOwnPropertyDescriptor(t,e))}))}return n}function a(n,e){if(null==n)return{};var t,r,i=function(n,e){if(null==n)return{};var t,r,i={},o=Object.keys(n);for(r=0;r<o.length;r++)t=o[r],e.indexOf(t)>=0||(i[t]=n[t]);return i}(n,e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(n);for(r=0;r<o.length;r++)t=o[r],e.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(n,t)&&(i[t]=n[t])}return i}var c=r.createContext({}),s=function(n){var e=r.useContext(c),t=e;return n&&(t="function"==typeof n?n(e):u(u({},e),n)),t},l=function(n){var e=s(n.components);return r.createElement(c.Provider,{value:e},n.children)},p={inlineCode:"code",wrapper:function(n){var e=n.children;return r.createElement(r.Fragment,{},e)}},y=r.forwardRef((function(n,e){var t=n.components,i=n.mdxType,o=n.originalType,c=n.parentName,l=a(n,["components","mdxType","originalType","parentName"]),y=s(t),d=i,f=y["".concat(c,".").concat(d)]||y[d]||p[d]||o;return t?r.createElement(f,u(u({ref:e},l),{},{components:t})):r.createElement(f,u({ref:e},l))}));function d(n,e){var t=arguments,i=e&&e.mdxType;if("string"==typeof n||i){var o=t.length,u=new Array(o);u[0]=y;var a={};for(var c in e)hasOwnProperty.call(e,c)&&(a[c]=e[c]);a.originalType=n,a.mdxType="string"==typeof n?n:i,u[1]=a;for(var s=2;s<o;s++)u[s]=t[s];return r.createElement.apply(null,u)}return r.createElement.apply(null,t)}y.displayName="MDXCreateElement"},2500:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>c,contentTitle:()=>u,default:()=>p,frontMatter:()=>o,metadata:()=>a,toc:()=>s});var r=t(7462),i=(t(7294),t(3905));const o={},u="\u51fd\u6570",a={unversionedId:"solidity/solidity_basic/function",id:"solidity/solidity_basic/function",title:"\u51fd\u6570",description:"\u6709\u51e0\u79cd\u65b9\u5f0f\u4ece\u51fd\u6570\u4e2d\u8fd4\u56de\u6570\u636e",source:"@site/docs/solidity/solidity_basic/17_function.md",sourceDirName:"solidity/solidity_basic",slug:"/solidity/solidity_basic/function",permalink:"/docs/solidity/solidity_basic/function",draft:!1,tags:[],version:"current",sidebarPosition:17,frontMatter:{},sidebar:"solidity",previous:{title:"\u6570\u636e\u5b58\u50a8\u4f4d\u7f6e - storage, memory \u548c calldata",permalink:"/docs/solidity/solidity_basic/data_locations"},next:{title:"view and pure \u51fd\u6570",permalink:"/docs/solidity/solidity_basic/view_and_pure_functions"}},c={},s=[],l={toc:s};function p(n){let{components:e,...t}=n;return(0,i.kt)("wrapper",(0,r.Z)({},l,t,{components:e,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"\u51fd\u6570"},"\u51fd\u6570"),(0,i.kt)("p",null,"\u6709\u51e0\u79cd\u65b9\u5f0f\u4ece\u51fd\u6570\u4e2d\u8fd4\u56de\u6570\u636e"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-solidity"},"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.13;\n\ncontract Function {\n    // Functions can return multiple values.\n    function returnMany()\n        public\n        pure\n        returns (\n            uint,\n            bool,\n            uint\n        )\n    {\n        return (1, true, 2);\n    }\n\n    // Return values can be named.\n    function named()\n        public\n        pure\n        returns (\n            uint x,\n            bool b,\n            uint y\n        )\n    {\n        return (1, true, 2);\n    }\n\n    // Return values can be assigned to their name.\n    // In this case the return statement can be omitted.\n    function assigned()\n        public\n        pure\n        returns (\n            uint x,\n            bool b,\n            uint y\n        )\n    {\n        x = 1;\n        b = true;\n        y = 2;\n    }\n\n    // Use destructuring assignment when calling another\n    // function that returns multiple values.\n    function destructuringAssignments()\n        public\n        pure\n        returns (\n            uint,\n            bool,\n            uint,\n            uint,\n            uint\n        )\n    {\n        (uint i, bool b, uint j) = returnMany();\n\n        // Values can be left out.\n        (uint x, , uint y) = (4, 5, 6);\n\n        return (i, b, j, x, y);\n    }\n\n    // Cannot use map for either input or output\n\n    // Can use array for input\n    function arrayInput(uint[] memory _arr) public {}\n\n    // Can use array for output\n    uint[] public arr;\n\n    function arrayOutput() public view returns (uint[] memory) {\n        return arr;\n    }\n}\n")))}p.isMDXComponent=!0}}]);