"use strict";(self.webpackChunkweb_3_blog=self.webpackChunkweb_3_blog||[]).push([[5808],{3905:(e,n,t)=>{t.d(n,{Zo:()=>d,kt:()=>m});var r=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function s(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function p(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var o=r.createContext({}),l=function(e){var n=r.useContext(o),t=n;return e&&(t="function"==typeof e?e(n):s(s({},n),e)),t},d=function(e){var n=l(e.components);return r.createElement(o.Provider,{value:n},e.children)},c={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},u=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,i=e.originalType,o=e.parentName,d=p(e,["components","mdxType","originalType","parentName"]),u=l(t),m=a,y=u["".concat(o,".").concat(m)]||u[m]||c[m]||i;return t?r.createElement(y,s(s({ref:n},d),{},{components:t})):r.createElement(y,s({ref:n},d))}));function m(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var i=t.length,s=new Array(i);s[0]=u;var p={};for(var o in n)hasOwnProperty.call(n,o)&&(p[o]=n[o]);p.originalType=e,p.mdxType="string"==typeof e?e:a,s[1]=p;for(var l=2;l<i;l++)s[l]=t[l];return r.createElement.apply(null,s)}return r.createElement.apply(null,t)}u.displayName="MDXCreateElement"},2224:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>o,contentTitle:()=>s,default:()=>c,frontMatter:()=>i,metadata:()=>p,toc:()=>l});var r=t(7462),a=(t(7294),t(3905));const i={},s="\u8fed\u4ee3mapping",p={unversionedId:"solidity/solidity_contracts/application/iterable_mapping",id:"solidity/solidity_contracts/application/iterable_mapping",title:"\u8fed\u4ee3mapping",description:"solidity \u662f\u4e0d\u652f\u6301\u76f4\u63a5\u5bf9mapping \u8fdb\u884c\u8fed\u4ee3\u7684\u3002",source:"@site/docs/solidity/solidity_contracts/application/iterable_mapping.md",sourceDirName:"solidity/solidity_contracts/application",slug:"/solidity/solidity_contracts/application/iterable_mapping",permalink:"/docs/solidity/solidity_contracts/application/iterable_mapping",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"solidity",previous:{title:"\u9ed8\u514b\u5c14\u6811",permalink:"/docs/solidity/solidity_contracts/application/merkle_tree"},next:{title:"erc20",permalink:"/docs/solidity/solidity_contracts/application/erc20"}},o={},l=[],d={toc:l};function c(e){let{components:n,...t}=e;return(0,a.kt)("wrapper",(0,r.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"\u8fed\u4ee3mapping"},"\u8fed\u4ee3mapping"),(0,a.kt)("p",null,"solidity \u662f\u4e0d\u652f\u6301\u76f4\u63a5\u5bf9mapping \u8fdb\u884c\u8fed\u4ee3\u7684\u3002"),(0,a.kt)("p",null,"\u4e0b\u9762\u7684\u5e93\u53ef\u4ee5\u4f7f\u5f97mapping \u53ef\u8fed\u4ee3\u3002"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-solidity"},"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.13;\n\nlibrary IterableMapping {\n    struct Map{\n        address[] keys;\n        mapping(address => uint) values;\n        mapping(address => uint) indexOf;\n        mapping(address => bool) inserted;\n    }\n    \n    function get(Map storage map, address key) public view returns (uint){\n        return map.values[key];\n    }\n    \n    function getKeyAtIndex(Map storage map, uint index) public view returns (address) {\n        return map.keys[index];\n    }\n    \n    function size(Map storage map) public view returns(uint){\n        return map.keys.length;\n    }\n    \n  function set(\n        Map storage map,\n        address key,\n        uint val\n    ) public {\n        if (map.inserted[key]) {\n            map.values[key] = val;\n        } else {\n            map.inserted[key] = true;\n            map.values[key] = val;\n            map.indexOf[key] = map.keys.length;\n            map.keys.push(key);\n        }\n    }\n\n    function remove(Map storage map, address key) public {\n        if (!map.inserted[key]) {\n            return;\n        }\n\n        delete map.inserted[key];\n        delete map.values[key];\n\n        uint index = map.indexOf[key];\n        uint lastIndex = map.keys.length - 1;\n        address lastKey = map.keys[lastIndex];\n\n        map.indexOf[lastKey] = index;\n        delete map.indexOf[key];\n\n        map.keys[index] = lastKey;\n        map.keys.pop();\n    }\n}\n\ncontract TestIterableMap {\n    using IterableMapping for IterableMapping.Map;\n\n    IterableMapping.Map private map;\n\n    function testIterableMap() public {\n        map.set(address(0), 0);\n        map.set(address(1), 100);\n        map.set(address(2), 200); // insert\n        map.set(address(2), 200); // update\n        map.set(address(3), 300);\n\n        for (uint i = 0; i < map.size(); i++) {\n            address key = map.getKeyAtIndex(i);\n\n            assert(map.get(key) == i * 100);\n        }\n\n        map.remove(address(1));\n\n        // keys = [address(0), address(3), address(2)]\n        assert(map.size() == 3);\n        assert(map.getKeyAtIndex(0) == address(0));\n        assert(map.getKeyAtIndex(1) == address(3));\n        assert(map.getKeyAtIndex(2) == address(2));\n    }\n}\n")))}c.isMDXComponent=!0}}]);