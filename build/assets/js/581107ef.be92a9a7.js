"use strict";(self.webpackChunkweb_3_blog=self.webpackChunkweb_3_blog||[]).push([[5899],{3905:(e,t,n)=>{n.d(t,{Zo:()=>s,kt:()=>f});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function p(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var u=r.createContext({}),c=function(e){var t=r.useContext(u),n=t;return e&&(n="function"==typeof e?e(t):p(p({},t),e)),n},s=function(e){var t=c(e.components);return r.createElement(u.Provider,{value:t},e.children)},i={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,u=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),d=c(n),f=a,m=d["".concat(u,".").concat(f)]||d[f]||i[f]||o;return n?r.createElement(m,p(p({ref:t},s),{},{components:n})):r.createElement(m,p({ref:t},s))}));function f(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,p=new Array(o);p[0]=d;var l={};for(var u in t)hasOwnProperty.call(t,u)&&(l[u]=t[u]);l.originalType=e,l.mdxType="string"==typeof e?e:a,p[1]=l;for(var c=2;c<o;c++)p[c]=n[c];return r.createElement.apply(null,p)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},7589:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>u,contentTitle:()=>p,default:()=>i,frontMatter:()=>o,metadata:()=>l,toc:()=>c});var r=n(7462),a=(n(7294),n(3905));const o={},p="\u7a0b\u5e8f\u6d3e\u751f\u5730\u5740",l={unversionedId:"rust_contract/solana/solana_workflow/\u7a0b\u5e8f\u6d3e\u751f\u5730\u5740",id:"rust_contract/solana/solana_workflow/\u7a0b\u5e8f\u6d3e\u751f\u5730\u5740",title:"\u7a0b\u5e8f\u6d3e\u751f\u5730\u5740",description:"- \u63d0\u4f9b\u94fe\u4e0a\u6784\u5efa\u7c7b\u4f3c\u54c8\u5e0c\u56fe\u7684\u7ed3\u6784",source:"@site/docs\\rust_contract\\solana\\01_solana_workflow\\\u7a0b\u5e8f\u6d3e\u751f\u5730\u5740.md",sourceDirName:"rust_contract/solana/01_solana_workflow",slug:"/rust_contract/solana/solana_workflow/\u7a0b\u5e8f\u6d3e\u751f\u5730\u5740",permalink:"/docs/rust_contract/solana/solana_workflow/\u7a0b\u5e8f\u6d3e\u751f\u5730\u5740",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"rust_contract",previous:{title:"\u8de8\u5408\u7ea6\u8c03\u7528",permalink:"/docs/rust_contract/solana/solana_workflow/\u8de8\u5408\u7ea6\u8c03\u7528"},next:{title:"\u7f16\u5199\u6d4b\u8bd5",permalink:"/docs/rust_contract/solana/solana_workflow/\u7f16\u5199\u6d4b\u8bd5"}},u={},c=[{value:"\u521b\u5efa PDA",id:"\u521b\u5efa-pda",level:2},{value:"\u4f7f\u7528PDA",id:"\u4f7f\u7528pda",level:2},{value:"\u4f7f\u7528PDA\u7c7b\u4f3c\u7684Hashmap\u7ed3\u6784",id:"\u4f7f\u7528pda\u7c7b\u4f3c\u7684hashmap\u7ed3\u6784",level:3},{value:"\u4f5c\u4e3a\u7b7e\u540d\u8005\u7684\u7a0b\u5e8f",id:"\u4f5c\u4e3a\u7b7e\u540d\u8005\u7684\u7a0b\u5e8f",level:3}],s={toc:c};function i(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"\u7a0b\u5e8f\u6d3e\u751f\u5730\u5740"},"\u7a0b\u5e8f\u6d3e\u751f\u5730\u5740"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"\u63d0\u4f9b\u94fe\u4e0a\u6784\u5efa\u7c7b\u4f3c\u54c8\u5e0c\u56fe\u7684\u7ed3\u6784"),(0,a.kt)("li",{parentName:"ul"},"\u5141\u8bb8\u7a0b\u5e8f\u5bf9\u6307\u4ee4\u8fdb\u884c\u7b7e\u540d")),(0,a.kt)("h2",{id:"\u521b\u5efa-pda"},"\u521b\u5efa PDA"),(0,a.kt)("p",null,"\u901a\u8fc7 seeds \u521b\u5efa\uff0c \u79cd\u5b50\u53ef\u4ee5\u662f\u4efb\u610f\u4e1c\u897f\u3002"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rust"},"let pda = hash(seeds, program_id);\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rust"},'// pseudo code\nfn find_pda(seeds, program_id) {\n  for bump in 0..256 {\n    let potential_pda = hash(seeds, bump, program_id);\n    if is_pubkey(potential_pda) {\n      continue;\n    }\n    return (potential_pda, bump);\n  }\n  panic!("Could not find pda after 256 tries.");\n}\n')),(0,a.kt)("h2",{id:"\u4f7f\u7528pda"},"\u4f7f\u7528PDA"),(0,a.kt)("h3",{id:"\u4f7f\u7528pda\u7c7b\u4f3c\u7684hashmap\u7ed3\u6784"},"\u4f7f\u7528PDA\u7c7b\u4f3c\u7684Hashmap\u7ed3\u6784"),(0,a.kt)("p",null,"\u5047\u8bbe\u60a8\u6b63\u5728\u6784\u5efa\u4e00\u4e2a\u6d4f\u89c8\u5668\u5185\u6e38\u620f\u5e76\u60f3\u8981\u5b58\u50a8\u4e00\u4e9b\u7528\u6237\u7edf\u8ba1\u4fe1\u606f\u3002"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rust"},"pub struct UserState {\n    level: u16,\n    name: String,\n    authority: Pubkey\n}\n")),(0,a.kt)("p",null,"\u4f7f\u7528 PDA "),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rust"},"pub struct UserStats {\n  level: u16,\n  name: String,\n  bump: u8\n}\n")),(0,a.kt)("h3",{id:"\u4f5c\u4e3a\u7b7e\u540d\u8005\u7684\u7a0b\u5e8f"},"\u4f5c\u4e3a\u7b7e\u540d\u8005\u7684\u7a0b\u5e8f"),(0,a.kt)("p",null,"PDA \u53ef\u7528\u4e8e\u5141\u8bb8\u7a0b\u5e8f\u7b7e\u7f72 CPI\u3002\u8fd9\u610f\u5473\u7740\u7a0b\u5e8f\u53ef\u4ee5\u63a7\u5236\u8d44\u4ea7\uff0c\u7136\u540e\u6839\u636e\u4ee3\u7801\u4e2d\u5b9a\u4e49\u7684\u89c4\u5219\u8fdb\u884c\u7ba1\u7406\u3002"),(0,a.kt)("p",null,"PDA \u4e0d\u662f\u516c\u94a5\uff0c\u56e0\u6b64\u5b83\u4eec\u4e0d\u53ef\u80fd\u7b7e\u7f72\u4efb\u4f55\u4e1c\u897f\u3002\u4f46\u662f\uff0cPDA \u4ecd\u7136\u53ef\u4ee5\u5bf9 CPI \u8fdb\u884c\u4f2a\u7b7e\u540d\u3002"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rust"},"use anchor_lang::prelude::*;\nuse puppet::cpi::accounts::SetData;\nuse puppet::program::Puppet;\nuse puppet::{self, Data};\n\n\ndeclare_id!(\"HmbTLCmaGvZhKnn1Zfa1JVnp7vkMV4DYVxPLWBVoN65L\");\n\n\n#[program]\nmod puppet_master {\n    use super::*;\n    pub fn pull_strings(ctx: Context<PullStrings>, bump: u8, data: u64) -> Result<()> {\n        let bump = &[bump][..];\n        puppet::cpi::set_data(\n            ctx.accounts.set_data_ctx().with_signer(&[&[bump][..]]),\n            data,\n        )\n    }\n}\n\n\n#[derive(Accounts)]\npub struct PullStrings<'info> {\n    #[account(mut)]\n    pub puppet: Account<'info, Data>,\n    pub puppet_program: Program<'info, Puppet>,\n    /// CHECK: only used as a signing PDA\n    pub authority: UncheckedAccount<'info>,\n}\n\n\nimpl<'info> PullStrings<'info> {\n    pub fn set_data_ctx(&self) -> CpiContext<'_, '_, '_, 'info, SetData<'info>> {\n        let cpi_program = self.puppet_program.to_account_info();\n        let cpi_accounts = SetData {\n            puppet: self.puppet.to_account_info(),\n            authority: self.authority.to_account_info(),\n        };\n        CpiContext::new(cpi_program, cpi_accounts)\n    }\n}\n")))}i.isMDXComponent=!0}}]);