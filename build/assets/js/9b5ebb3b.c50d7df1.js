"use strict";(self.webpackChunkweb_3_blog=self.webpackChunkweb_3_blog||[]).push([[6552],{3905:(n,e,t)=>{t.d(e,{Zo:()=>l,kt:()=>d});var r=t(7294);function a(n,e,t){return e in n?Object.defineProperty(n,e,{value:t,enumerable:!0,configurable:!0,writable:!0}):n[e]=t,n}function o(n,e){var t=Object.keys(n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(n);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable}))),t.push.apply(t,r)}return t}function c(n){for(var e=1;e<arguments.length;e++){var t=null!=arguments[e]?arguments[e]:{};e%2?o(Object(t),!0).forEach((function(e){a(n,e,t[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(n,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(e){Object.defineProperty(n,e,Object.getOwnPropertyDescriptor(t,e))}))}return n}function i(n,e){if(null==n)return{};var t,r,a=function(n,e){if(null==n)return{};var t,r,a={},o=Object.keys(n);for(r=0;r<o.length;r++)t=o[r],e.indexOf(t)>=0||(a[t]=n[t]);return a}(n,e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(n);for(r=0;r<o.length;r++)t=o[r],e.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(n,t)&&(a[t]=n[t])}return a}var s=r.createContext({}),u=function(n){var e=r.useContext(s),t=e;return n&&(t="function"==typeof n?n(e):c(c({},e),n)),t},l=function(n){var e=u(n.components);return r.createElement(s.Provider,{value:e},n.children)},p={inlineCode:"code",wrapper:function(n){var e=n.children;return r.createElement(r.Fragment,{},e)}},_=r.forwardRef((function(n,e){var t=n.components,a=n.mdxType,o=n.originalType,s=n.parentName,l=i(n,["components","mdxType","originalType","parentName"]),_=u(t),d=a,m=_["".concat(s,".").concat(d)]||_[d]||p[d]||o;return t?r.createElement(m,c(c({ref:e},l),{},{components:t})):r.createElement(m,c({ref:e},l))}));function d(n,e){var t=arguments,a=e&&e.mdxType;if("string"==typeof n||a){var o=t.length,c=new Array(o);c[0]=_;var i={};for(var s in e)hasOwnProperty.call(e,s)&&(i[s]=e[s]);i.originalType=n,i.mdxType="string"==typeof n?n:a,c[1]=i;for(var u=2;u<o;u++)c[u]=t[u];return r.createElement.apply(null,c)}return r.createElement.apply(null,t)}_.displayName="MDXCreateElement"},3265:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>s,contentTitle:()=>c,default:()=>p,frontMatter:()=>o,metadata:()=>i,toc:()=>u});var r=t(7462),a=(t(7294),t(3905));const o={},c="\u521b\u5efa\u4e00\u4e2aPDA",i={unversionedId:"rust_contract/solana/solana_\u5408\u7ea6\u5f00\u53d1\u5e93/create_pda",id:"rust_contract/solana/solana_\u5408\u7ea6\u5f00\u53d1\u5e93/create_pda",title:"\u521b\u5efa\u4e00\u4e2aPDA",description:"\u5bf9\u4e8e PDA \u6765\u8bf4\uff0c\u5b83\u662f\u5728\u94fe\u4e0a\u521b\u5efa\u7684\uff0c\u8fd9\u662f\u7531\u4e8e\u4e0d\u80fd\u4ee3\u8868 PDA \u672c\u8eab\u8fdb\u884c\u7b7e\u540d\u7684\u6027\u8d28\u9020\u6210\u7684\u3002",source:"@site/docs\\rust_contract\\solana\\02_solana_\u5408\u7ea6\u5f00\u53d1\u5e93\\create_pda.md",sourceDirName:"rust_contract/solana/02_solana_\u5408\u7ea6\u5f00\u53d1\u5e93",slug:"/rust_contract/solana/solana_\u5408\u7ea6\u5f00\u53d1\u5e93/create_pda",permalink:"/docs/rust_contract/solana/solana_\u5408\u7ea6\u5f00\u53d1\u5e93/create_pda",draft:!1,tags:[],version:"current",frontMatter:{}},s={},u=[],l={toc:u};function p(n){let{components:e,...t}=n;return(0,a.kt)("wrapper",(0,r.Z)({},l,t,{components:e,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"\u521b\u5efa\u4e00\u4e2apda"},"\u521b\u5efa\u4e00\u4e2aPDA"),(0,a.kt)("p",null,"\u5bf9\u4e8e PDA \u6765\u8bf4\uff0c\u5b83\u662f\u5728\u94fe\u4e0a\u521b\u5efa\u7684\uff0c\u8fd9\u662f\u7531\u4e8e\u4e0d\u80fd\u4ee3\u8868 PDA \u672c\u8eab\u8fdb\u884c\u7b7e\u540d\u7684\u6027\u8d28\u9020\u6210\u7684\u3002"),(0,a.kt)("p",null,"\u56e0\u6b64\uff0c\u6211\u4eec\u4f7f\u7528\u8c03\u7528 _ signed \u6765\u4f20\u9012 PDA \u7684\u79cd\u5b50\uff0c\u4ee5\u53ca\u5bfc\u81f4\u521b\u5efa PDA \u5e10\u6237\u7684\u8d44\u91d1\u5e10\u6237\u7b7e\u540d\u3002"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rust"},'use borsh::{BorshDeserialize, BorshSerialize};\nuse solana_program::{\n    account_info::{next_account_info, AccountInfo},\n    entrypoint,\n    entrypoint::ProgramResult,\n    program::invoke_signed,\n    program_error::ProgramError,\n    pubkey::Pubkey,\n    rent::Rent,\n    system_instruction,\n    sysvar::Sysvar,\n};\n\nentrypoint!(process_instruction);\n\n#[derive(BorshSerialize, BorshDeserialize, Debug)]\npub struct HelloState {\n    is_initialized: bool,\n}\n\n// Accounts required\n/// 1. [signer, writable] Funding account\n/// 2. [writable] PDA account\n/// 3. [] System Program\npub fn process_instruction(\n    program_id: &Pubkey,\n    accounts: &[AccountInfo],\n    instruction_data: &[u8],\n)-> ProgramResult {\n    const ACCOUNT_DATA_LEN: usize = 1;\n\n    let accounts_iter = &mut accounts.iter();\n    // Getting required accounts\n    let funding_account = next_account_info(accounts_iter)?;\n    let pda_account = next_account_info(accounts_iter)?;\n    let system_program = next_account_info(accounts_iter)?;\n    \n    // getting pad bump from instruction data\n    let (pda_bump, _) = instruction_data.split_first().ok_or(ProgramError::InvalidInstructionData)?;\n    \n    // checking if passed PDA and expected PDA arr equal\n    let signers_seeds: &[&[u8], 3] = &[\n        b"customaddress",\n        &funding_account.key.to_bytes(),\n        &[*pda_bump],\n    ];\n    \n    let pda = Pubkey::create_program_address(signers_seeds, program_id)?;\n    \n    if pad.ne(&pda_account.key){\n        return Err(ProgramError::InvalidAccountData);\n    }\n    \n    // Assessing required lamports and creating transaction instruction\n    let lamports_required = Rent::get()?.minimum_balance(ACCOUNT_DATA_LEN);\n    let create_pda_account_ix = system_instruction::create_account(\n        &funding_account.key,\n        &pda_account.key,\n        lamports_required,\n        ACCOUNT_DATA_LEN.try_into().unwrap(),\n        &program_id,\n    )\n    \n     // Invoking the instruction but with PDAs as additional signer\n    invoke_signed(\n        &create_pda_account_ix,\n        &[\n            funding_account.clone(),\n            pda_account.clone(),\n            system_program.clone(),\n        ],\n        &[signers_seeds],\n    )?;\n    \n    // Setting state for PDA\n    let mut pda_account_state = HelloState::try_from_slice(&pda_account.data.borrow())?;\n    pda_account_state.is_initialized = true;\n    pda_account_state.serialize(&mut &mut pda_account.data.borrow_mut()[..])?;\n\n    Ok(())\n}\n')))}p.isMDXComponent=!0}}]);