"use strict";(self.webpackChunkweb_3_blog=self.webpackChunkweb_3_blog||[]).push([[439],{3905:(e,n,t)=>{t.d(n,{Zo:()=>p,kt:()=>m});var r=t(7294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function a(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,r,i=function(e,n){if(null==e)return{};var t,r,i={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var s=r.createContext({}),c=function(e){var n=r.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):a(a({},n),e)),t},p=function(e){var n=c(e.components);return r.createElement(s.Provider,{value:n},e.children)},d={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},u=r.forwardRef((function(e,n){var t=e.components,i=e.mdxType,o=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),u=c(t),m=i,b=u["".concat(s,".").concat(m)]||u[m]||d[m]||o;return t?r.createElement(b,a(a({ref:n},p),{},{components:t})):r.createElement(b,a({ref:n},p))}));function m(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var o=t.length,a=new Array(o);a[0]=u;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l.mdxType="string"==typeof e?e:i,a[1]=l;for(var c=2;c<o;c++)a[c]=t[c];return r.createElement.apply(null,a)}return r.createElement.apply(null,t)}u.displayName="MDXCreateElement"},4093:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>a,default:()=>d,frontMatter:()=>o,metadata:()=>l,toc:()=>c});var r=t(7462),i=(t(7294),t(3905));const o={},a="\u8de8\u94fe\u5408\u7ea6",l={unversionedId:"solidity/solidity_contracts/openzepplin/crosschain",id:"solidity/solidity_contracts/openzepplin/crosschain",title:"\u8de8\u94fe\u5408\u7ea6",description:"\u6784\u5efa\u7531\u5916\u90e8\u94fe\u4e0a\u7684\u7ba1\u7406\u8005\u63a7\u5236\u7684\u53ef\u5347\u7ea7\u548c\u53ef\u94f8\u9020\u7684 ERC20 \u4ee3\u5e01\u3002",source:"@site/docs/solidity/solidity_contracts/openzepplin/04_crosschain.md",sourceDirName:"solidity/solidity_contracts/openzepplin",slug:"/solidity/solidity_contracts/openzepplin/crosschain",permalink:"/docs/solidity/solidity_contracts/openzepplin/crosschain",draft:!1,tags:[],version:"current",sidebarPosition:4,frontMatter:{},sidebar:"solidity",previous:{title:"\u6cbb\u7406\u5408\u7ea6",permalink:"/docs/solidity/solidity_contracts/openzepplin/governance"},next:{title:"\u5de5\u5177\u7c7b\u5408\u7ea6",permalink:"/docs/solidity/solidity_contracts/openzepplin/uitilities"}},s={},c=[{value:"ERC20\u5408\u7ea6",id:"erc20\u5408\u7ea6",level:3}],p={toc:c};function d(e){let{components:n,...t}=e;return(0,i.kt)("wrapper",(0,r.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"\u8de8\u94fe\u5408\u7ea6"},"\u8de8\u94fe\u5408\u7ea6"),(0,i.kt)("p",null,(0,i.kt)("em",{parentName:"p"},"\u6784\u5efa\u7531\u5916\u90e8\u94fe\u4e0a\u7684\u7ba1\u7406\u8005\u63a7\u5236\u7684\u53ef\u5347\u7ea7\u548c\u53ef\u94f8\u9020\u7684 ERC20 \u4ee3\u5e01"),"\u3002"),(0,i.kt)("h3",{id:"erc20\u5408\u7ea6"},"ERC20\u5408\u7ea6"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-solidity"},'// SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\n\nimport "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol";\nimport "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol";\nimport "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol";\n\ncontract MyToken is Initializable, ERC20Upgradeable, UUPSUpgradeable {\n    address public owner;\n    \n    modifier onlyOwner() {\n        require(owner == _msgSender(), "Not authorized");\n        _;\n    }\n    \n    constructor() initializer{}\n    function initialize(address initialOwner) initializer public {\n        __ERC20_init("MyToken", "MTK");\n        __UUPSUpgradeable_init();\n\n        owner = initialOwner;\n    }\n    \n     function mint(address to, uint256 amount) public onlyOwner {\n        _mint(to, amount);\n    }\n\n    function _authorizeUpgrade(address newImplementation) internal override onlyOwner {\n    }\n}\n')),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-solidity"},'// SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\n\nimport "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol";\nimport "@openzeppelin/contracts-upgradeable/access/AccessControlCrossChainUpgradeable.sol";\nimport "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol";\nimport "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol";\n\nabstract contract MyTokenCrossChain is Initializable, ERC20Upgradeable, AccessControlCrossChainUpgradeable, UUPSUpgradeable {\n    bytes32 public constant MINTER_ROLE = keccak256("MINTER_ROLE");\n    bytes32 public constant UPGRADER_ROLE = keccak256("UPGRADER_ROLE");\n\n    /// @custom:oz-upgrades-unsafe-allow constructor\n    constructor() initializer {}\n\n    function initialize(address initialOwner) initializer public {\n        __ERC20_init("MyToken", "MTK");\n        __AccessControl_init();\n        __UUPSUpgradeable_init();\n\n        _grantRole(_crossChainRoleAlias(DEFAULT_ADMIN_ROLE), initialOwner); // initialOwner is on a remote chain\n    }\n\n    function mint(address to, uint256 amount) public onlyRole(MINTER_ROLE) {\n        _mint(to, amount);\n    }\n\n    function _authorizeUpgrade(address newImplementation) internal onlyRole(UPGRADER_ROLE) override {\n    }\n}\n\nimport "@openzeppelin/contracts-upgradeable/crosschain/amb/CrossChainEnabledAMB.sol";\n\ncontract MyTokenXDAI is\n    MyTokenCrossChain,\n    CrossChainEnabledAMB(0x75Df5AF045d91108662D8080fD1FEFAd6aA0bb59)\n{}\n\nimport "@openzeppelin/contracts-upgradeable/crosschain/optimismCrossChainEnabledOptimism.sol";\n\ncontract MyTokenOptimism is\n    MyTokenCrossChain,\n    CrossChainEnabledOptimism(0x25ace71c97B33Cc4729CF772ae268934F7ab5fA1)\n{}\n')))}d.isMDXComponent=!0}}]);