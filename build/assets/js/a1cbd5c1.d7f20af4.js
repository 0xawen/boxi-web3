"use strict";(self.webpackChunkweb_3_blog=self.webpackChunkweb_3_blog||[]).push([[3049],{3905:(n,e,t)=>{t.d(e,{Zo:()=>c,kt:()=>m});var r=t(7294);function a(n,e,t){return e in n?Object.defineProperty(n,e,{value:t,enumerable:!0,configurable:!0,writable:!0}):n[e]=t,n}function o(n,e){var t=Object.keys(n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(n);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable}))),t.push.apply(t,r)}return t}function i(n){for(var e=1;e<arguments.length;e++){var t=null!=arguments[e]?arguments[e]:{};e%2?o(Object(t),!0).forEach((function(e){a(n,e,t[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(n,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(e){Object.defineProperty(n,e,Object.getOwnPropertyDescriptor(t,e))}))}return n}function l(n,e){if(null==n)return{};var t,r,a=function(n,e){if(null==n)return{};var t,r,a={},o=Object.keys(n);for(r=0;r<o.length;r++)t=o[r],e.indexOf(t)>=0||(a[t]=n[t]);return a}(n,e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(n);for(r=0;r<o.length;r++)t=o[r],e.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(n,t)&&(a[t]=n[t])}return a}var s=r.createContext({}),u=function(n){var e=r.useContext(s),t=e;return n&&(t="function"==typeof n?n(e):i(i({},e),n)),t},c=function(n){var e=u(n.components);return r.createElement(s.Provider,{value:e},n.children)},p={inlineCode:"code",wrapper:function(n){var e=n.children;return r.createElement(r.Fragment,{},e)}},f=r.forwardRef((function(n,e){var t=n.components,a=n.mdxType,o=n.originalType,s=n.parentName,c=l(n,["components","mdxType","originalType","parentName"]),f=u(t),m=a,d=f["".concat(s,".").concat(m)]||f[m]||p[m]||o;return t?r.createElement(d,i(i({ref:e},c),{},{components:t})):r.createElement(d,i({ref:e},c))}));function m(n,e){var t=arguments,a=e&&e.mdxType;if("string"==typeof n||a){var o=t.length,i=new Array(o);i[0]=f;var l={};for(var s in e)hasOwnProperty.call(e,s)&&(l[s]=e[s]);l.originalType=n,l.mdxType="string"==typeof n?n:a,i[1]=l;for(var u=2;u<o;u++)i[u]=t[u];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}f.displayName="MDXCreateElement"},5357:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>s,contentTitle:()=>i,default:()=>p,frontMatter:()=>o,metadata:()=>l,toc:()=>u});var r=t(7462),a=(t(7294),t(3905));const o={},i="\u6d41\u7a0b\u63a7\u5236",l={unversionedId:"rust/rust\u57fa\u7840\u77e5\u8bc6/\u6d41\u7a0b\u63a7\u5236",id:"rust/rust\u57fa\u7840\u77e5\u8bc6/\u6d41\u7a0b\u63a7\u5236",title:"\u6d41\u7a0b\u63a7\u5236",description:"if/else",source:"@site/docs\\rust\\rust\u57fa\u7840\u77e5\u8bc6\\\u6d41\u7a0b\u63a7\u5236.md",sourceDirName:"rust/rust\u57fa\u7840\u77e5\u8bc6",slug:"/rust/rust\u57fa\u7840\u77e5\u8bc6/\u6d41\u7a0b\u63a7\u5236",permalink:"/docs/rust/rust\u57fa\u7840\u77e5\u8bc6/\u6d41\u7a0b\u63a7\u5236",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"rust",previous:{title:"\u7c7b\u578b\u8f6c\u6362",permalink:"/docs/rust/rust\u57fa\u7840\u77e5\u8bc6/\u7c7b\u578b\u8f6c\u6362"},next:{title:"\u6a21\u5f0f\u5339\u914d match",permalink:"/docs/rust/rust\u57fa\u7840\u77e5\u8bc6/\u6a21\u5f0f\u5339\u914d"}},s={},u=[{value:"if/else",id:"ifelse",level:3},{value:"loop \u5faa\u73af",id:"loop-\u5faa\u73af",level:3},{value:"while \u5faa\u73af",id:"while-\u5faa\u73af",level:3},{value:"for \u5faa\u73af\u548c\u533a\u95f4/\u8fed\u4ee3\u5668",id:"for-\u5faa\u73af\u548c\u533a\u95f4\u8fed\u4ee3\u5668",level:3}],c={toc:u};function p(n){let{components:e,...t}=n;return(0,a.kt)("wrapper",(0,r.Z)({},c,t,{components:e,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"\u6d41\u7a0b\u63a7\u5236"},"\u6d41\u7a0b\u63a7\u5236"),(0,a.kt)("h3",{id:"ifelse"},"if/else"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rust"},'fn main() {\n    let n = 5;\n    if n < 0 {\n        println!{"{}", n};\n    }else if n > 0 {\n         println!{"{}", n};\n    }else {\n        println!("{} is zero", n);\n    }\n    \n    let big_n = \n        if n < 10 && n > -10 {\n          10 * n  \n        }else {\n           n / 2  \n        };\n}\n')),(0,a.kt)("h3",{id:"loop-\u5faa\u73af"},"loop \u5faa\u73af"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rust"},"// \u5e38\u89c4\u7528\u6cd5\nfn main() {\n    let mut count =0u32;\n    // \u65e0\u7ebf\u5faa\u73af\n    loop{\n        count += 1;\n        if count == 3 {\n            // \u8df3\u8fc7\u8fd9\u6b21\u5faa\u73af\n            continue;\n        }\n        if count == 5 {\n            // \u9000\u51fa\u5faa\u73af\n            break;\n        }\n    }\n}\n// \u4eceloop\u4e2d\u8fd4\u56de\nfn main() {\n    let mut counter = 0;\n    \n    let result = loop {\n        counter += 1;\n        \n        if counter == 10 {\n            break count * 2;\n        }\n    };\n    assert_eq!(result, 20);\n}\n")),(0,a.kt)("h3",{id:"while-\u5faa\u73af"},"while \u5faa\u73af"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rust"},'// \u5f53\u6761\u4ef6\u771f\u65f6\u5019\u5faa\u73af\nfn mian() {\n    let mut n = 1;\n    \n    while n < 101 {\n        if n % 15 == 0 {\n            println!("xxx");\n        }else {\n            println!("xxx");\n        }\n        n += 1;\n    }\n}\n')),(0,a.kt)("h3",{id:"for-\u5faa\u73af\u548c\u533a\u95f4\u8fed\u4ee3\u5668"},"for \u5faa\u73af\u548c\u533a\u95f4/\u8fed\u4ee3\u5668"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rust"},'// - for\u4e0e\u533a\u95f4\nfn mian() {\n    // 1..101 / 1..=100\n    for n in 1..101 {\n        if n % 15 == 0 {\n            println!("xxx");\n        }else {\n            println!("xxx");\n        }\n    }\n}\n\n// - for \u4e0e\u8fed\u4ee3\u5668\nfn main() {\n    // \u4e00\u822c\u5c06\u96c6\u5408\u8f6c\u6362\u6210\u4e00\u4e2a\u8fed\u4ee3\u5668\uff0c\u7136\u540e\u4f7f\u7528for \u8fdb\u884c\u5faa\u73af\n    // into_iter\n    // iter\n    // iter_mut\n    \n    // iter - \u6bcf\u6b21\u8fed\u4ee3\u501f\u7528\u96c6\u5408\u4e2d\u7684\u4e00\u4e2a\u5143\u7d20\n    let names = vec!["bob", "frank", "ferris"];\n    for name in name.iter() {\n        match name {\n            &"Ferris" => println!("xxx"),\n            _ => println!("{}",name),\n        }\n    }\n    \n    // into_iter - \u6d88\u8017\u96c6\u5408\u3002\u6bcf\u6b21\u8fed\u4ee3\u4e2d\uff0c\u96c6\u5408\u6570\u636e\u4f1a\u88ab\u63d0\u4f9b\uff0c\u4e00\u65e6\u6d88\u8017\u5b8c\uff0c\u4e4b\u540e\u5c31\u65e0\u6cd5\u4f7f\u7528\n    // \u56e0\u4e3a\u96c6\u5408\u4e2d\u7684\u6570\u636e\u88ab move \n    let names2 = vec!["bob", "frank", "ferris"];\n    \n    for name in names2.into_iter() {\n          match name {\n            "Ferris" => println!("There is a rustacean among us!"),\n            _ => println!("Hello {}", name),\n        }\n    }\n    \n    // iter_mut \u53ef\u53d8\u5730\u501f\u7528\u96c6\u5408\u4e2d\u7684\u5143\u7d20\uff0c\u5141\u8bb8\u96c6\u5408\u5c31\u5730\u88ab\u4fee\u6539\n    let names3 = vec!["bob", "frank", "ferris"];\n    \n    for name int names3.iter_mut() {\n        *name = match name {\n            &mut "Ferris" => "There is a rustacean among us!",\n            _ => "Hello",\n        }\n    }\n    println!("names: {:?}", names);\n    \n}\n')))}p.isMDXComponent=!0}}]);