"use strict";(self.webpackChunkweb_3_blog=self.webpackChunkweb_3_blog||[]).push([[5562],{3905:(e,n,t)=>{t.d(n,{Zo:()=>c,kt:()=>p});var a=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function s(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var l=a.createContext({}),d=function(e){var n=a.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):s(s({},n),e)),t},c=function(e){var n=d(e.components);return a.createElement(l.Provider,{value:n},e.children)},h={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},u=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,o=e.originalType,l=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),u=d(t),p=r,k=u["".concat(l,".").concat(p)]||u[p]||h[p]||o;return t?a.createElement(k,s(s({ref:n},c),{},{components:t})):a.createElement(k,s({ref:n},c))}));function p(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var o=t.length,s=new Array(o);s[0]=u;var i={};for(var l in n)hasOwnProperty.call(n,l)&&(i[l]=n[l]);i.originalType=e,i.mdxType="string"==typeof e?e:r,s[1]=i;for(var d=2;d<o;d++)s[d]=t[d];return a.createElement.apply(null,s)}return a.createElement.apply(null,t)}u.displayName="MDXCreateElement"},2336:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>s,default:()=>h,frontMatter:()=>o,metadata:()=>i,toc:()=>d});var a=t(7462),r=(t(7294),t(3905));const o={},s="work on hardhat",i={unversionedId:"solidity/hardhat_workflow/hardhat_workflow_example",id:"solidity/hardhat_workflow/hardhat_workflow_example",title:"work on hardhat",description:"\u5b98\u7f51//hardhat.org/tutorial",source:"@site/docs/solidity/hardhat_workflow/hardhat_workflow_example.md",sourceDirName:"solidity/hardhat_workflow",slug:"/solidity/hardhat_workflow/hardhat_workflow_example",permalink:"/docs/solidity/hardhat_workflow/hardhat_workflow_example",draft:!1,tags:[],version:"current",frontMatter:{}},l={},d=[{value:"1 \u8bbe\u7f6e\u73af\u5883",id:"1-\u8bbe\u7f6e\u73af\u5883",level:2},{value:"2 \u521b\u5efa\u4e00\u4e2a\u9879\u76ee",id:"2-\u521b\u5efa\u4e00\u4e2a\u9879\u76ee",level:2},{value:"3 \u5f00\u53d1\u5e76\u7f16\u8bd1\u5408\u7ea6",id:"3-\u5f00\u53d1\u5e76\u7f16\u8bd1\u5408\u7ea6",level:2},{value:"4 \u6d4b\u8bd5\u5408\u7ea6",id:"4-\u6d4b\u8bd5\u5408\u7ea6",level:2},{value:"5 debug \u5408\u7ea6",id:"5-debug-\u5408\u7ea6",level:2},{value:"6 \u90e8\u7f72\u5408\u7ea6",id:"6-\u90e8\u7f72\u5408\u7ea6",level:2},{value:"\u6837\u677f\u9879\u76ee",id:"\u6837\u677f\u9879\u76ee",level:3}],c={toc:d};function h(e){let{components:n,...t}=e;return(0,r.kt)("wrapper",(0,a.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"work-on-hardhat"},"work on hardhat"),(0,r.kt)("p",null,"\u5b98\u7f51:",(0,r.kt)("a",{parentName:"p",href:"https://hardhat.org/tutorial"},"https://hardhat.org/tutorial")),(0,r.kt)("p",null,"\u4e2d\u6587\u6559\u7a0b:",(0,r.kt)("a",{parentName:"p",href:"http://blog.hubwiz.com/2021/02/26/hardhat-beginner-tutorial/"},"http://blog.hubwiz.com/2021/02/26/hardhat-beginner-tutorial/")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"\u8bbe\u7f6e node.js \u73af\u5883"),(0,r.kt)("li",{parentName:"ul"},"\u914d\u7f6e hardhat \u9879\u76ee"),(0,r.kt)("li",{parentName:"ul"},"\u5b9e\u73b0\u4e00\u4e2asolidity\u4ee3\u5e01\u5408\u7ea6"),(0,r.kt)("li",{parentName:"ul"},"\u4f7f\u7528",(0,r.kt)("inlineCode",{parentName:"li"},"console.log()")," \u5728 hardhat \u7f51\u7edc\u4e2d debug"),(0,r.kt)("li",{parentName:"ul"},"\u5728 hardhat, testnetwork \u90e8\u7f72\u5408\u7ea6")),(0,r.kt)("h2",{id:"1-\u8bbe\u7f6e\u73af\u5883"},"1 \u8bbe\u7f6e\u73af\u5883"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-text"},"curl -fsSL https://deb.nodesource.com/setup_18.x | sudo -E bash -\nsudo apt-get install -y nodejs\n")),(0,r.kt)("h2",{id:"2-\u521b\u5efa\u4e00\u4e2a\u9879\u76ee"},"2 \u521b\u5efa\u4e00\u4e2a\u9879\u76ee"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-text"},"mkdir hardhat-tutorial\ncd hardhat-tutorial\nnpm init \nnpm install --save-dev hardhat // \u5b89\u88c5 hardhat\n\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-text"},'$ npx hardhat // \u8fd0\u884c\uff0c\u521b\u5efa\u4e00\u4e2a\u7a7a\u9879\u76ee\n888    888                      888 888               888\n888    888                      888 888               888\n888    888                      888 888               888\n8888888888  8888b.  888d888 .d88888 88888b.   8888b.  888888\n888    888     "88b 888P"  d88" 888 888 "88b     "88b 888\n888    888 .d888888 888    888  888 888  888 .d888888 888\n888    888 888  888 888    Y88b 888 888  888 888  888 Y88b.\n888    888 "Y888888 888     "Y88888 888  888 "Y888888  "Y888\n\n\ud83d\udc77 Welcome to Hardhat v2.9.9 \ud83d\udc77\u200d\n\n? What do you want to do? \u2026\n  Create a JavaScript project\n  Create a TypeScript project\n\u276f Create an empty hardhat.config.js\n  Quit\n')),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"hardhat.config.js"),"  \u5168\u90e8\u7684\u914d\u7f6e\u90fd\u5728\u8fd9\u91cc"),(0,r.kt)("p",null,"\u4efb\u52a1 \u548c \u63d2\u4ef6 \u662f hardhat \u7684\u6838\u5fc3\u7406\u5ff5\u3002"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-text"},"// \u5b89\u88c5\u63d2\u4ef6\nnpm install --save-dev @nomicfoundation/hardhat-toolbox\n")),(0,r.kt)("h2",{id:"3-\u5f00\u53d1\u5e76\u7f16\u8bd1\u5408\u7ea6"},"3 \u5f00\u53d1\u5e76\u7f16\u8bd1\u5408\u7ea6"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-text"},"// \u521b\u5efa contracts \u76ee\u5f55\nmkdir contracts\ntouch Token.sol\n")),(0,r.kt)("p",null,"\u5f00\u53d1\u5408\u7ea6"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-solidity"},'/SPDX-License-Identifier: UNLICENSED\n\n// Solidity files have to start with this pragma.\n// It will be used by the Solidity compiler to validate its version.\npragma solidity ^0.8.9;\n\n\n// This is the main building block for smart contract-example.\ncontract Token {\n    // Some string type variables to identify the token.\n    string public name = "My Hardhat Token";\n    string public symbol = "MHT";\n\n    // The fixed amount of tokens, stored in an unsigned integer type variable.\n    uint256 public totalSupply = 1000000;\n\n    // An address type variable is used to store ethereum accounts.\n    address public owner;\n\n    // A mapping is a key/value map. Here we store each account\'s balance.\n    mapping(address => uint256) balances;\n\n    // The Transfer event helps off-chain aplications understand\n    // what happens within your contract.\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n\n    /**\n     * Contract initialization.\n     */\n    constructor() {\n        // The totalSupply is assigned to the transaction sender, which is the\n        // account that is deploying the contract.\n        balances[msg.sender] = totalSupply;\n        owner = msg.sender;\n    }\n\n    /**\n     * A function to transfer tokens.\n     *\n     * The `external` modifier makes a function *only* callable from *outside*\n     * the contract.\n     */\n    function transfer(address to, uint256 amount) external {\n        // Check if the transaction sender has enough tokens.\n        // If `require`\'s first argument evaluates to `false` then the\n        // transaction will revert.\n        require(balances[msg.sender] >= amount, "Not enough tokens");\n\n        // Transfer the amount.\n        balances[msg.sender] -= amount;\n        balances[to] += amount;\n\n        // Notify off-chain applications of the transfer.\n        emit Transfer(msg.sender, to, amount);\n    }\n\n    /**\n     * Read only function to retrieve the token balance of a given account.\n     *\n     * The `view` modifier indicates that it doesn\'t modify the contract\'s\n     * state, which allows us to call it without executing a transaction.\n     */\n    function balanceOf(address account) external view returns (uint256) {\n        return balances[account];\n    }\n}\n')),(0,r.kt)("p",null,"\u7f16\u8bd1\u5408\u7ea6"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-text"},"npx hardhat compile\n")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"compile")," \u4efb\u52a1\u662f\u5185\u7f6e\u7684\u4efb\u52a1\u4e4b\u4e4b\u4e00"),(0,r.kt)("h2",{id:"4-\u6d4b\u8bd5\u5408\u7ea6"},"4 \u6d4b\u8bd5\u5408\u7ea6"),(0,r.kt)("p",null,"\u4f7f\u7528 hardhat network \u6d4b\u8bd5\u5408\u7ea6\u3002"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"ethers.js interact"),(0,r.kt)("li",{parentName:"ul"},"mocha   runner\n\u7f16\u5199\u6d4b\u8bd5")),(0,r.kt)("p",null,"\u521b\u5efa ",(0,r.kt)("inlineCode",{parentName:"p"},"test")," \u76ee\u5f55\uff0c\u521b\u5efa Token.js"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'const { ethers } = require("hardhat_workflow");\nconst {expect} = require("chai");\n\ndescribe("Token contract", function() {\n  it(\'should assign the total supply for token to the owner\',async function() {\n    const [owner] = await ethers.getSigners();\n    \n    const Token = await ethers.getContractFactory("Token");\n    \n    const hardhatToken = await Token.Deploy();\n    \n    const ownerBalance = await hardhatToken.balanceOf(owner.address);\n    \n    expect(await  hardhatToken.totalSupply()).to.equal(ownerBalance);\n\n  }); \n});\n')),(0,r.kt)("p",null,"\u8fd0\u884c\u6d4b\u8bd5"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-text"},"npx hardhat test\n")),(0,r.kt)("p",null,"\u4f7f\u7528 fixtures \u590d\u7528\u5e38\u7528\u8bbe\u7f6e"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'const { loadFixture } = require("@nomicfoundation/hardhat_workflow-network-helpers");\nconst { expect } = require("chai");\n\ndescribe("Token contract", function () {\n  async function deployTokenFixture() {\n    const Token = await ethers.getContractFactory("Token");\n    const [owner, addr1, addr2] = await ethers.getSigners();\n\n    const hardhatToken = await Token.deploy();\n\n    await hardhatToken.deployed();\n\n    // Fixtures can return anything you consider useful for your tests\n    return { Token, hardhatToken, owner, addr1, addr2 };\n  }\n\n  it("Should assign the total supply of tokens to the owner", async function () {\n    const { hardhatToken, owner } = await loadFixture(deployTokenFixture);\n\n    const ownerBalance = await hardhatToken.balanceOf(owner.address);\n    expect(await hardhatToken.totalSupply()).to.equal(ownerBalance);\n  });\n\n  it("Should transfer tokens between accounts", async function () {\n    const { hardhatToken, owner, addr1, addr2 } = await loadFixture(\n      deployTokenFixture\n    );\n\n    // Transfer 50 tokens from owner to addr1\n    await expect(\n      hardhatToken.transfer(addr1.address, 50)\n    ).to.changeTokenBalances(hardhatToken, [owner, addr1], [-50, 50]);\n\n    // Transfer 50 tokens from addr1 to addr2\n    // We use .connect(signer) to send a transaction from another account\n    await expect(\n      hardhatToken.connect(addr1).transfer(addr2.address, 50)\n    ).to.changeTokenBalances(hardhatToken, [addr1, addr2], [-50, 50]);\n  });\n});\n')),(0,r.kt)("p",null,"\u5168\u8986\u76d6\u6d4b\u8bd5"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'// This is an example test file. Hardhat will run every *.js file in `test/`,\n// so feel free to add new ones.\n\n// Hardhat tests are normally written with Mocha and Chai.\n\n// We import Chai to use its asserting functions here.\nconst { expect } = require("chai");\n\n// We use `loadFixture` to share common setups (or fixtures) between tests.\n// Using this simplifies your tests and makes them run faster, by taking\n// advantage of Hardhat Network\'s snapshot functionality.\nconst { loadFixture } = require("@nomicfoundation/hardhat_workflow-network-helpers");\n\n// `describe` is a Mocha function that allows you to organize your tests.\n// Having your tests organized makes debugging them easier. All Mocha\n// functions are available in the global scope.\n//\n// `describe` receives the name of a section of your test suite, and a\n// callback. The callback must define the tests of that section. This callback\n// can\'t be an async function.\ndescribe("Token contract", function () {\n  // We define a fixture to reuse the same setup in every test. We use\n  // loadFixture to run this setup once, snapshot that state, and reset Hardhat\n  // Network to that snapshopt in every test.\n  async function deployTokenFixture() {\n    // Get the ContractFactory and Signers here.\n    const Token = await ethers.getContractFactory("Token");\n    const [owner, addr1, addr2] = await ethers.getSigners();\n\n    // To deploy our contract, we just have to call Token.deploy() and await\n    // its deployed() method, which happens onces its transaction has been\n    // mined.\n    const hardhatToken = await Token.deploy();\n\n    await hardhatToken.deployed();\n\n    // Fixtures can return anything you consider useful for your tests\n    return { Token, hardhatToken, owner, addr1, addr2 };\n  }\n\n  // You can nest describe calls to create subsections.\n  describe("Deployment", function () {\n    // `it` is another Mocha function. This is the one you use to define each\n    // of your tests. It receives the test name, and a callback function.\n    //\n    // If the callback function is async, Mocha will `await` it.\n    it("Should set the right owner", async function () {\n      // We use loadFixture to setup our environment, and then assert that\n      // things went well\n      const { hardhatToken, owner } = await loadFixture(deployTokenFixture);\n\n      // `expect` receives a value and wraps it in an assertion object. These\n      // objects have a lot of utility methods to assert values.\n\n      // This test expects the owner variable stored in the contract to be\n      // equal to our Signer\'s owner.\n      expect(await hardhatToken.owner()).to.equal(owner.address);\n    });\n\n    it("Should assign the total supply of tokens to the owner", async function () {\n      const { hardhatToken, owner } = await loadFixture(deployTokenFixture);\n      const ownerBalance = await hardhatToken.balanceOf(owner.address);\n      expect(await hardhatToken.totalSupply()).to.equal(ownerBalance);\n    });\n  });\n\n  describe("Transactions", function () {\n    it("Should transfer tokens between accounts", async function () {\n      const { hardhatToken, owner, addr1, addr2 } = await loadFixture(\n        deployTokenFixture\n      );\n      // Transfer 50 tokens from owner to addr1\n      await expect(\n        hardhatToken.transfer(addr1.address, 50)\n      ).to.changeTokenBalances(hardhatToken, [owner, addr1], [-50, 50]);\n\n      // Transfer 50 tokens from addr1 to addr2\n      // We use .connect(signer) to send a transaction from another account\n      await expect(\n        hardhatToken.connect(addr1).transfer(addr2.address, 50)\n      ).to.changeTokenBalances(hardhatToken, [addr1, addr2], [-50, 50]);\n    });\n\n    it("should emit Transfer events", async function () {\n      const { hardhatToken, owner, addr1, addr2 } = await loadFixture(\n        deployTokenFixture\n      );\n\n      // Transfer 50 tokens from owner to addr1\n      await expect(hardhatToken.transfer(addr1.address, 50))\n        .to.emit(hardhatToken, "Transfer")\n        .withArgs(owner.address, addr1.address, 50);\n\n      // Transfer 50 tokens from addr1 to addr2\n      // We use .connect(signer) to send a transaction from another account\n      await expect(hardhatToken.connect(addr1).transfer(addr2.address, 50))\n        .to.emit(hardhatToken, "Transfer")\n        .withArgs(addr1.address, addr2.address, 50);\n    });\n\n    it("Should fail if sender doesn\'t have enough tokens", async function () {\n      const { hardhatToken, owner, addr1 } = await loadFixture(\n        deployTokenFixture\n      );\n      const initialOwnerBalance = await hardhatToken.balanceOf(owner.address);\n\n      // Try to send 1 token from addr1 (0 tokens) to owner (1000 tokens).\n      // `require` will evaluate false and revert the transaction.\n      await expect(\n        hardhatToken.connect(addr1).transfer(owner.address, 1)\n      ).to.be.revertedWith("Not enough tokens");\n\n      // Owner balance shouldn\'t have changed.\n      expect(await hardhatToken.balanceOf(owner.address)).to.equal(\n        initialOwnerBalance\n      );\n    });\n  });\n});\n')),(0,r.kt)("h2",{id:"5-debug-\u5408\u7ea6"},"5 debug \u5408\u7ea6"),(0,r.kt)("p",null,"\u4f7f\u7528 ",(0,r.kt)("inlineCode",{parentName:"p"},"console.log")," debug"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-solidity"},'pragma solidity ^0.8.9;\n\nimport "hardhat/console.sol";\n\ncontract Token {\n  //...\n}\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-solidity"},'function transfer(address to, uint256 amount) external {\n    require(balances[msg.sender] >= amount, "Not enough tokens");\n\n    console.log(\n        "Transferring from %s to %s %s tokens",\n        msg.sender,\n        to,\n        amount\n    );\n\n    balances[msg.sender] -= amount;\n    balances[to] += amount;\n\n    emit Transfer(msg.sender, to, amount);\n}\n')),(0,r.kt)("p",null,"\u8fd0\u884c"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"npx hardhat test\n")),(0,r.kt)("h2",{id:"6-\u90e8\u7f72\u5408\u7ea6"},"6 \u90e8\u7f72\u5408\u7ea6"),(0,r.kt)("p",null,"\u521b\u5efa ",(0,r.kt)("inlineCode",{parentName:"p"},"scripts")," \u76ee\u5f55\uff0c \u7136\u540e\u7f16\u5199\u90e8\u7f72\u811a\u672c ",(0,r.kt)("inlineCode",{parentName:"p"},"deploy.js")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'async function main() {\n  const [deployer] = await ethers.getSigners();\n \n  console.log("deploy account", deployer.address);\n\n  console.log("Account balance", (await deployer.getBalance()).toString())\n  \n   const Token = await ethers.getContractFactory("Token");\nconst token= await Token.deploy();\nconsole.log("token address:", token.address);\n}\nmain().then(()=> prodess.exit(0))\n      .catch((error) => {\n        console.error(error);\n        process.exit(1);\n})\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"npx harhat run scripts/deploy.js --network <network-name>\n")),(0,r.kt)("p",null,"\u90e8\u7f72\u5230\u8fdc\u7a0b\u7f51\u7edc"),(0,r.kt)("p",null,"\u9700\u8981\u914d\u7f6e hardhat.config.js"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'require("@nomicfoundation/hardhat_workflow-toolbox");\n\n// Go to https://www.alchemyapi.io, sign up, create\n// a new App in its dashboard, and replace "KEY" with its key\nconst ALCHEMY_API_KEY = "KEY";\n\n// Replace this private key with your Goerli account private key\n// To export your private key from Metamask, open Metamask and\n// go to Account Details > Export Private Key\n// Beware: NEVER put real Ether into testing accounts\nconst GOERLI_PRIVATE_KEY = "YOUR GOERLI PRIVATE KEY";\n\nmodule.exports = {\n  solidity: "0.8.9",\n  networks: {\n    goerli: {\n      url: `https://eth-goerli.alchemyapi.io/v2/${ALCHEMY_API_KEY}`,\n      accounts: [GOERLI_PRIVATE_KEY]\n    }\n  }\n};\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"npx hardhat run scripts/deploy.js --network goerli\n")),(0,r.kt)("h3",{id:"\u6837\u677f\u9879\u76ee"},"\u6837\u677f\u9879\u76ee"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://github.com/NomicFoundation/hardhat-boilerplate"},"https://github.com/NomicFoundation/hardhat-boilerplate")))}h.isMDXComponent=!0}}]);