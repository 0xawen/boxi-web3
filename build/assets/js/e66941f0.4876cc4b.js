"use strict";(self.webpackChunkweb_3_blog=self.webpackChunkweb_3_blog||[]).push([[1228],{3905:(e,n,t)=>{t.d(n,{Zo:()=>i,kt:()=>m});var r=t(7294);function l(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function u(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){l(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function o(e,n){if(null==e)return{};var t,r,l=function(e,n){if(null==e)return{};var t,r,l={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(l[t]=e[t]);return l}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(l[t]=e[t])}return l}var c=r.createContext({}),s=function(e){var n=r.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):u(u({},n),e)),t},i=function(e){var n=s(e.components);return r.createElement(c.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},d=r.forwardRef((function(e,n){var t=e.components,l=e.mdxType,a=e.originalType,c=e.parentName,i=o(e,["components","mdxType","originalType","parentName"]),d=s(t),m=l,f=d["".concat(c,".").concat(m)]||d[m]||p[m]||a;return t?r.createElement(f,u(u({ref:n},i),{},{components:t})):r.createElement(f,u({ref:n},i))}));function m(e,n){var t=arguments,l=n&&n.mdxType;if("string"==typeof e||l){var a=t.length,u=new Array(a);u[0]=d;var o={};for(var c in n)hasOwnProperty.call(n,c)&&(o[c]=n[c]);o.originalType=e,o.mdxType="string"==typeof e?e:l,u[1]=o;for(var s=2;s<a;s++)u[s]=t[s];return r.createElement.apply(null,u)}return r.createElement.apply(null,t)}d.displayName="MDXCreateElement"},2789:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>u,default:()=>p,frontMatter:()=>a,metadata:()=>o,toc:()=>s});var r=t(7462),l=(t(7294),t(3905));const a={},u="\u7ebf\u7a0b\u540c\u6b65-\u9501",o={unversionedId:"rust/rust\u591a\u7ebf\u7a0b\u5e76\u53d1\u7f16\u7a0b/\u7ebf\u7a0b\u540c\u6b65_\u9501",id:"rust/rust\u591a\u7ebf\u7a0b\u5e76\u53d1\u7f16\u7a0b/\u7ebf\u7a0b\u540c\u6b65_\u9501",title:"\u7ebf\u7a0b\u540c\u6b65-\u9501",description:"\u901a\u8fc7\u9501\u63a7\u5236\u7ebf\u7a0b\u8bbf\u95ee\u8d44\u6e90\uff0c\u9501\u7684\u672c\u8d28\u662f\u5171\u4eab\u5185\u5b58\u3002",source:"@site/docs\\rust\\rust\u591a\u7ebf\u7a0b\u5e76\u53d1\u7f16\u7a0b\\\u7ebf\u7a0b\u540c\u6b65_\u9501.md",sourceDirName:"rust/rust\u591a\u7ebf\u7a0b\u5e76\u53d1\u7f16\u7a0b",slug:"/rust/rust\u591a\u7ebf\u7a0b\u5e76\u53d1\u7f16\u7a0b/\u7ebf\u7a0b\u540c\u6b65_\u9501",permalink:"/docs/rust/rust\u591a\u7ebf\u7a0b\u5e76\u53d1\u7f16\u7a0b/\u7ebf\u7a0b\u540c\u6b65_\u9501",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"rust",previous:{title:"\u7ebf\u7a0b\u540c\u6b65-\u6d88\u606f\u540c\u6b65",permalink:"/docs/rust/rust\u591a\u7ebf\u7a0b\u5e76\u53d1\u7f16\u7a0b/\u7ebf\u7a0b\u540c\u6b65_\u6d88\u606f\u4f20\u9012"},next:{title:"\u7ebf\u7a0b\u540c\u6b65-\u6761\u4ef6\u53d8\u91cf",permalink:"/docs/rust/rust\u591a\u7ebf\u7a0b\u5e76\u53d1\u7f16\u7a0b/\u7ebf\u7a0b\u540c\u6b65_\u6761\u4ef6\u53d8\u91cf"}},c={},s=[{value:"\u8bfb\u5199\u9501",id:"\u8bfb\u5199\u9501",level:2},{value:"\u5355\u7ebf\u7a0b\u4e2d\u4f7f\u7528\u4e92\u65a5\u9501",id:"\u5355\u7ebf\u7a0b\u4e2d\u4f7f\u7528\u4e92\u65a5\u9501",level:3},{value:"\u591a\u7ebf\u7a0b\u4f7f\u7528\u4e92\u65a5\u9501",id:"\u591a\u7ebf\u7a0b\u4f7f\u7528\u4e92\u65a5\u9501",level:3},{value:"\u8bfb\u5199\u9501",id:"\u8bfb\u5199\u9501-1",level:2}],i={toc:s};function p(e){let{components:n,...t}=e;return(0,l.kt)("wrapper",(0,r.Z)({},i,t,{components:n,mdxType:"MDXLayout"}),(0,l.kt)("h1",{id:"\u7ebf\u7a0b\u540c\u6b65-\u9501"},"\u7ebf\u7a0b\u540c\u6b65-\u9501"),(0,l.kt)("p",null,"\u901a\u8fc7\u9501\u63a7\u5236\u7ebf\u7a0b\u8bbf\u95ee\u8d44\u6e90\uff0c\u9501\u7684\u672c\u8d28\u662f\u5171\u4eab\u5185\u5b58\u3002"),(0,l.kt)("h2",{id:"\u8bfb\u5199\u9501"},"\u8bfb\u5199\u9501"),(0,l.kt)("h3",{id:"\u5355\u7ebf\u7a0b\u4e2d\u4f7f\u7528\u4e92\u65a5\u9501"},"\u5355\u7ebf\u7a0b\u4e2d\u4f7f\u7528\u4e92\u65a5\u9501"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rust"},'use std::sync::Mutex;\n\nfn main() {\n    // \u4f7f\u7528`Mutex`\u7ed3\u6784\u4f53\u7684\u5173\u8054\u51fd\u6570\u521b\u5efa\u65b0\u7684\u4e92\u65a5\u9501\u5b9e\u4f8b\n    let m = Mutex::new(5);\n    \n    {\n        // \u83b7\u53d6\u9501\uff0c\u7136\u540ederef\u4e3a`m`\u7684\u5f15\u7528\n        // lock\u8fd4\u56de\u7684\u662fResult\n        let mut num = m.lock().unwrap();\n        *num = 6;\n        // \u9501\u81ea\u52a8\u88abdrop\n    }\n    println!("m = {:?}", m);\n}\n')),(0,l.kt)("h3",{id:"\u591a\u7ebf\u7a0b\u4f7f\u7528\u4e92\u65a5\u9501"},"\u591a\u7ebf\u7a0b\u4f7f\u7528\u4e92\u65a5\u9501"),(0,l.kt)("p",null,"\u7ebf\u7a0b\u5b89\u5168\u7684Arc\u914d\u5408 Mutex\u3002"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rust"},'use std::sync::{Arc, Mutex};\nuse std::thread;\n\nfn main() {\n    let counter = Arc::new(Mutex::new(0));\n    let mut handles = vec![];\n    \n    for _ in 0..10 {\n        let counter = Arc::clone(&counter);\n        let handle = thread::spawn(move || {\n            let mut num = counter.lock().unwrap();\n            *num += 1;\n        });\n        handles.push(handle);\n    }\n    \n    for handle in handles {\n        handle.join().unwrap();\n    }\n    println!("Result: {}", *counter.lock().unwrap());\n}\n')),(0,l.kt)("h2",{id:"\u8bfb\u5199\u9501-1"},"\u8bfb\u5199\u9501"),(0,l.kt)("p",null,"\u9700\u8981\u5927\u91cf\u7684\u5e76\u53d1\u8bfb"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rust"},'use std::sync::RwLock;\n\nfn main() {\n    let lock = RwLock::new(5);\n    \n    // \u540c\u4e00\u65f6\u95f4\u5141\u8bb8\u591a\u4e2a\u8bfb\n    {\n        let r1 = lock.read().unwrap();\n        let r2 = lock.read().unwrap();\n        assert_eq!(*r1, 5);\n        assert_eq!(*r2, 5);\n    }\n    \n    // \u540c\u4e00\u65f6\u95f4\u53ea\u5141\u8bb8\u4e00\u4e2a\u5199\n    {\n        let mut w = lock.writer.unwrap();\n        *w += 1;\n        assert_eq!(*w, 6);\n        \n        // \u4ee5\u4e0b\u4ee3\u7801\u4f1apanic\uff0c\u56e0\u4e3a\u8bfb\u548c\u5199\u4e0d\u5141\u8bb8\u540c\u65f6\u5b58\u5728\n        // \u5199\u9501w\u76f4\u5230\u8be5\u8bed\u53e5\u5757\u7ed3\u675f\u624d\u88ab\u91ca\u653e\uff0c\u56e0\u6b64\u4e0b\u9762\u7684\u8bfb\u9501\u4f9d\u7136\u5904\u4e8e`w`\u7684\u4f5c\u7528\u57df\u4e2d\n        // let r1 = lock.read();\n        // println!("{:?}",r1);\n    }// \u5199\u9501\u5728\u6b64\u5904\u88abdrop\n}\n')))}p.isMDXComponent=!0}}]);