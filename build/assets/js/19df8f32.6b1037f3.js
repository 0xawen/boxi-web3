"use strict";(self.webpackChunkweb_3_blog=self.webpackChunkweb_3_blog||[]).push([[1445],{3905:(e,t,n)=>{n.d(t,{Zo:()=>s,kt:()=>y});var r=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var d=r.createContext({}),l=function(e){var t=r.useContext(d),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},s=function(e){var t=l(e.components);return r.createElement(d.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},p=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,a=e.originalType,d=e.parentName,s=c(e,["components","mdxType","originalType","parentName"]),p=l(n),y=i,b=p["".concat(d,".").concat(y)]||p[y]||u[y]||a;return n?r.createElement(b,o(o({ref:t},s),{},{components:n})):r.createElement(b,o({ref:t},s))}));function y(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var a=n.length,o=new Array(a);o[0]=p;var c={};for(var d in t)hasOwnProperty.call(t,d)&&(c[d]=t[d]);c.originalType=e,c.mdxType="string"==typeof e?e:i,o[1]=c;for(var l=2;l<a;l++)o[l]=n[l];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}p.displayName="MDXCreateElement"},6458:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>o,default:()=>u,frontMatter:()=>a,metadata:()=>c,toc:()=>l});var r=n(7462),i=(n(7294),n(3905));const a={},o="abi decode",c={unversionedId:"solidity/solidity_basic/abi_decode",id:"solidity/solidity_basic/abi_decode",title:"abi decode",description:"abi.encode \u5c06\u6570\u636e\u7f16\u7801\u4e3abytes",source:"@site/docs/solidity/solidity_basic/39_abi_decode.md",sourceDirName:"solidity/solidity_basic",slug:"/solidity/solidity_basic/abi_decode",permalink:"/docs/solidity/solidity_basic/abi_decode",draft:!1,tags:[],version:"current",sidebarPosition:39,frontMatter:{},sidebar:"solidity",previous:{title:"\u5408\u7ea6\u5e93",permalink:"/docs/solidity/solidity_basic/library"},next:{title:"keccak256",permalink:"/docs/solidity/solidity_basic/hashing_with_keccak256"}},d={},l=[],s={toc:l};function u(e){let{components:t,...n}=e;return(0,i.kt)("wrapper",(0,r.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"abi-decode"},"abi decode"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"abi.encode")," \u5c06\u6570\u636e\u7f16\u7801\u4e3a",(0,i.kt)("inlineCode",{parentName:"p"},"bytes")),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"abi.decode")," \u5c06",(0,i.kt)("inlineCode",{parentName:"p"},"bytes"),"\u89e3\u7801\u4e3a\u6570\u636e"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-solidity"},"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.13;\n\ncontract AbiDecode {\n    struct MyStruct {\n        string name;\n        uint[2] nums;\n    }\n    \n    function encode(\n        uint x,\n        address addr,\n        uint[] calldata arr,\n        MyStruct calldata myStruct\n    )\n        external\n        pure\n        returns (bytes memory)\n    {\n        return abi.encode(x, addr, arr, myStruct);\n    }\n    \n    function decode(bytes calldata data)external pure returns(\n        uint x,\n        address addr,\n        uint[] memory arr,\n        MyStruct memory myStruct\n    ){\n        (x, addr, arr, myStruct) = abi.decode(data, (uint, address, uint[], MyStruct));\n    }\n}\n")))}u.isMDXComponent=!0}}]);