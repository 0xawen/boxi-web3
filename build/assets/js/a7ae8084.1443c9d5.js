"use strict";(self.webpackChunkweb_3_blog=self.webpackChunkweb_3_blog||[]).push([[1060],{3905:(n,e,r)=>{r.d(e,{Zo:()=>s,kt:()=>d});var t=r(7294);function a(n,e,r){return e in n?Object.defineProperty(n,e,{value:r,enumerable:!0,configurable:!0,writable:!0}):n[e]=r,n}function o(n,e){var r=Object.keys(n);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(n);e&&(t=t.filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable}))),r.push.apply(r,t)}return r}function l(n){for(var e=1;e<arguments.length;e++){var r=null!=arguments[e]?arguments[e]:{};e%2?o(Object(r),!0).forEach((function(e){a(n,e,r[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(n,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(e){Object.defineProperty(n,e,Object.getOwnPropertyDescriptor(r,e))}))}return n}function i(n,e){if(null==n)return{};var r,t,a=function(n,e){if(null==n)return{};var r,t,a={},o=Object.keys(n);for(t=0;t<o.length;t++)r=o[t],e.indexOf(r)>=0||(a[r]=n[r]);return a}(n,e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(n);for(t=0;t<o.length;t++)r=o[t],e.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(n,r)&&(a[r]=n[r])}return a}var u=t.createContext({}),c=function(n){var e=t.useContext(u),r=e;return n&&(r="function"==typeof n?n(e):l(l({},e),n)),r},s=function(n){var e=c(n.components);return t.createElement(u.Provider,{value:e},n.children)},p={inlineCode:"code",wrapper:function(n){var e=n.children;return t.createElement(t.Fragment,{},e)}},m=t.forwardRef((function(n,e){var r=n.components,a=n.mdxType,o=n.originalType,u=n.parentName,s=i(n,["components","mdxType","originalType","parentName"]),m=c(r),d=a,g=m["".concat(u,".").concat(d)]||m[d]||p[d]||o;return r?t.createElement(g,l(l({ref:e},s),{},{components:r})):t.createElement(g,l({ref:e},s))}));function d(n,e){var r=arguments,a=e&&e.mdxType;if("string"==typeof n||a){var o=r.length,l=new Array(o);l[0]=m;var i={};for(var u in e)hasOwnProperty.call(e,u)&&(i[u]=e[u]);i.originalType=n,i.mdxType="string"==typeof n?n:a,l[1]=i;for(var c=2;c<o;c++)l[c]=r[c];return t.createElement.apply(null,l)}return t.createElement.apply(null,r)}m.displayName="MDXCreateElement"},3589:(n,e,r)=>{r.r(e),r.d(e,{assets:()=>u,contentTitle:()=>l,default:()=>p,frontMatter:()=>o,metadata:()=>i,toc:()=>c});var t=r(7462),a=(r(7294),r(3905));const o={},l="\u521b\u5efa\u4e00\u4e2amail dapp",i={unversionedId:"rust_contract/solana/solana_\u9879\u76ee/mail_dapp",id:"rust_contract/solana/solana_\u9879\u76ee/mail_dapp",title:"\u521b\u5efa\u4e00\u4e2amail dapp",description:"\u9879\u76ee\u8bbe\u7f6e",source:"@site/docs\\rust_contract\\solana\\05_solana_\u9879\u76ee\\mail_dapp.md",sourceDirName:"rust_contract/solana/05_solana_\u9879\u76ee",slug:"/rust_contract/solana/solana_\u9879\u76ee/mail_dapp",permalink:"/docs/rust_contract/solana/solana_\u9879\u76ee/mail_dapp",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"rust_contract",previous:{title:"\u4f7f\u7528\u5408\u7ea6\u53d1\u884c\u81ea\u5df1\u7684token",permalink:"/docs/rust_contract/solana/solana_\u9879\u76ee/crypto_currency"}},u={},c=[{value:"\u9879\u76ee\u8bbe\u7f6e",id:"\u9879\u76ee\u8bbe\u7f6e",level:2},{value:"\u72b6\u6001\u5b58\u50a8\u7ed3\u6784\u8bbe\u8ba1",id:"\u72b6\u6001\u5b58\u50a8\u7ed3\u6784\u8bbe\u8ba1",level:2},{value:"\u7a0b\u5e8f\u7684\u5165\u53e3\u70b9",id:"\u7a0b\u5e8f\u7684\u5165\u53e3\u70b9",level:2},{value:"\u6307\u4ee4\u8bbe\u8ba1",id:"\u6307\u4ee4\u8bbe\u8ba1",level:2},{value:"\u6307\u4ee41 ---\u521d\u59cb\u5316\u8d26\u6237",id:"\u6307\u4ee41----\u521d\u59cb\u5316\u8d26\u6237",level:3},{value:"\u6307\u4ee42 --- \u53d1\u9001\u90ae\u4ef6",id:"\u6307\u4ee42-----\u53d1\u9001\u90ae\u4ef6",level:3},{value:"\u7f16\u8bd1\u5e76\u4e14\u90e8\u7f72",id:"\u7f16\u8bd1\u5e76\u4e14\u90e8\u7f72",level:2},{value:"WebUi",id:"webui",level:2}],s={toc:c};function p(n){let{components:e,...r}=n;return(0,a.kt)("wrapper",(0,t.Z)({},s,r,{components:e,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"\u521b\u5efa\u4e00\u4e2amail-dapp"},"\u521b\u5efa\u4e00\u4e2amail dapp"),(0,a.kt)("h2",{id:"\u9879\u76ee\u8bbe\u7f6e"},"\u9879\u76ee\u8bbe\u7f6e"),(0,a.kt)("p",null,"\u6211\u4eec\u7684\u9879\u76ee\u6a21\u677f\uff1a",(0,a.kt)("a",{parentName:"p",href:"https://github.com/mvines/solana-bpf-program-template%E3%80%82"},"https://github.com/mvines/solana-bpf-program-template\u3002")),(0,a.kt)("p",null,"\u9879\u76ee\u7684\u7ed3\u6784\u5982\u4e0b:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-text"},"\u251c\u2500 src\n\u2502  \u251c\u2500 lib.rs -> registering modules\n\u2502  \u251c\u2500 entrypoint.rs -> entrypoint to the program\n\u2502  \u251c\u2500 instruction.rs -> program API, (de)serializing instruction data\n\u2502  \u251c\u2500 processor.rs -> program logic\n\u2502  \u251c\u2500 state.rs -> program objects, (de)serializing state\n\u2502  \u251c\u2500 error.rs -> program specific errors\n\u251c\u2500 .gitignore\n\u251c\u2500 Cargo.lock\n\u251c\u2500 Cargo.toml\n\u251c\u2500 Xargo.toml\n")),(0,a.kt)("h2",{id:"\u72b6\u6001\u5b58\u50a8\u7ed3\u6784\u8bbe\u8ba1"},"\u72b6\u6001\u5b58\u50a8\u7ed3\u6784\u8bbe\u8ba1"),(0,a.kt)("p",null,"\u5f15\u5165borsh\u5e93\uff0c\u5904\u7406\u5e8f\u5217\u5316\u6570\u636e\u3002"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-toml"},'[dependencies]\nsolana-program = "=1.7.10"\nborsh = "0.9.1"\nborsh-derive = "0.9.1"\n')),(0,a.kt)("p",null,"\u90ae\u4ef6\u7ed3\u6784\u4f53\u8bbe\u8ba1\uff1a"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rust"},"// state.rs\nuse borsh::{BorshDeserialize, BorshSerialize};\n\n// \u90ae\u4ef6\u7ed3\u6784\u4f53\n#[derive(BorshDeserialize, BorshSerialize, Debug)]\npub struct Mail {\n  pub id: String,\n  pub from_address: String,\n  pub to_address: String,\n  pub subject: String,\n  pub body: String,\n  pub sent_date: String,\n}\n\n// \u7528\u6237\u7684\u90ae\u4ef6\u5217\u8868\npub struct MailAccount {\n    pub inbox: Vec<Mail>,\n    pub sent: Vec<Mail>,\n}\n")),(0,a.kt)("h2",{id:"\u7a0b\u5e8f\u7684\u5165\u53e3\u70b9"},"\u7a0b\u5e8f\u7684\u5165\u53e3\u70b9"),(0,a.kt)("p",null,"entrypoints.rs"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rust"},"use crate::processor::Processor;\nuse solana_program::{\n  account_info::AccountInfo, entrypoint, entrypoint::ProgramResult, pubkey::Pubkey,\n};\n\nentrypoint!(process_instruction);\nfn process_instruction(\n  program_id: &Pubkey,\n  accounts: &[AccountInfo],\n  instruction_data: &[u8],\n) -> ProgramResult {\n  Processor::process(program_id, accounts, instruction_data)\n}\n")),(0,a.kt)("h2",{id:"\u6307\u4ee4\u8bbe\u8ba1"},"\u6307\u4ee4\u8bbe\u8ba1"),(0,a.kt)("p",null,"\u4f7f\u7528\u4e00\u4e2a\u679a\u4e3e\u5c06\u6240\u6709\u6307\u4ee4\u5f52\u7eb3\u8d77\u6765"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rust"},"#[derive(Debug)]\npub enum MailInstruction {\n  // \u6307\u4ee41\uff0c2\uff0c3 ...\n}\n")),(0,a.kt)("h3",{id:"\u6307\u4ee41----\u521d\u59cb\u5316\u8d26\u6237"},"\u6307\u4ee41 ---\u521d\u59cb\u5316\u8d26\u6237"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"\u6dfb\u52a0\u521d\u59cb\u5316\u8d26\u53f7\u6307\u4ee4")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rust"},"use crate::error::MailError::InvalidInstruction;\nuse solana_program::program_error::ProgramError;\n\n\n#[derive(Debug)]\npub enum MailInstruction {\n  /// Initialize a new account\n  ///\n  /// Accounts expected\n  ///\n  /// 1. `[writable]` The AccountInfo of the account to be initialized\n  InitAccount,\n}\n\nimpl MailInstruction {\n    pub fn unpack(input: &[u8]) -> Result<Self, ProgramError> {\n           let (tag, rest) = input.split_first().ok_or(InvalidInstruction)?;\n       \n           Ok(match tag {\n             0 => Self::InitAccount,\n             _ => return Err(InvalidInstruction.into()),\n           }) \n    }   \n}\n")),(0,a.kt)("p",null,"\u5728 error.rs \u4e2d\u5b9a\u4e49\u89e3\u6790\u6570\u636e\u9519\u8bef"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-toml"},'thiserror = "1.0.24"\n')),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rust"},'use thiserror::Error;\n\n#[derive(Error, Debug, Copy, Clone)]\npub enum MailError {\n  /// Invalid Instruction\n  #[error("Invalid Instruction")]\n  InvalidInstruction,\n}\n\nimpl From<MailError> for ProgramError {\n  fn from(e: MailError) -> Self {\n    ProgramError::Custom(e as u32)\n  }\n}\n')),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"\u5b9e\u73b0\u6307\u4ee4\u5904\u7406\u903b\u8f91\n\u5728process.rs \u4e2d\u6211\u4eec\u5b9e\u73b0\u521d\u59cb\u5316\u8d26\u53f7\u7684\u903b\u8f91")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rust"},'use crate::instruction::MailInstruction;\nuse solana_program::{\n  account_info::AccountInfo,\n  entrypoint::ProgramResult,\n  msg,\n  pubkey::Pubkey,\n};\n\npub struct Processor;\n\nimpl Processor {\n    pub fn process(\n        program_id: &Pubkey,\n        accounts: &[&AccountInfo],\n        instruction_data: &[u8],\n    ) -> RrogramResult{\n        let instruction = MailInstruction::unpack(instruction_data)?;\n        \n        match instruction {\n            MailInstruction::InitAccount => {\n                    msg!("Instruction: InitAccount");\n                    Self::process_init_account(accounts, program_id)\n            }\n        }   \n    }\n    \n    // \u5904\u7406\u6307\u4ee41 \n    fn process_init_account(\n        account: &AccountInfo,\n        program_id: &Pubkey\n      ) -> ProgramResult {\n      if !account.is_writable {\n        return Err(NotWritable.into());\n      }\n    \n      if account.owner != program_id {\n        return Err(ProgramError::IncorrectProgramId);\n      }\n    \n      Ok(())\n    }\n    \n}\n')),(0,a.kt)("h3",{id:"\u6307\u4ee42-----\u53d1\u9001\u90ae\u4ef6"},"\u6307\u4ee42 --- \u53d1\u9001\u90ae\u4ef6"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"\u6dfb\u52a0\u6307\u4ee42 \u7ed3\u6784\u4f53")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rust"},"#[derive(Debug)]\npub enum MailInstruction {\n  /// Initialize a new account\n  ///\n  /// Accounts expected\n  ///\n  /// 1. `[writable]` The AccountInfo of the account to be initialized\n  InitAccount,\n  /// Send a mail to an account.\n  ///\n  /// Accounts expected:\n  ///\n  /// 1. `[writable]` The AccountInfo of the sender\n  /// 2. `[writable]` The AccountInfo of the receiver\n  SendMail { mail: Mail },\n}\n\nimpl MailInstruction {\n    pub fn unpack(input: &[u8]) -> Result<Self, ProgramError> {\n           let (tag, rest) = input.split_first().ok_or(InvalidInstruction)?;\n       \n           Ok(match tag {\n             0 => Self::InitAccount,\n             1 => Self::SendMail{\n                    mail: Mail::try_from_slice(&rest)?, \n             },\n             _ => return Err(InvalidInstruction.into()),\n           }) \n    }   \n}\n")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"\u5b9e\u73b0\u6307\u4ee42 \u7684\u5904\u7406\u903b\u8f91")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rust"},'// process.rs\nMailInstruction::SendMail { mail } => {\n  msg!("Instruction: SendMail");\n  Self::process_send_mail(accounts, mail, program_id)\n}\n\n// \u6dfb\u52a0\nfn process_send_mail(accounts: &[AccountInfo], mail: &Mail, program_id: &Pubkey) -> ProgramResult {\n  Ok(())\n}\n')),(0,a.kt)("h2",{id:"\u7f16\u8bd1\u5e76\u4e14\u90e8\u7f72"},"\u7f16\u8bd1\u5e76\u4e14\u90e8\u7f72"),(0,a.kt)("p",null,"\u542f\u52a8\u672c\u5730\u8282\u70b9\uff1a"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"solana config set --url localhost\n\nsolana-test-validator\n")),(0,a.kt)("p",null,"\u7f16\u8bd1\u547d\u4ee4"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"cargo build-bpf\n")),(0,a.kt)("p",null,"\u90e8\u7f72\u547d\u4ee4"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"solana program deploy target/deploy/<name-of-the-program>.so\n")),(0,a.kt)("h2",{id:"webui"},"WebUi"),(0,a.kt)("p",null,"todo"))}p.isMDXComponent=!0}}]);