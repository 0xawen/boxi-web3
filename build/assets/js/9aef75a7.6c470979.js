"use strict";(self.webpackChunkweb_3_blog=self.webpackChunkweb_3_blog||[]).push([[9623],{3905:(e,n,t)=>{t.d(n,{Zo:()=>s,kt:()=>m});var r=t(7294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function u(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var c=r.createContext({}),i=function(e){var n=r.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},s=function(e){var n=i(e.components);return r.createElement(c.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},f=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,a=e.originalType,c=e.parentName,s=u(e,["components","mdxType","originalType","parentName"]),f=i(t),m=o,d=f["".concat(c,".").concat(m)]||f[m]||p[m]||a;return t?r.createElement(d,l(l({ref:n},s),{},{components:t})):r.createElement(d,l({ref:n},s))}));function m(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var a=t.length,l=new Array(a);l[0]=f;var u={};for(var c in n)hasOwnProperty.call(n,c)&&(u[c]=n[c]);u.originalType=e,u.mdxType="string"==typeof e?e:o,l[1]=u;for(var i=2;i<a;i++)l[i]=t[i];return r.createElement.apply(null,l)}return r.createElement.apply(null,t)}f.displayName="MDXCreateElement"},1848:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>l,default:()=>p,frontMatter:()=>a,metadata:()=>u,toc:()=>i});var r=t(7462),o=(t(7294),t(3905));const a={},l="\u7ebf\u7a0b\u540c\u6b65-\u6761\u4ef6\u53d8\u91cf",u={unversionedId:"rust/rust\u591a\u7ebf\u7a0b\u5e76\u53d1\u7f16\u7a0b/\u7ebf\u7a0b\u540c\u6b65_\u6761\u4ef6\u53d8\u91cf",id:"rust/rust\u591a\u7ebf\u7a0b\u5e76\u53d1\u7f16\u7a0b/\u7ebf\u7a0b\u540c\u6b65_\u6761\u4ef6\u53d8\u91cf",title:"\u7ebf\u7a0b\u540c\u6b65-\u6761\u4ef6\u53d8\u91cf",description:"Mutex\u7528\u4e8e\u89e3\u51b3\u8d44\u6e90\u5b89\u5168\u8bbf\u95ee\u7684\u95ee\u9898\uff0c\u4f46\u662f\u6211\u4eec\u8fd8\u9700\u8981\u4e00\u4e2a\u624b\u6bb5\u6765\u89e3\u51b3\u8d44\u6e90\u8bbf\u95ee\u987a\u5e8f\u7684\u95ee\u9898\u3002",source:"@site/docs\\rust\\rust\u591a\u7ebf\u7a0b\u5e76\u53d1\u7f16\u7a0b\\\u7ebf\u7a0b\u540c\u6b65_\u6761\u4ef6\u53d8\u91cf.md",sourceDirName:"rust/rust\u591a\u7ebf\u7a0b\u5e76\u53d1\u7f16\u7a0b",slug:"/rust/rust\u591a\u7ebf\u7a0b\u5e76\u53d1\u7f16\u7a0b/\u7ebf\u7a0b\u540c\u6b65_\u6761\u4ef6\u53d8\u91cf",permalink:"/docs/rust/rust\u591a\u7ebf\u7a0b\u5e76\u53d1\u7f16\u7a0b/\u7ebf\u7a0b\u540c\u6b65_\u6761\u4ef6\u53d8\u91cf",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"rust",previous:{title:"\u7ebf\u7a0b\u540c\u6b65-\u9501",permalink:"/docs/rust/rust\u591a\u7ebf\u7a0b\u5e76\u53d1\u7f16\u7a0b/\u7ebf\u7a0b\u540c\u6b65_\u9501"},next:{title:"\u7ebf\u7a0b\u540c\u6b65-\u4fe1\u53f7\u91cf",permalink:"/docs/rust/rust\u591a\u7ebf\u7a0b\u5e76\u53d1\u7f16\u7a0b/\u7ebf\u7a0b\u540c\u6b65_\u4fe1\u53f7\u91cf"}},c={},i=[],s={toc:i};function p(e){let{components:n,...t}=e;return(0,o.kt)("wrapper",(0,r.Z)({},s,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"\u7ebf\u7a0b\u540c\u6b65-\u6761\u4ef6\u53d8\u91cf"},"\u7ebf\u7a0b\u540c\u6b65-\u6761\u4ef6\u53d8\u91cf"),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"Mutex"),"\u7528\u4e8e\u89e3\u51b3\u8d44\u6e90\u5b89\u5168\u8bbf\u95ee\u7684\u95ee\u9898\uff0c\u4f46\u662f\u6211\u4eec\u8fd8\u9700\u8981\u4e00\u4e2a\u624b\u6bb5\u6765\u89e3\u51b3\u8d44\u6e90\u8bbf\u95ee\u987a\u5e8f\u7684\u95ee\u9898\u3002"),(0,o.kt)("p",null,"\u800c Rust \u8003\u8651\u5230\u4e86\u8fd9\u4e00\u70b9\uff0c\u4e3a\u6211\u4eec\u63d0\u4f9b\u4e86\u6761\u4ef6\u53d8\u91cf(Condition Variables)\uff0c\u5b83\u7ecf\u5e38\u548c",(0,o.kt)("inlineCode",{parentName:"p"},"Mutex"),"\u4e00\u8d77\u4f7f\u7528\uff0c\u53ef\u4ee5\u8ba9\u7ebf\u7a0b\u6302\u8d77\uff0c\u76f4\u5230\u67d0\u4e2a\u6761\u4ef6\u53d1\u751f\u540e\u518d\u7ee7\u7eed\u6267\u884c."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-rust"},'use std::sync::{Arc, Mutex, Condvar};\nuse std::thread::{spawn,sleep};\nuse std::time::Duration;\n\nfn main() {\n    let flag = Arc::new(Mutex::new(false));\n    let cond = Arc::new(Condvar::new());\n    let cflag = flag.clone();\n    let ccond = cond.clone();\n    \n    let hdl = spawn(move || {\n        let mut m = {*cflag.lock().unwrap()};\n        let mut counter = 0;\n        \n        while counter < 3 {\n            while !m {\n                m = *ccond.wait(cflag.lock().unwrap()).unwrap();\n            }\n            \n            {\n                m = false;\n                *cflag.lock().unwrap() = false;\n            }\n            \n            counter += 1;\n            println!("inner counter: {}", counter);\n        }\n    });\n    \n    let mut counter = 0;\n    \n    loop {\n        sleep(Duration::from_millis(1000));\n        *flag.lock().unwrap() = true;\n        counter += 1;\n        if counter > 3 {\n            break;\n        }\n        println!("outside counter: {}", counter);\n        cond.notify_one();\n    }\n    hdl.join().unwrap();\n    println!("{:?}", flag);\n}\n')))}p.isMDXComponent=!0}}]);