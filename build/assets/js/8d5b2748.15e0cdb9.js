"use strict";(self.webpackChunkweb_3_blog=self.webpackChunkweb_3_blog||[]).push([[5090],{3905:(e,n,r)=>{r.d(n,{Zo:()=>l,kt:()=>f});var t=r(7294);function o(e,n,r){return n in e?Object.defineProperty(e,n,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[n]=r,e}function u(e,n){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),r.push.apply(r,t)}return r}function a(e){for(var n=1;n<arguments.length;n++){var r=null!=arguments[n]?arguments[n]:{};n%2?u(Object(r),!0).forEach((function(n){o(e,n,r[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):u(Object(r)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(r,n))}))}return e}function i(e,n){if(null==e)return{};var r,t,o=function(e,n){if(null==e)return{};var r,t,o={},u=Object.keys(e);for(t=0;t<u.length;t++)r=u[t],n.indexOf(r)>=0||(o[r]=e[r]);return o}(e,n);if(Object.getOwnPropertySymbols){var u=Object.getOwnPropertySymbols(e);for(t=0;t<u.length;t++)r=u[t],n.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var c=t.createContext({}),s=function(e){var n=t.useContext(c),r=n;return e&&(r="function"==typeof e?e(n):a(a({},n),e)),r},l=function(e){var n=s(e.components);return t.createElement(c.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},m=t.forwardRef((function(e,n){var r=e.components,o=e.mdxType,u=e.originalType,c=e.parentName,l=i(e,["components","mdxType","originalType","parentName"]),m=s(r),f=o,y=m["".concat(c,".").concat(f)]||m[f]||p[f]||u;return r?t.createElement(y,a(a({ref:n},l),{},{components:r})):t.createElement(y,a({ref:n},l))}));function f(e,n){var r=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var u=r.length,a=new Array(u);a[0]=m;var i={};for(var c in n)hasOwnProperty.call(n,c)&&(i[c]=n[c]);i.originalType=e,i.mdxType="string"==typeof e?e:o,a[1]=i;for(var s=2;s<u;s++)a[s]=r[s];return t.createElement.apply(null,a)}return t.createElement.apply(null,r)}m.displayName="MDXCreateElement"},2742:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>p,frontMatter:()=>u,metadata:()=>i,toc:()=>s});var t=r(7462),o=(r(7294),r(3905));const u={},a="\u6574\u6570\u8f6c\u6362\u4e3a\u679a\u4e3e",i={unversionedId:"rust/rust\u8fdb\u9636\u77e5\u8bc6/\u6df1\u5165\u7c7b\u578b\u7cfb\u7edf/\u679a\u4e3e\u548c\u6574\u6570",id:"rust/rust\u8fdb\u9636\u77e5\u8bc6/\u6df1\u5165\u7c7b\u578b\u7cfb\u7edf/\u679a\u4e3e\u548c\u6574\u6570",title:"\u6574\u6570\u8f6c\u6362\u4e3a\u679a\u4e3e",description:"",source:"@site/docs\\rust\\rust\u8fdb\u9636\u77e5\u8bc6\\\u6df1\u5165\u7c7b\u578b\u7cfb\u7edf\\\u679a\u4e3e\u548c\u6574\u6570.md",sourceDirName:"rust/rust\u8fdb\u9636\u77e5\u8bc6/\u6df1\u5165\u7c7b\u578b\u7cfb\u7edf",slug:"/rust/rust\u8fdb\u9636\u77e5\u8bc6/\u6df1\u5165\u7c7b\u578b\u7cfb\u7edf/\u679a\u4e3e\u548c\u6574\u6570",permalink:"/docs/rust/rust\u8fdb\u9636\u77e5\u8bc6/\u6df1\u5165\u7c7b\u578b\u7cfb\u7edf/\u679a\u4e3e\u548c\u6574\u6570",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"rust",previous:{title:"\u5b9a\u957f\u7c7b\u578b\u548c\u4e0d\u5b9a\u957f\u7c7b\u578b",permalink:"/docs/rust/rust\u8fdb\u9636\u77e5\u8bc6/\u6df1\u5165\u7c7b\u578b\u7cfb\u7edf/\u5b9a\u957f\u7c7b\u578b\u548c\u4e0d\u5b9a\u957f\u7c7b\u578b"},next:{title:"\u8fed\u4ee3\u5668",permalink:"/docs/rust/rust\u8fdb\u9636\u77e5\u8bc6/\u51fd\u6570\u5f0f\u7f16\u7a0b/\u8fed\u4ee3\u5668"}},c={},s=[],l={toc:s};function p(e){let{components:n,...r}=e;return(0,o.kt)("wrapper",(0,t.Z)({},l,r,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"\u6574\u6570\u8f6c\u6362\u4e3a\u679a\u4e3e"},"\u6574\u6570\u8f6c\u6362\u4e3a\u679a\u4e3e"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-rust"},'enum MyEnum {\n    A = 1,\n    B,\n    C\n}\n\nfn main() {\n    // \u5c06\u679a\u4e3e\u8f6c\u6362\u6210\u6574\u6570\n    let x = MyEnum::C as i32;\n    \n    // \u6574\u6570\u5230\u679a\u4e3e \n    match x.try_into() {\n        Ok(MyEnum::A) => println!("a"),\n        Ok(MyEnum::B) => println!("b"),\n        Ok(MyEnum::C) => println!("c"),\n        Err(_) => eprintln!("unknown number"),\n    }\n\n}\n\nuse std::convert::TryFrom;\n\nimpl TryFrom<i32> for MyEnum {\n    type Error = ();\n\n    fn try_from(v: i32) -> Result<Self, Self::Error> {\n        match v {\n            x if x == MyEnum::A as i32 => Ok(MyEnum::A),\n            x if x == MyEnum::B as i32 => Ok(MyEnum::B),\n            x if x == MyEnum::C as i32 => Ok(MyEnum::C),\n            _ => Err(()),\n        }\n    }\n}\n')))}p.isMDXComponent=!0}}]);