"use strict";(self.webpackChunkweb_3_blog=self.webpackChunkweb_3_blog||[]).push([[6665],{3905:(e,n,t)=>{t.d(n,{Zo:()=>s,kt:()=>m});var r=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function o(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var c=r.createContext({}),u=function(e){var n=r.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},s=function(e){var n=u(e.components);return r.createElement(c.Provider,{value:n},e.children)},d={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},p=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,i=e.originalType,c=e.parentName,s=o(e,["components","mdxType","originalType","parentName"]),p=u(t),m=a,f=p["".concat(c,".").concat(m)]||p[m]||d[m]||i;return t?r.createElement(f,l(l({ref:n},s),{},{components:t})):r.createElement(f,l({ref:n},s))}));function m(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var i=t.length,l=new Array(i);l[0]=p;var o={};for(var c in n)hasOwnProperty.call(n,c)&&(o[c]=n[c]);o.originalType=e,o.mdxType="string"==typeof e?e:a,l[1]=o;for(var u=2;u<i;u++)l[u]=t[u];return r.createElement.apply(null,l)}return r.createElement.apply(null,t)}p.displayName="MDXCreateElement"},4119:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>l,default:()=>d,frontMatter:()=>i,metadata:()=>o,toc:()=>u});var r=t(7462),a=(t(7294),t(3905));const i={},l="\u94fe\u8868",o={unversionedId:"program_basics/data_structures/linked",id:"program_basics/data_structures/linked",title:"\u94fe\u8868",description:"\u5728\u94fe\u8868\u7c7b\u4e2d\u5b9e\u73b0\u8fd9\u4e9b\u529f\u80fd\uff1a",source:"@site/docs/program_basics/data_structures/linked.md",sourceDirName:"program_basics/data_structures",slug:"/program_basics/data_structures/linked",permalink:"/docs/program_basics/data_structures/linked",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"program_basics",previous:{title:"\u6570\u636e\u7ed3\u6784\u6982\u8ff0",permalink:"/docs/program_basics/data_structures/info"},next:{title:"\u7b97\u6cd5\u6982\u8ff0",permalink:"/docs/program_basics/algorithms/info"}},c={},u=[],s={toc:u};function d(e){let{components:n,...t}=e;return(0,a.kt)("wrapper",(0,r.Z)({},s,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"\u94fe\u8868"},"\u94fe\u8868"),(0,a.kt)("p",null,"\u5728\u94fe\u8868\u7c7b\u4e2d\u5b9e\u73b0\u8fd9\u4e9b\u529f\u80fd\uff1a"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"get(index)\uff1a\u83b7\u53d6\u94fe\u8868\u4e2d\u7b2c ",(0,a.kt)("inlineCode",{parentName:"li"},"index")," \u4e2a\u8282\u70b9\u7684\u503c\u3002\u5982\u679c\u7d22\u5f15\u65e0\u6548\uff0c\u5219\u8fd4\u56de",(0,a.kt)("inlineCode",{parentName:"li"},"-1"),"\u3002"),(0,a.kt)("li",{parentName:"ul"},"addAtHead(val)\uff1a\u5728\u94fe\u8868\u7684\u7b2c\u4e00\u4e2a\u5143\u7d20\u4e4b\u524d\u6dfb\u52a0\u4e00\u4e2a\u503c\u4e3a ",(0,a.kt)("inlineCode",{parentName:"li"},"val")," \u7684\u8282\u70b9\u3002\u63d2\u5165\u540e\uff0c\u65b0\u8282\u70b9\u5c06\u6210\u4e3a\u94fe\u8868\u7684\u7b2c\u4e00\u4e2a\u8282\u70b9\u3002"),(0,a.kt)("li",{parentName:"ul"},"addAtTail(val)\uff1a\u5c06\u503c\u4e3a ",(0,a.kt)("inlineCode",{parentName:"li"},"val")," \u7684\u8282\u70b9\u8ffd\u52a0\u5230\u94fe\u8868\u7684\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u3002"),(0,a.kt)("li",{parentName:"ul"},"addAtIndex(index,val)\uff1a\u5728\u94fe\u8868\u4e2d\u7684\u7b2c ",(0,a.kt)("inlineCode",{parentName:"li"},"index")," \u4e2a\u8282\u70b9\u4e4b\u524d\u6dfb\u52a0\u503c\u4e3a ",(0,a.kt)("inlineCode",{parentName:"li"},"val")," \u7684\u8282\u70b9\u3002\u5982\u679c ",(0,a.kt)("inlineCode",{parentName:"li"},"index")," \u7b49\u4e8e\u94fe\u8868\u7684\u957f\u5ea6\uff0c\u5219\u8be5\u8282\u70b9\u5c06\u9644\u52a0\u5230\u94fe\u8868\u7684\u672b\u5c3e\u3002\u5982\u679c ",(0,a.kt)("inlineCode",{parentName:"li"},"index")," \u5927\u4e8e\u94fe\u8868\u957f\u5ea6\uff0c\u5219\u4e0d\u4f1a\u63d2\u5165\u8282\u70b9\u3002\u5982\u679c",(0,a.kt)("inlineCode",{parentName:"li"},"index"),"\u5c0f\u4e8e0\uff0c\u5219\u5728\u5934\u90e8\u63d2\u5165\u8282\u70b9\u3002"),(0,a.kt)("li",{parentName:"ul"},"deleteAtIndex(index)\uff1a\u5982\u679c\u7d22\u5f15 ",(0,a.kt)("inlineCode",{parentName:"li"},"index")," \u6709\u6548\uff0c\u5219\u5220\u9664\u94fe\u8868\u4e2d\u7684\u7b2c ",(0,a.kt)("inlineCode",{parentName:"li"},"index")," \u4e2a\u8282\u70b9\u3002")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rust"},"struct Node {\n    val: i32,\n    next: Option<Box<Node>>,\n}\n\n#[derive(Default)]\nstruct MyLinkedList {\n    head: Option<Box<Node>>,\n}\n\n/**\n * `&self` means the method takes an immutable reference.\n * If you need a mutable reference, change it to `&mut self` instead.\n */\nimpl MyLinkedList {\n    fn new() -> Self {\n        Default::default()\n    }\n    \n    fn get(&self, index: i32) -> i32 {\n        let mut cur = match self.head {\n          None => return -1,\n            Some(ref n) => n,\n        };\n        let mut idx_cur = 0;\n        while idx_cur < index {\n            match cur.next => {\n                None => return - 1,\n                Some(ref next) => {\n                    cur = next;\n                    idx_cur += 1;\n                }\n            }\n        }\n        cur.val\n    }\n}\n")))}d.isMDXComponent=!0}}]);