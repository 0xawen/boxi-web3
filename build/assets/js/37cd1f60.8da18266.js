"use strict";(self.webpackChunkweb_3_blog=self.webpackChunkweb_3_blog||[]).push([[4467],{3905:(e,t,n)=>{n.d(t,{Zo:()=>l,kt:()=>_});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function c(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function u(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var s=r.createContext({}),i=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):c(c({},t),e)),n},l=function(e){var t=i(e.components);return r.createElement(s.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},f=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,s=e.parentName,l=u(e,["components","mdxType","originalType","parentName"]),f=i(n),_=o,m=f["".concat(s,".").concat(_)]||f[_]||p[_]||a;return n?r.createElement(m,c(c({ref:t},l),{},{components:n})):r.createElement(m,c({ref:t},l))}));function _(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,c=new Array(a);c[0]=f;var u={};for(var s in t)hasOwnProperty.call(t,s)&&(u[s]=t[s]);u.originalType=e,u.mdxType="string"==typeof e?e:o,c[1]=u;for(var i=2;i<a;i++)c[i]=n[i];return r.createElement.apply(null,c)}return r.createElement.apply(null,n)}f.displayName="MDXCreateElement"},242:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>c,default:()=>p,frontMatter:()=>a,metadata:()=>u,toc:()=>i});var r=n(7462),o=(n(7294),n(3905));const a={},c="\u8bfb\u53d6accounts",u={unversionedId:"rust_contract/solana/solana_\u5408\u7ea6\u5f00\u53d1\u5e93/read_accounts",id:"rust_contract/solana/solana_\u5408\u7ea6\u5f00\u53d1\u5e93/read_accounts",title:"\u8bfb\u53d6accounts",description:"Solana \u4e2d\u7684\u51e0\u4e4e\u6240\u6709\u6307\u4ee4\u90fd\u9700\u8981\u81f3\u5c11 2 \u5230 3 \u4e2a\u5e10\u6237\uff0c\u5e76\u4e14\u4f1a\u5728\u6307\u4ee4\u5904\u7406\u7a0b\u5e8f\u4e2d\u63d0\u53ca\u5b83\u4eec\u671f\u671b\u8fd9\u4e9b\u5e10\u6237\u96c6\u7684\u987a\u5e8f\u3002",source:"@site/docs\\rust_contract\\solana\\02_solana_\u5408\u7ea6\u5f00\u53d1\u5e93\\read_accounts.md",sourceDirName:"rust_contract/solana/02_solana_\u5408\u7ea6\u5f00\u53d1\u5e93",slug:"/rust_contract/solana/solana_\u5408\u7ea6\u5f00\u53d1\u5e93/read_accounts",permalink:"/docs/rust_contract/solana/solana_\u5408\u7ea6\u5f00\u53d1\u5e93/read_accounts",draft:!1,tags:[],version:"current",frontMatter:{}},s={},i=[],l={toc:i};function p(e){let{components:t,...n}=e;return(0,o.kt)("wrapper",(0,r.Z)({},l,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"\u8bfb\u53d6accounts"},"\u8bfb\u53d6accounts"),(0,o.kt)("p",null,"Solana \u4e2d\u7684\u51e0\u4e4e\u6240\u6709\u6307\u4ee4\u90fd\u9700\u8981\u81f3\u5c11 2 \u5230 3 \u4e2a\u5e10\u6237\uff0c\u5e76\u4e14\u4f1a\u5728\u6307\u4ee4\u5904\u7406\u7a0b\u5e8f\u4e2d\u63d0\u53ca\u5b83\u4eec\u671f\u671b\u8fd9\u4e9b\u5e10\u6237\u96c6\u7684\u987a\u5e8f\u3002"),(0,o.kt)("p",null,"\u6211\u4eec\u5229\u7528",(0,o.kt)("inlineCode",{parentName:"p"},"iter()"),"Rust \u4e2d\u7684\u65b9\u6cd5\uff0c\u800c\u4e0d\u662f\u624b\u52a8\u6307\u793a\u5e10\u6237\u3002"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-rust"},"use borsh::{BorshDeserialize, BorshSerialize};\nuse solana_program::{\n    account_info::{next_account_info, AccountInfo},\n    entrypoint,\n    entrypoint::ProgramResult,\n    pubkey::Pubkey,\n};\n\nentrypoint!(process_instruction);\n\n#[derive(BorshSerialize, BorshDeserialize, Debug)]\npub struct HelloState {\n    is_initialized: bool,\n}\n// Accounts required\n/// 1. [signer] Payer\n/// 2. [writable] Hello state account\n/// 3. [] Rent account\n/// 4. [] System Program\npub fn process_instruction(\n    _program_id: &Pubkey,\n    accounts: &[AccountInfo],\n    _instruction_data: &[u8],\n)-> ProgramResult {\n    // fetching all accounts as a iter\n    let accounts_iter = &mut accounts.iter();\n    // payer account\n    let payer_account = next_account_inof(accounts_iter)?;\n     // Hello state account\n    let hello_state_account = next_account_info(accounts_iter)?;\n    // Rent account\n    let rent_account = next_account_info(accounts_iter)?;\n    // System Program\n    let system_program = next_account_info(accounts_iter)?;\n    \n    Ok(())\n}\n")))}p.isMDXComponent=!0}}]);