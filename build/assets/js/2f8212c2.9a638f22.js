"use strict";(self.webpackChunkweb_3_blog=self.webpackChunkweb_3_blog||[]).push([[7298],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>d});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var i=a.createContext({}),c=function(e){var t=a.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},u=function(e){var t=c(e.components);return a.createElement(i.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,i=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),m=c(n),d=r,g=m["".concat(i,".").concat(d)]||m[d]||p[d]||o;return n?a.createElement(g,l(l({ref:t},u),{},{components:n})):a.createElement(g,l({ref:t},u))}));function d(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,l=new Array(o);l[0]=m;var s={};for(var i in t)hasOwnProperty.call(t,i)&&(s[i]=t[i]);s.originalType=e,s.mdxType="string"==typeof e?e:r,l[1]=s;for(var c=2;c<o;c++)l[c]=n[c];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},450:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>i,contentTitle:()=>l,default:()=>p,frontMatter:()=>o,metadata:()=>s,toc:()=>c});var a=n(7462),r=(n(7294),n(3905));const o={},l="\u4f7f\u7528anchor\u521b\u5efa\u4e00\u4e2ablog dapp",s={unversionedId:"rust_contract/solana/solana_\u9879\u76ee/blog_dapp_by_anchor",id:"rust_contract/solana/solana_\u9879\u76ee/blog_dapp_by_anchor",title:"\u4f7f\u7528anchor\u521b\u5efa\u4e00\u4e2ablog dapp",description:"\u9879\u76ee\u8bbe\u7f6e",source:"@site/docs\\rust_contract\\solana\\05_solana_\u9879\u76ee\\blog_dapp_by_anchor.md",sourceDirName:"rust_contract/solana/05_solana_\u9879\u76ee",slug:"/rust_contract/solana/solana_\u9879\u76ee/blog_dapp_by_anchor",permalink:"/docs/rust_contract/solana/solana_\u9879\u76ee/blog_dapp_by_anchor",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"rust_contract",previous:{title:"\u90e8\u7f72\u5408\u7ea6",permalink:"/docs/rust_contract/solana/solana_workflow/\u90e8\u7f72\u5408\u7ea6"},next:{title:"\u4f17\u7b79dapp",permalink:"/docs/rust_contract/solana/solana_\u9879\u76ee/crowdfunding_dapp"}},i={},c=[{value:"\u9879\u76ee\u8bbe\u7f6e",id:"\u9879\u76ee\u8bbe\u7f6e",level:2},{value:"\u521d\u59cb\u5316anchor\u9879\u76ee",id:"\u521d\u59cb\u5316anchor\u9879\u76ee",level:3},{value:"\u9879\u76ee\u76ee\u5f55",id:"\u9879\u76ee\u76ee\u5f55",level:3},{value:"\u7f16\u5199rust\u51fd\u6570",id:"\u7f16\u5199rust\u51fd\u6570",level:2},{value:"Initialize\u6307\u4ee4",id:"initialize\u6307\u4ee4",level:3},{value:"MakePost\u6307\u4ee4",id:"makepost\u6307\u4ee4",level:3},{value:"\u90e8\u7f72\u5728\u6d4b\u8bd5\u7f51\u4e0a",id:"\u90e8\u7f72\u5728\u6d4b\u8bd5\u7f51\u4e0a",level:2},{value:"front end",id:"front-end",level:2}],u={toc:c};function p(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"\u4f7f\u7528anchor\u521b\u5efa\u4e00\u4e2ablog-dapp"},"\u4f7f\u7528anchor\u521b\u5efa\u4e00\u4e2ablog dapp"),(0,r.kt)("h2",{id:"\u9879\u76ee\u8bbe\u7f6e"},"\u9879\u76ee\u8bbe\u7f6e"),(0,r.kt)("h3",{id:"\u521d\u59cb\u5316anchor\u9879\u76ee"},"\u521d\u59cb\u5316anchor\u9879\u76ee"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"anchor init solblog\n")),(0,r.kt)("h3",{id:"\u9879\u76ee\u76ee\u5f55"},"\u9879\u76ee\u76ee\u5f55"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-text"},"|\n\u251c\u2500\u2500 programs\n|   \u2514\u2500\u2500 solblog\n|        \u2514\u2500\u2500 src\n|             \u2514\u2500\u2500 lib.rs\n")),(0,r.kt)("p",null,"\u9ed8\u8ba4\u4e0b\uff0canchor\u4f1a\u6dfb\u52a0\u4e00\u4e9b\u57fa\u7840\u7684\u4ee3\u7801\u3002"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},'// programs/solblog/src/lib.rs\n\nuse anchor_lang::prelude::*;\n\ndeclare_id!("Fg6PaFpoGXkYsidMpWTK6W2BeZ7FEfcYkg476zPFsLnS");\n\n#[program]\npub mod solblog {\n    use super::*;\n    pub fn initialize(ctx: Context<Initialize>) -> ProgramResult {\n        Ok(())\n    }\n}\n\n#[derive(Accounts)]\npub struct Initialize {}\n')),(0,r.kt)("p",null,"\u7a0b\u5e8f\u7684\u516c\u94a5\u9ed8\u8ba4\u5360\u4f4d\u7b26\uff1a"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},'declare_id!("Fg6PaFpoGXkYsidMpWTK6W2BeZ7FEfcYkg476zPFsLnS");\n')),(0,r.kt)("p",null,"\u6211\u4eec\u9700\u8981\u91cd\u65b0\u751f\u6210\u6211\u4eec\u81ea\u5df1\u7684\u516c\u94a5\u3002"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"cd solblog\nanchor build\n")),(0,r.kt)("p",null,"\u6784\u5efa\u5b8c\u6210\u540e\uff0c\u4f1a\u751f\u6210 target \u76ee\u5f55"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-text"},"|\n\u251c\u2500\u2500 programs\n|   \u2514\u2500\u2500 solblog\n|      \u2514\u2500\u2500 src\n|         \u2514\u2500\u2500 lib.rs\n\u251c\u2500\u2500 target\n|   \u2514\u2500\u2500 idl\n|   \u2514\u2500\u2500 deploy\n|           solblog.so\n|           solblog-keypair.json\n")),(0,r.kt)("p",null,"\u6211\u4eec\u751f\u6210\u7684\u65b0\u516c\u94a5\u5728 solblog-keypari.json \u6587\u4ef6\u4e2d\u3002\u4f7f\u7528\u5982\u4e0b\u547d\u4ee4\u67e5\u770b\uff1a"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"solana address -k ./target/deploy/solblog-keypair.json\n")),(0,r.kt)("p",null,"\u6253\u5370\u6211\u4eec\u7a0b\u5e8f\u7684\u552f\u4e00key:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-text"},"BLoG9PtBTkhUbGRAYVe8jzd5ji1G2VPkzwbsRV3bnteD\n")),(0,r.kt)("p",null,"\u4f7f\u7528\u8fd9\u4e2akey,\u66ff\u6362\u6211\u4eec\u7684\u7a0b\u5e8f\u7684key:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-text"},'declare_id!("SoMeKeyThatIsUniqueTOmyPROGRAM");\n')),(0,r.kt)("p",null,"\u521b\u5efaBlogAccount, \u5b58\u50a8\u6211\u4eec\u7684\u6570\u636e\u3002"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},"#[account]\npub struct BlogAccount {\n    pub anthority: Pubkey,\n    pub latest_post: Vec<u8>,\n}\n")),(0,r.kt)("h2",{id:"\u7f16\u5199rust\u51fd\u6570"},"\u7f16\u5199rust\u51fd\u6570"),(0,r.kt)("h3",{id:"initialize\u6307\u4ee4"},"Initialize\u6307\u4ee4"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"\u6784\u5efaInitialize\u6307\u4ee4\u6240\u9700\u8981\u7684\u6570\u636e\u7ed3\u6784")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},"#[derive(Accounts)]\npub struct Initialize<'info> {\n    #[account(\n        init, // 1. Hey Anchor, initialize an account with these details for me\n        payer = authority, // 2. See that authority Signer (pubkey) down there? They're paying for this\n        space = 8 // 3.A) all accounts need 8 bytes for the account discriminator prepended to the account\n        + 32 // 3.B) authority: Pubkey needs 32 bytes\n        + 566 // 3.C) latest_post: post bytes could need up to 566 bytes for the memo\n        // You have to do this math yourself, there's no macro for this\n    )]\n    pub blog_account: Account<'info, BlogAccount>,\n    pub authority: Singer<'info>,\n    pub system_program: Program<'info, System>,\n}\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"\u5b9e\u73b0\u903b\u8f91Initialize\u6307\u4ee4\u7684\u903b\u8f91")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},"#[program]\npub mod solblog{\n    use super:*,\n    \n    // initialize\n    pub fn initialize(ctx: Context<Initialize>) -> ProgramResult {\n        let b_p_a = &mut ctx.accounts.blog_account;\n        b_p_a.authority = *ctx.accounts.authority.key;\n       Ok(())\n    }   \n}\n")),(0,r.kt)("h3",{id:"makepost\u6307\u4ee4"},"MakePost\u6307\u4ee4"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"\u6784\u5efamake_post\u6307\u4ee4\u6240\u9700\u8981\u7684\u6570\u636e")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},"#[derive(Accounts)]\npub struct MakePost<'inof> {\n     #[account(mut, has_one = authority)]\n    pub blog_account: Account<'info, BlogAccount>,\n    // Also put authority here\n    // has_one = authority ensure it was provided as a function arg\n    // ensures the poster has the keys\n    // has to come after the Account statement above\n    // no mut this time, because we don't change authority when we post\n    pub authority: Signer<'info>,\n}\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"\u5b9e\u73b0make_post\u6307\u4ee4\u903b\u8f91")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},'pub fn make_post(ctx: Context<MakePost>, new_post: Vec<u8>) -> ProgramResult {\n    let post = from_utf8(&new_post)\n        .map_err(|err|{\n            msg!("invalid utf-8, from byte {}", err.valid_up_to());\n            ProgramError::InvalidInstructionData\n        })?;\n    msg!(post);\n    let b_acc = &mut ctx.accouts.blog_account;\n    b_acc.latest_post = new_post;// save the latest post in the account.\n    // past posts will be saved in transaction logs\n    Ok(())\n}\n')),(0,r.kt)("p",null,"\u6211\u4eec\u5408\u7ea6\u4ee3\u7801\u5df2\u7ecf\u5b8c\u6210\uff0c\u91cd\u65b0\u7f16\u8bd1\u7a0b\u5e8f\uff1a"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"anchor build\n")),(0,r.kt)("h2",{id:"\u90e8\u7f72\u5728\u6d4b\u8bd5\u7f51\u4e0a"},"\u90e8\u7f72\u5728\u6d4b\u8bd5\u7f51\u4e0a"),(0,r.kt)("p",null,"\u6211\u4eec\u9700\u8981 2 \u4e2a keypair\u53bb\u90e8\u7f72\u5408\u7ea6\uff1a"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"\u53d1\u8d77\u4ea4\u6613\u7684keypair"),(0,r.kt)("li",{parentName:"ol"},"\u7a0b\u5e8f\u7684 keypair")),(0,r.kt)("p",null,"\u4f7f\u7528 solana-web3.js \u751f\u6210  Authority keypair\u3002"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"import { Keypair} from '@solana/web3.js'\n\nlet programAuthorityKeypair = new keypair()\n")),(0,r.kt)("p",null,"\u5728\u6d4b\u8bd5\u7f51\u4e0a\uff0c\u6211\u4eec\u7ed9\u6211\u4eec\u7684\u8d26\u53f7\u7a7a\u6295\u4e00\u4e9b sol"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'import { Connection, LAMPORTS_PER_SOL } from "@solana/web3.js"\n\nthis.connection = new Connection("https://api.devnet.solana.com", "comfirmed")\n\nconst signature = await this.connection.requestAirdrop(\n        programAuthorityKeypair.publicKey,\n        LAMPORTS_PER_SOL * 5\n)\nawait this.connection.confirmTransaction(signature)\nconst programAuthorityKeyfileName = `deploy/programauthority-keypair.json`\nconst programAuthorityKeypairFile = path.resolve(\n    `${__dirname}${SLASH}${programAuthorityKeyfileName}`\n)\n\n// ... [snip]\n\nfs.writeFileSync(\n    programAuthorityKeypairFile,\n    `[${Buffer.from(programAuthorityKeypair.secretKey.toString())}]`\n)\n')),(0,r.kt)("h2",{id:"front-end"},"front end"),(0,r.kt)("p",null,"todo"))}p.isMDXComponent=!0}}]);